// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Define an Enum for meal types
enum MealType {
  LUNCH
  DINNER
}

model Bill {
  id                        Int      @id @default(autoincrement())
  date                      DateTime
  foodAmount                Float
  drinkAmount               Float
  mealType                  MealType @default(LUNCH)
  isOurFood                 Boolean? @default(true)
  numberOfPeopleWorkingDinner Int?   @default(1)
  comments                  String?
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt

  @@index([date]) // Add an index on the date field for faster querying
}

// Add other models if you have them (e.g., User model for authentication)
// Assuming these are needed for NextAuth.js with Prisma adapter
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// RESTORED: AppConfiguration Model for persistent settings
model AppConfiguration {
  id          Int      @id @default(autoincrement())
  key         String   @unique
  value       Float
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model PurchaseBill {
  id          Int      @id @default(autoincrement())
  date        DateTime  // Date of the purchase
  amount      Float    // Total cost of the purchase
  description String   // e.g., "Vegetables from market", "Meat supplier", "Grocery store"
  comments    String?  // Optional detailed comments about the purchase
}
