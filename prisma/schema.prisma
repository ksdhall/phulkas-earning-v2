// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  // Provider is "sqlite"
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Define an Enum for meal types
enum MealType {
  LUNCH
  DINNER
}

model Bill {
  id          Int       @id @default(autoincrement())
  date        DateTime
  foodAmount  Float
  drinkAmount Float
  // Changed from Boolean to Enum
  // FIX: Add a default value for existing rows
  mealType    MealType @default(LUNCH) // Use the MealType Enum and default to LUNCH

  // Added for dinner food calculation
  // True if the food sold was 'ours' during dinner. Optional, defaults to true if not specified.
  isOurFood   Boolean?  @default(true)

  // Added for dinner food calculation shift share. Optional, defaults to 1 if not specified.
  // Only relevant when mealType is DINNER.
  numberOfPeopleWorkingDinner Int? @default(1)

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([date]) // Add an index on the date field for faster querying
}

// Add other models if you have them (e.g., User model for authentication)
// Assuming these are needed for NextAuth.js with Prisma adapter
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  // Removed @db.Text as it's not supported by SQLite
  id_token          String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
