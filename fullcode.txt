Generating consolidated code output...

--- FILE_START ---
PATH: next-env.d.ts
TYPE: typescript
CONTENT:
```
/// <reference types="next" />
/// <reference types="next/image-types/global" />

// NOTE: This file should not be edited
// see https://nextjs.org/docs/app/api-reference/config/typescript for more information.

```
--- FILE_END ---

--- FILE_START ---
PATH: package-lock.json
TYPE: json
CONTENT:
```
{
  "name": "phulkas-earning-v2",
  "version": "0.1.0",
  "lockfileVersion": 3,
  "requires": true,
  "packages": {
    "": {
      "name": "phulkas-earning-v2",
      "version": "0.1.0",
      "dependencies": {
        "@auth/prisma-adapter": "^2.9.1",
        "@date-io/date-fns": "^3.2.1",
        "@emotion/react": "^11.14.0",
        "@emotion/styled": "^11.14.0",
        "@mui/icons-material": "^7.1.0",
        "@mui/lab": "^7.0.0-beta.12",
        "@mui/material": "^7.1.0",
        "@mui/x-date-pickers": "^8.3.1",
        "@mui/x-date-pickers-pro": "^8.3.1",
        "date-fns": "^4.1.0",
        "next": "15.3.2",
        "next-auth": "^4.24.7",
        "next-intl": "^4.1.0",
        "prisma": "^6.8.2",
        "react": "^19.0.0",
        "react-dom": "^19.0.0",
        "recharts": "^2.15.3",
        "sqlite3": "^5.1.7"
      },
      "devDependencies": {
        "@types/node": "^20",
        "@types/react": "^19",
        "@types/react-dom": "^19",
        "typescript": "^5"
      }
    },
    "node_modules/@auth/core": {
      "version": "0.34.2",
      "resolved": "https://registry.npmjs.org/@auth/core/-/core-0.34.2.tgz",
      "integrity": "sha512-KywHKRgLiF3l7PLyL73fjLSIBe1YNcA6sMeew4yMP6cfCWGXZrkkXd32AjRi1hlJ9nvovUBGZHvbn+LijO6ZeQ==",
      "license": "ISC",
      "optional": true,
      "peer": true,
      "dependencies": {
        "@panva/hkdf": "^1.1.1",
        "@types/cookie": "0.6.0",
        "cookie": "0.6.0",
        "jose": "^5.1.3",
        "oauth4webapi": "^2.10.4",
        "preact": "10.11.3",
        "preact-render-to-string": "5.2.3"
      },
      "peerDependencies": {
        "@simplewebauthn/browser": "^9.0.1",
        "@simplewebauthn/server": "^9.0.2",
        "nodemailer": "^6.8.0"
      },
      "peerDependenciesMeta": {
        "@simplewebauthn/browser": {
          "optional": true
        },
        "@simplewebauthn/server": {
          "optional": true
        },
        "nodemailer": {
          "optional": true
        }
      }
    },
    "node_modules/@auth/core/node_modules/cookie": {
      "version": "0.6.0",
      "resolved": "https://registry.npmjs.org/cookie/-/cookie-0.6.0.tgz",
      "integrity": "sha512-U71cyTamuh1CRNCfpGY6to28lxvNwPG4Guz/EVjgf3Jmzv0vlDp1atT9eS5dDjMYHucpHbWns6Lwf3BKz6svdw==",
      "license": "MIT",
      "optional": true,
      "peer": true,
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/@auth/core/node_modules/jose": {
      "version": "5.10.0",
      "resolved": "https://registry.npmjs.org/jose/-/jose-5.10.0.tgz",
      "integrity": "sha512-s+3Al/p9g32Iq+oqXxkW//7jk2Vig6FF1CFqzVXoTUXt2qz89YWbL+OwS17NFYEvxC35n0FKeGO2LGYSxeM2Gg==",
      "license": "MIT",
      "optional": true,
      "peer": true,
      "funding": {
        "url": "https://github.com/sponsors/panva"
      }
    },
    "node_modules/@auth/core/node_modules/preact": {
      "version": "10.11.3",
      "resolved": "https://registry.npmjs.org/preact/-/preact-10.11.3.tgz",
      "integrity": "sha512-eY93IVpod/zG3uMF22Unl8h9KkrcKIRs2EGar8hwLZZDU1lkjph303V9HZBwufh2s736U6VXuhD109LYqPoffg==",
      "license": "MIT",
      "optional": true,
      "peer": true,
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/preact"
      }
    },
    "node_modules/@auth/core/node_modules/preact-render-to-string": {
      "version": "5.2.3",
      "resolved": "https://registry.npmjs.org/preact-render-to-string/-/preact-render-to-string-5.2.3.tgz",
      "integrity": "sha512-aPDxUn5o3GhWdtJtW0svRC2SS/l8D9MAgo2+AWml+BhDImb27ALf04Q2d+AHqUUOc6RdSXFIBVa2gxzgMKgtZA==",
      "license": "MIT",
      "optional": true,
      "peer": true,
      "dependencies": {
        "pretty-format": "^3.8.0"
      },
      "peerDependencies": {
        "preact": ">=10"
      }
    },
    "node_modules/@auth/prisma-adapter": {
      "version": "2.9.1",
      "resolved": "https://registry.npmjs.org/@auth/prisma-adapter/-/prisma-adapter-2.9.1.tgz",
      "integrity": "sha512-0ZfjOPt3Ci8yx8SMCydAuBAjR/exI/8SAr6JDVYtqDFhm0JaV1XuHYgEzgzXZZfW2+WKC29LowCWxdCjoAz9kQ==",
      "license": "ISC",
      "dependencies": {
        "@auth/core": "0.39.1"
      },
      "peerDependencies": {
        "@prisma/client": ">=2.26.0 || >=3 || >=4 || >=5 || >=6"
      }
    },
    "node_modules/@auth/prisma-adapter/node_modules/@auth/core": {
      "version": "0.39.1",
      "resolved": "https://registry.npmjs.org/@auth/core/-/core-0.39.1.tgz",
      "integrity": "sha512-McD8slui0oOA1pjR5sPjLPl5Zm//nLP/8T3kr8hxIsvNLvsiudYvPHhDFPjh1KcZ2nFxCkZmP6bRxaaPd/AnLA==",
      "license": "ISC",
      "dependencies": {
        "@panva/hkdf": "^1.2.1",
        "jose": "^6.0.6",
        "oauth4webapi": "^3.3.0",
        "preact": "10.24.3",
        "preact-render-to-string": "6.5.11"
      },
      "peerDependencies": {
        "@simplewebauthn/browser": "^9.0.1",
        "@simplewebauthn/server": "^9.0.2",
        "nodemailer": "^6.8.0"
      },
      "peerDependenciesMeta": {
        "@simplewebauthn/browser": {
          "optional": true
        },
        "@simplewebauthn/server": {
          "optional": true
        },
        "nodemailer": {
          "optional": true
        }
      }
    },
    "node_modules/@auth/prisma-adapter/node_modules/jose": {
      "version": "6.0.11",
      "resolved": "https://registry.npmjs.org/jose/-/jose-6.0.11.tgz",
      "integrity": "sha512-QxG7EaliDARm1O1S8BGakqncGT9s25bKL1WSf6/oa17Tkqwi8D2ZNglqCF+DsYF88/rV66Q/Q2mFAy697E1DUg==",
      "license": "MIT",
      "funding": {
        "url": "https://github.com/sponsors/panva"
      }
    },
    "node_modules/@auth/prisma-adapter/node_modules/oauth4webapi": {
      "version": "3.5.1",
      "resolved": "https://registry.npmjs.org/oauth4webapi/-/oauth4webapi-3.5.1.tgz",
      "integrity": "sha512-txg/jZQwcbaF7PMJgY7aoxc9QuCxHVFMiEkDIJ60DwDz3PbtXPQnrzo+3X4IRYGChIwWLabRBRpf1k9hO9+xrQ==",
      "license": "MIT",
      "funding": {
        "url": "https://github.com/sponsors/panva"
      }
    },
    "node_modules/@auth/prisma-adapter/node_modules/preact-render-to-string": {
      "version": "6.5.11",
      "resolved": "https://registry.npmjs.org/preact-render-to-string/-/preact-render-to-string-6.5.11.tgz",
      "integrity": "sha512-ubnauqoGczeGISiOh6RjX0/cdaF8v/oDXIjO85XALCQjwQP+SB4RDXXtvZ6yTYSjG+PC1QRP2AhPgCEsM2EvUw==",
      "license": "MIT",
      "peerDependencies": {
        "preact": ">=10"
      }
    },
    "node_modules/@babel/code-frame": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/code-frame/-/code-frame-7.27.1.tgz",
      "integrity": "sha512-cjQ7ZlQ0Mv3b47hABuTevyTuYN4i+loJKGeV9flcCgIK37cCXRh+L1bd3iBHlynerhQ7BhCkn2BPbQUL+rGqFg==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-validator-identifier": "^7.27.1",
        "js-tokens": "^4.0.0",
        "picocolors": "^1.1.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/generator": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/generator/-/generator-7.27.1.tgz",
      "integrity": "sha512-UnJfnIpc/+JO0/+KRVQNGU+y5taA5vCbwN8+azkX6beii/ZF+enZJSOKo11ZSzGJjlNfJHfQtmQT8H+9TXPG2w==",
      "license": "MIT",
      "dependencies": {
        "@babel/parser": "^7.27.1",
        "@babel/types": "^7.27.1",
        "@jridgewell/gen-mapping": "^0.3.5",
        "@jridgewell/trace-mapping": "^0.3.25",
        "jsesc": "^3.0.2"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-module-imports": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/helper-module-imports/-/helper-module-imports-7.27.1.tgz",
      "integrity": "sha512-0gSFWUPNXNopqtIPQvlD5WgXYI5GY2kP2cCvoT8kczjbfcfuIljTbcWrulD1CIPIX2gt1wghbDy08yE1p+/r3w==",
      "license": "MIT",
      "dependencies": {
        "@babel/traverse": "^7.27.1",
        "@babel/types": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-string-parser": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/helper-string-parser/-/helper-string-parser-7.27.1.tgz",
      "integrity": "sha512-qMlSxKbpRlAridDExk92nSobyDdpPijUq2DW6oDnUqd0iOGxmQjyqhMIihI9+zv4LPyZdRje2cavWPbCbWm3eA==",
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-validator-identifier": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/helper-validator-identifier/-/helper-validator-identifier-7.27.1.tgz",
      "integrity": "sha512-D2hP9eA+Sqx1kBZgzxZh0y1trbuU+JoDkiEwqhQ36nodYqJwyEIhPSdMNd7lOm/4io72luTPWH20Yda0xOuUow==",
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/parser": {
      "version": "7.27.2",
      "resolved": "https://registry.npmjs.org/@babel/parser/-/parser-7.27.2.tgz",
      "integrity": "sha512-QYLs8299NA7WM/bZAdp+CviYYkVoYXlDW2rzliy3chxd1PQjej7JORuMJDJXJUb9g0TT+B99EwaVLKmX+sPXWw==",
      "license": "MIT",
      "dependencies": {
        "@babel/types": "^7.27.1"
      },
      "bin": {
        "parser": "bin/babel-parser.js"
      },
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@babel/runtime": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/runtime/-/runtime-7.27.1.tgz",
      "integrity": "sha512-1x3D2xEk2fRo3PAhwQwu5UubzgiVWSXTBfWpVd2Mx2AzRqJuDJCsgaDVZ7HB5iGzDW1Hl1sWN2mFyKjmR9uAog==",
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/template": {
      "version": "7.27.2",
      "resolved": "https://registry.npmjs.org/@babel/template/-/template-7.27.2.tgz",
      "integrity": "sha512-LPDZ85aEJyYSd18/DkjNh4/y1ntkE5KwUHWTiqgRxruuZL2F1yuHligVHLvcHY2vMHXttKFpJn6LwfI7cw7ODw==",
      "license": "MIT",
      "dependencies": {
        "@babel/code-frame": "^7.27.1",
        "@babel/parser": "^7.27.2",
        "@babel/types": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/traverse": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/traverse/-/traverse-7.27.1.tgz",
      "integrity": "sha512-ZCYtZciz1IWJB4U61UPu4KEaqyfj+r5T1Q5mqPo+IBpcG9kHv30Z0aD8LXPgC1trYa6rK0orRyAhqUgk4MjmEg==",
      "license": "MIT",
      "dependencies": {
        "@babel/code-frame": "^7.27.1",
        "@babel/generator": "^7.27.1",
        "@babel/parser": "^7.27.1",
        "@babel/template": "^7.27.1",
        "@babel/types": "^7.27.1",
        "debug": "^4.3.1",
        "globals": "^11.1.0"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/types": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/types/-/types-7.27.1.tgz",
      "integrity": "sha512-+EzkxvLNfiUeKMgy/3luqfsCWFRXLb7U6wNQTk60tovuckwB15B191tJWvpp4HjiQWdJkCxO3Wbvc6jlk3Xb2Q==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-string-parser": "^7.27.1",
        "@babel/helper-validator-identifier": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@date-io/core": {
      "version": "3.2.0",
      "resolved": "https://registry.npmjs.org/@date-io/core/-/core-3.2.0.tgz",
      "integrity": "sha512-hqwXvY8/YBsT9RwQITG868ZNb1MVFFkF7W1Ecv4P472j/ZWa7EFcgSmxy8PUElNVZfvhdvfv+a8j6NWJqOX5mA==",
      "license": "MIT"
    },
    "node_modules/@date-io/date-fns": {
      "version": "3.2.1",
      "resolved": "https://registry.npmjs.org/@date-io/date-fns/-/date-fns-3.2.1.tgz",
      "integrity": "sha512-CtXgTOAamkImI+CmbWRNdBi4ljj9xm/tdoPa+eeeiygduzubJTsXp18vYz+Vs/9yLho1zUOXlxpsfsF7PsXSWQ==",
      "license": "MIT",
      "dependencies": {
        "@date-io/core": "^3.2.0"
      },
      "peerDependencies": {
        "date-fns": "^3.2.0 || ^4.1.0"
      },
      "peerDependenciesMeta": {
        "date-fns": {
          "optional": true
        }
      }
    },
    "node_modules/@emnapi/runtime": {
      "version": "1.4.3",
      "resolved": "https://registry.npmjs.org/@emnapi/runtime/-/runtime-1.4.3.tgz",
      "integrity": "sha512-pBPWdu6MLKROBX05wSNKcNb++m5Er+KQ9QkB+WVM+pW2Kx9hoSrVTnu3BdkI5eBLZoKu/J6mW/B6i6bJB2ytXQ==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "tslib": "^2.4.0"
      }
    },
    "node_modules/@emotion/babel-plugin": {
      "version": "11.13.5",
      "resolved": "https://registry.npmjs.org/@emotion/babel-plugin/-/babel-plugin-11.13.5.tgz",
      "integrity": "sha512-pxHCpT2ex+0q+HH91/zsdHkw/lXd468DIN2zvfvLtPKLLMo6gQj7oLObq8PhkrxOZb/gGCq03S3Z7PDhS8pduQ==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-module-imports": "^7.16.7",
        "@babel/runtime": "^7.18.3",
        "@emotion/hash": "^0.9.2",
        "@emotion/memoize": "^0.9.0",
        "@emotion/serialize": "^1.3.3",
        "babel-plugin-macros": "^3.1.0",
        "convert-source-map": "^1.5.0",
        "escape-string-regexp": "^4.0.0",
        "find-root": "^1.1.0",
        "source-map": "^0.5.7",
        "stylis": "4.2.0"
      }
    },
    "node_modules/@emotion/cache": {
      "version": "11.14.0",
      "resolved": "https://registry.npmjs.org/@emotion/cache/-/cache-11.14.0.tgz",
      "integrity": "sha512-L/B1lc/TViYk4DcpGxtAVbx0ZyiKM5ktoIyafGkH6zg/tj+mA+NE//aPYKG0k8kCHSHVJrpLpcAlOBEXQ3SavA==",
      "license": "MIT",
      "dependencies": {
        "@emotion/memoize": "^0.9.0",
        "@emotion/sheet": "^1.4.0",
        "@emotion/utils": "^1.4.2",
        "@emotion/weak-memoize": "^0.4.0",
        "stylis": "4.2.0"
      }
    },
    "node_modules/@emotion/hash": {
      "version": "0.9.2",
      "resolved": "https://registry.npmjs.org/@emotion/hash/-/hash-0.9.2.tgz",
      "integrity": "sha512-MyqliTZGuOm3+5ZRSaaBGP3USLw6+EGykkwZns2EPC5g8jJ4z9OrdZY9apkl3+UP9+sdz76YYkwCKP5gh8iY3g==",
      "license": "MIT"
    },
    "node_modules/@emotion/is-prop-valid": {
      "version": "1.3.1",
      "resolved": "https://registry.npmjs.org/@emotion/is-prop-valid/-/is-prop-valid-1.3.1.tgz",
      "integrity": "sha512-/ACwoqx7XQi9knQs/G0qKvv5teDMhD7bXYns9N/wM8ah8iNb8jZ2uNO0YOgiq2o2poIvVtJS2YALasQuMSQ7Kw==",
      "license": "MIT",
      "dependencies": {
        "@emotion/memoize": "^0.9.0"
      }
    },
    "node_modules/@emotion/memoize": {
      "version": "0.9.0",
      "resolved": "https://registry.npmjs.org/@emotion/memoize/-/memoize-0.9.0.tgz",
      "integrity": "sha512-30FAj7/EoJ5mwVPOWhAyCX+FPfMDrVecJAM+Iw9NRoSl4BBAQeqj4cApHHUXOVvIPgLVDsCFoz/hGD+5QQD1GQ==",
      "license": "MIT"
    },
    "node_modules/@emotion/react": {
      "version": "11.14.0",
      "resolved": "https://registry.npmjs.org/@emotion/react/-/react-11.14.0.tgz",
      "integrity": "sha512-O000MLDBDdk/EohJPFUqvnp4qnHeYkVP5B0xEG0D/L7cOKP9kefu2DXn8dj74cQfsEzUqh+sr1RzFqiL1o+PpA==",
      "license": "MIT",
      "dependencies": {
        "@babel/runtime": "^7.18.3",
        "@emotion/babel-plugin": "^11.13.5",
        "@emotion/cache": "^11.14.0",
        "@emotion/serialize": "^1.3.3",
        "@emotion/use-insertion-effect-with-fallbacks": "^1.2.0",
        "@emotion/utils": "^1.4.2",
        "@emotion/weak-memoize": "^0.4.0",
        "hoist-non-react-statics": "^3.3.1"
      },
      "peerDependencies": {
        "react": ">=16.8.0"
      },
      "peerDependenciesMeta": {
        "@types/react": {
          "optional": true
        }
      }
    },
    "node_modules/@emotion/serialize": {
      "version": "1.3.3",
      "resolved": "https://registry.npmjs.org/@emotion/serialize/-/serialize-1.3.3.tgz",
      "integrity": "sha512-EISGqt7sSNWHGI76hC7x1CksiXPahbxEOrC5RjmFRJTqLyEK9/9hZvBbiYn70dw4wuwMKiEMCUlR6ZXTSWQqxA==",
      "license": "MIT",
      "dependencies": {
        "@emotion/hash": "^0.9.2",
        "@emotion/memoize": "^0.9.0",
        "@emotion/unitless": "^0.10.0",
        "@emotion/utils": "^1.4.2",
        "csstype": "^3.0.2"
      }
    },
    "node_modules/@emotion/sheet": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/@emotion/sheet/-/sheet-1.4.0.tgz",
      "integrity": "sha512-fTBW9/8r2w3dXWYM4HCB1Rdp8NLibOw2+XELH5m5+AkWiL/KqYX6dc0kKYlaYyKjrQ6ds33MCdMPEwgs2z1rqg==",
      "license": "MIT"
    },
    "node_modules/@emotion/styled": {
      "version": "11.14.0",
      "resolved": "https://registry.npmjs.org/@emotion/styled/-/styled-11.14.0.tgz",
      "integrity": "sha512-XxfOnXFffatap2IyCeJyNov3kiDQWoR08gPUQxvbL7fxKryGBKUZUkG6Hz48DZwVrJSVh9sJboyV1Ds4OW6SgA==",
      "license": "MIT",
      "dependencies": {
        "@babel/runtime": "^7.18.3",
        "@emotion/babel-plugin": "^11.13.5",
        "@emotion/is-prop-valid": "^1.3.0",
        "@emotion/serialize": "^1.3.3",
        "@emotion/use-insertion-effect-with-fallbacks": "^1.2.0",
        "@emotion/utils": "^1.4.2"
      },
      "peerDependencies": {
        "@emotion/react": "^11.0.0-rc.0",
        "react": ">=16.8.0"
      },
      "peerDependenciesMeta": {
        "@types/react": {
          "optional": true
        }
      }
    },
    "node_modules/@emotion/unitless": {
      "version": "0.10.0",
      "resolved": "https://registry.npmjs.org/@emotion/unitless/-/unitless-0.10.0.tgz",
      "integrity": "sha512-dFoMUuQA20zvtVTuxZww6OHoJYgrzfKM1t52mVySDJnMSEa08ruEvdYQbhvyu6soU+NeLVd3yKfTfT0NeV6qGg==",
      "license": "MIT"
    },
    "node_modules/@emotion/use-insertion-effect-with-fallbacks": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/@emotion/use-insertion-effect-with-fallbacks/-/use-insertion-effect-with-fallbacks-1.2.0.tgz",
      "integrity": "sha512-yJMtVdH59sxi/aVJBpk9FQq+OR8ll5GT8oWd57UpeaKEVGab41JWaCFA7FRLoMLloOZF/c/wsPoe+bfGmRKgDg==",
      "license": "MIT",
      "peerDependencies": {
        "react": ">=16.8.0"
      }
    },
    "node_modules/@emotion/utils": {
      "version": "1.4.2",
      "resolved": "https://registry.npmjs.org/@emotion/utils/-/utils-1.4.2.tgz",
      "integrity": "sha512-3vLclRofFziIa3J2wDh9jjbkUz9qk5Vi3IZ/FSTKViB0k+ef0fPV7dYrUIugbgupYDx7v9ud/SjrtEP8Y4xLoA==",
      "license": "MIT"
    },
    "node_modules/@emotion/weak-memoize": {
      "version": "0.4.0",
      "resolved": "https://registry.npmjs.org/@emotion/weak-memoize/-/weak-memoize-0.4.0.tgz",
      "integrity": "sha512-snKqtPW01tN0ui7yu9rGv69aJXr/a/Ywvl11sUjNtEcRc+ng/mQriFL0wLXMef74iHa/EkftbDzU9F8iFbH+zg==",
      "license": "MIT"
    },
    "node_modules/@fingerprintjs/fingerprintjs": {
      "version": "3.4.2",
      "resolved": "https://registry.npmjs.org/@fingerprintjs/fingerprintjs/-/fingerprintjs-3.4.2.tgz",
      "integrity": "sha512-3Ncze6JsJpB7BpYhqIgvBpfvEX1jsEKrad5hQBpyRQxtoAp6hx3+R46zqfsuQG4D9egQZ+xftQ0u4LPFMB7Wmg==",
      "license": "MIT",
      "dependencies": {
        "tslib": "^2.4.1"
      }
    },
    "node_modules/@formatjs/ecma402-abstract": {
      "version": "2.3.4",
      "resolved": "https://registry.npmjs.org/@formatjs/ecma402-abstract/-/ecma402-abstract-2.3.4.tgz",
      "integrity": "sha512-qrycXDeaORzIqNhBOx0btnhpD1c+/qFIHAN9znofuMJX6QBwtbrmlpWfD4oiUUD2vJUOIYFA/gYtg2KAMGG7sA==",
      "license": "MIT",
      "dependencies": {
        "@formatjs/fast-memoize": "2.2.7",
        "@formatjs/intl-localematcher": "0.6.1",
        "decimal.js": "^10.4.3",
        "tslib": "^2.8.0"
      }
    },
    "node_modules/@formatjs/ecma402-abstract/node_modules/@formatjs/intl-localematcher": {
      "version": "0.6.1",
      "resolved": "https://registry.npmjs.org/@formatjs/intl-localematcher/-/intl-localematcher-0.6.1.tgz",
      "integrity": "sha512-ePEgLgVCqi2BBFnTMWPfIghu6FkbZnnBVhO2sSxvLfrdFw7wCHAHiDoM2h4NRgjbaY7+B7HgOLZGkK187pZTZg==",
      "license": "MIT",
      "dependencies": {
        "tslib": "^2.8.0"
      }
    },
    "node_modules/@formatjs/fast-memoize": {
      "version": "2.2.7",
      "resolved": "https://registry.npmjs.org/@formatjs/fast-memoize/-/fast-memoize-2.2.7.tgz",
      "integrity": "sha512-Yabmi9nSvyOMrlSeGGWDiH7rf3a7sIwplbvo/dlz9WCIjzIQAfy1RMf4S0X3yG724n5Ghu2GmEl5NJIV6O9sZQ==",
      "license": "MIT",
      "dependencies": {
        "tslib": "^2.8.0"
      }
    },
    "node_modules/@formatjs/icu-messageformat-parser": {
      "version": "2.11.2",
      "resolved": "https://registry.npmjs.org/@formatjs/icu-messageformat-parser/-/icu-messageformat-parser-2.11.2.tgz",
      "integrity": "sha512-AfiMi5NOSo2TQImsYAg8UYddsNJ/vUEv/HaNqiFjnI3ZFfWihUtD5QtuX6kHl8+H+d3qvnE/3HZrfzgdWpsLNA==",
      "license": "MIT",
      "dependencies": {
        "@formatjs/ecma402-abstract": "2.3.4",
        "@formatjs/icu-skeleton-parser": "1.8.14",
        "tslib": "^2.8.0"
      }
    },
    "node_modules/@formatjs/icu-skeleton-parser": {
      "version": "1.8.14",
      "resolved": "https://registry.npmjs.org/@formatjs/icu-skeleton-parser/-/icu-skeleton-parser-1.8.14.tgz",
      "integrity": "sha512-i4q4V4qslThK4Ig8SxyD76cp3+QJ3sAqr7f6q9VVfeGtxG9OhiAk3y9XF6Q41OymsKzsGQ6OQQoJNY4/lI8TcQ==",
      "license": "MIT",
      "dependencies": {
        "@formatjs/ecma402-abstract": "2.3.4",
        "tslib": "^2.8.0"
      }
    },
    "node_modules/@formatjs/intl-localematcher": {
      "version": "0.5.10",
      "resolved": "https://registry.npmjs.org/@formatjs/intl-localematcher/-/intl-localematcher-0.5.10.tgz",
      "integrity": "sha512-af3qATX+m4Rnd9+wHcjJ4w2ijq+rAVP3CCinJQvFv1kgSu1W6jypUmvleJxcewdxmutM8dmIRZFxO/IQBZmP2Q==",
      "license": "MIT",
      "dependencies": {
        "tslib": "2"
      }
    },
    "node_modules/@gar/promisify": {
      "version": "1.1.3",
      "resolved": "https://registry.npmjs.org/@gar/promisify/-/promisify-1.1.3.tgz",
      "integrity": "sha512-k2Ty1JcVojjJFwrg/ThKi2ujJ7XNLYaFGNB/bWT9wGR+oSMJHMa5w+CUq6p/pVrKeNNgA7pCqEcjSnHVoqJQFw==",
      "license": "MIT",
      "optional": true
    },
    "node_modules/@img/sharp-darwin-arm64": {
      "version": "0.34.2",
      "resolved": "https://registry.npmjs.org/@img/sharp-darwin-arm64/-/sharp-darwin-arm64-0.34.2.tgz",
      "integrity": "sha512-OfXHZPppddivUJnqyKoi5YVeHRkkNE2zUFT2gbpKxp/JZCFYEYubnMg+gOp6lWfasPrTS+KPosKqdI+ELYVDtg==",
      "cpu": [
        "arm64"
      ],
      "license": "Apache-2.0",
      "optional": true,
      "os": [
        "darwin"
      ],
      "engines": {
        "node": "^18.17.0 || ^20.3.0 || >=21.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/libvips"
      },
      "optionalDependencies": {
        "@img/sharp-libvips-darwin-arm64": "1.1.0"
      }
    },
    "node_modules/@img/sharp-darwin-x64": {
      "version": "0.34.2",
      "resolved": "https://registry.npmjs.org/@img/sharp-darwin-x64/-/sharp-darwin-x64-0.34.2.tgz",
      "integrity": "sha512-dYvWqmjU9VxqXmjEtjmvHnGqF8GrVjM2Epj9rJ6BUIXvk8slvNDJbhGFvIoXzkDhrJC2jUxNLz/GUjjvSzfw+g==",
      "cpu": [
        "x64"
      ],
      "license": "Apache-2.0",
      "optional": true,
      "os": [
        "darwin"
      ],
      "engines": {
        "node": "^18.17.0 || ^20.3.0 || >=21.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/libvips"
      },
      "optionalDependencies": {
        "@img/sharp-libvips-darwin-x64": "1.1.0"
      }
    },
    "node_modules/@img/sharp-libvips-darwin-arm64": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/@img/sharp-libvips-darwin-arm64/-/sharp-libvips-darwin-arm64-1.1.0.tgz",
      "integrity": "sha512-HZ/JUmPwrJSoM4DIQPv/BfNh9yrOA8tlBbqbLz4JZ5uew2+o22Ik+tHQJcih7QJuSa0zo5coHTfD5J8inqj9DA==",
      "cpu": [
        "arm64"
      ],
      "license": "LGPL-3.0-or-later",
      "optional": true,
      "os": [
        "darwin"
      ],
      "funding": {
        "url": "https://opencollective.com/libvips"
      }
    },
    "node_modules/@img/sharp-libvips-darwin-x64": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/@img/sharp-libvips-darwin-x64/-/sharp-libvips-darwin-x64-1.1.0.tgz",
      "integrity": "sha512-Xzc2ToEmHN+hfvsl9wja0RlnXEgpKNmftriQp6XzY/RaSfwD9th+MSh0WQKzUreLKKINb3afirxW7A0fz2YWuQ==",
      "cpu": [
        "x64"
      ],
      "license": "LGPL-3.0-or-later",
      "optional": true,
      "os": [
        "darwin"
      ],
      "funding": {
        "url": "https://opencollective.com/libvips"
      }
    },
    "node_modules/@img/sharp-libvips-linux-arm": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/@img/sharp-libvips-linux-arm/-/sharp-libvips-linux-arm-1.1.0.tgz",
      "integrity": "sha512-s8BAd0lwUIvYCJyRdFqvsj+BJIpDBSxs6ivrOPm/R7piTs5UIwY5OjXrP2bqXC9/moGsyRa37eYWYCOGVXxVrA==",
      "cpu": [
        "arm"
      ],
      "license": "LGPL-3.0-or-later",
      "optional": true,
      "os": [
        "linux"
      ],
      "funding": {
        "url": "https://opencollective.com/libvips"
      }
    },
    "node_modules/@img/sharp-libvips-linux-arm64": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/@img/sharp-libvips-linux-arm64/-/sharp-libvips-linux-arm64-1.1.0.tgz",
      "integrity": "sha512-IVfGJa7gjChDET1dK9SekxFFdflarnUB8PwW8aGwEoF3oAsSDuNUTYS+SKDOyOJxQyDC1aPFMuRYLoDInyV9Ew==",
      "cpu": [
        "arm64"
      ],
      "license": "LGPL-3.0-or-later",
      "optional": true,
      "os": [
        "linux"
      ],
      "funding": {
        "url": "https://opencollective.com/libvips"
      }
    },
    "node_modules/@img/sharp-libvips-linux-ppc64": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/@img/sharp-libvips-linux-ppc64/-/sharp-libvips-linux-ppc64-1.1.0.tgz",
      "integrity": "sha512-tiXxFZFbhnkWE2LA8oQj7KYR+bWBkiV2nilRldT7bqoEZ4HiDOcePr9wVDAZPi/Id5fT1oY9iGnDq20cwUz8lQ==",
      "cpu": [
        "ppc64"
      ],
      "license": "LGPL-3.0-or-later",
      "optional": true,
      "os": [
        "linux"
      ],
      "funding": {
        "url": "https://opencollective.com/libvips"
      }
    },
    "node_modules/@img/sharp-libvips-linux-s390x": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/@img/sharp-libvips-linux-s390x/-/sharp-libvips-linux-s390x-1.1.0.tgz",
      "integrity": "sha512-xukSwvhguw7COyzvmjydRb3x/09+21HykyapcZchiCUkTThEQEOMtBj9UhkaBRLuBrgLFzQ2wbxdeCCJW/jgJA==",
      "cpu": [
        "s390x"
      ],
      "license": "LGPL-3.0-or-later",
      "optional": true,
      "os": [
        "linux"
      ],
      "funding": {
        "url": "https://opencollective.com/libvips"
      }
    },
    "node_modules/@img/sharp-libvips-linux-x64": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/@img/sharp-libvips-linux-x64/-/sharp-libvips-linux-x64-1.1.0.tgz",
      "integrity": "sha512-yRj2+reB8iMg9W5sULM3S74jVS7zqSzHG3Ol/twnAAkAhnGQnpjj6e4ayUz7V+FpKypwgs82xbRdYtchTTUB+Q==",
      "cpu": [
        "x64"
      ],
      "license": "LGPL-3.0-or-later",
      "optional": true,
      "os": [
        "linux"
      ],
      "funding": {
        "url": "https://opencollective.com/libvips"
      }
    },
    "node_modules/@img/sharp-libvips-linuxmusl-arm64": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/@img/sharp-libvips-linuxmusl-arm64/-/sharp-libvips-linuxmusl-arm64-1.1.0.tgz",
      "integrity": "sha512-jYZdG+whg0MDK+q2COKbYidaqW/WTz0cc1E+tMAusiDygrM4ypmSCjOJPmFTvHHJ8j/6cAGyeDWZOsK06tP33w==",
      "cpu": [
        "arm64"
      ],
      "license": "LGPL-3.0-or-later",
      "optional": true,
      "os": [
        "linux"
      ],
      "funding": {
        "url": "https://opencollective.com/libvips"
      }
    },
    "node_modules/@img/sharp-libvips-linuxmusl-x64": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/@img/sharp-libvips-linuxmusl-x64/-/sharp-libvips-linuxmusl-x64-1.1.0.tgz",
      "integrity": "sha512-wK7SBdwrAiycjXdkPnGCPLjYb9lD4l6Ze2gSdAGVZrEL05AOUJESWU2lhlC+Ffn5/G+VKuSm6zzbQSzFX/P65A==",
      "cpu": [
        "x64"
      ],
      "license": "LGPL-3.0-or-later",
      "optional": true,
      "os": [
        "linux"
      ],
      "funding": {
        "url": "https://opencollective.com/libvips"
      }
    },
    "node_modules/@img/sharp-linux-arm": {
      "version": "0.34.2",
      "resolved": "https://registry.npmjs.org/@img/sharp-linux-arm/-/sharp-linux-arm-0.34.2.tgz",
      "integrity": "sha512-0DZzkvuEOqQUP9mo2kjjKNok5AmnOr1jB2XYjkaoNRwpAYMDzRmAqUIa1nRi58S2WswqSfPOWLNOr0FDT3H5RQ==",
      "cpu": [
        "arm"
      ],
      "license": "Apache-2.0",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": "^18.17.0 || ^20.3.0 || >=21.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/libvips"
      },
      "optionalDependencies": {
        "@img/sharp-libvips-linux-arm": "1.1.0"
      }
    },
    "node_modules/@img/sharp-linux-arm64": {
      "version": "0.34.2",
      "resolved": "https://registry.npmjs.org/@img/sharp-linux-arm64/-/sharp-linux-arm64-0.34.2.tgz",
      "integrity": "sha512-D8n8wgWmPDakc83LORcfJepdOSN6MvWNzzz2ux0MnIbOqdieRZwVYY32zxVx+IFUT8er5KPcyU3XXsn+GzG/0Q==",
      "cpu": [
        "arm64"
      ],
      "license": "Apache-2.0",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": "^18.17.0 || ^20.3.0 || >=21.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/libvips"
      },
      "optionalDependencies": {
        "@img/sharp-libvips-linux-arm64": "1.1.0"
      }
    },
    "node_modules/@img/sharp-linux-s390x": {
      "version": "0.34.2",
      "resolved": "https://registry.npmjs.org/@img/sharp-linux-s390x/-/sharp-linux-s390x-0.34.2.tgz",
      "integrity": "sha512-EGZ1xwhBI7dNISwxjChqBGELCWMGDvmxZXKjQRuqMrakhO8QoMgqCrdjnAqJq/CScxfRn+Bb7suXBElKQpPDiw==",
      "cpu": [
        "s390x"
      ],
      "license": "Apache-2.0",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": "^18.17.0 || ^20.3.0 || >=21.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/libvips"
      },
      "optionalDependencies": {
        "@img/sharp-libvips-linux-s390x": "1.1.0"
      }
    },
    "node_modules/@img/sharp-linux-x64": {
      "version": "0.34.2",
      "resolved": "https://registry.npmjs.org/@img/sharp-linux-x64/-/sharp-linux-x64-0.34.2.tgz",
      "integrity": "sha512-sD7J+h5nFLMMmOXYH4DD9UtSNBD05tWSSdWAcEyzqW8Cn5UxXvsHAxmxSesYUsTOBmUnjtxghKDl15EvfqLFbQ==",
      "cpu": [
        "x64"
      ],
      "license": "Apache-2.0",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": "^18.17.0 || ^20.3.0 || >=21.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/libvips"
      },
      "optionalDependencies": {
        "@img/sharp-libvips-linux-x64": "1.1.0"
      }
    },
    "node_modules/@img/sharp-linuxmusl-arm64": {
      "version": "0.34.2",
      "resolved": "https://registry.npmjs.org/@img/sharp-linuxmusl-arm64/-/sharp-linuxmusl-arm64-0.34.2.tgz",
      "integrity": "sha512-NEE2vQ6wcxYav1/A22OOxoSOGiKnNmDzCYFOZ949xFmrWZOVII1Bp3NqVVpvj+3UeHMFyN5eP/V5hzViQ5CZNA==",
      "cpu": [
        "arm64"
      ],
      "license": "Apache-2.0",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": "^18.17.0 || ^20.3.0 || >=21.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/libvips"
      },
      "optionalDependencies": {
        "@img/sharp-libvips-linuxmusl-arm64": "1.1.0"
      }
    },
    "node_modules/@img/sharp-linuxmusl-x64": {
      "version": "0.34.2",
      "resolved": "https://registry.npmjs.org/@img/sharp-linuxmusl-x64/-/sharp-linuxmusl-x64-0.34.2.tgz",
      "integrity": "sha512-DOYMrDm5E6/8bm/yQLCWyuDJwUnlevR8xtF8bs+gjZ7cyUNYXiSf/E8Kp0Ss5xasIaXSHzb888V1BE4i1hFhAA==",
      "cpu": [
        "x64"
      ],
      "license": "Apache-2.0",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": "^18.17.0 || ^20.3.0 || >=21.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/libvips"
      },
      "optionalDependencies": {
        "@img/sharp-libvips-linuxmusl-x64": "1.1.0"
      }
    },
    "node_modules/@img/sharp-wasm32": {
      "version": "0.34.2",
      "resolved": "https://registry.npmjs.org/@img/sharp-wasm32/-/sharp-wasm32-0.34.2.tgz",
      "integrity": "sha512-/VI4mdlJ9zkaq53MbIG6rZY+QRN3MLbR6usYlgITEzi4Rpx5S6LFKsycOQjkOGmqTNmkIdLjEvooFKwww6OpdQ==",
      "cpu": [
        "wasm32"
      ],
      "license": "Apache-2.0 AND LGPL-3.0-or-later AND MIT",
      "optional": true,
      "dependencies": {
        "@emnapi/runtime": "^1.4.3"
      },
      "engines": {
        "node": "^18.17.0 || ^20.3.0 || >=21.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/libvips"
      }
    },
    "node_modules/@img/sharp-win32-arm64": {
      "version": "0.34.2",
      "resolved": "https://registry.npmjs.org/@img/sharp-win32-arm64/-/sharp-win32-arm64-0.34.2.tgz",
      "integrity": "sha512-cfP/r9FdS63VA5k0xiqaNaEoGxBg9k7uE+RQGzuK9fHt7jib4zAVVseR9LsE4gJcNWgT6APKMNnCcnyOtmSEUQ==",
      "cpu": [
        "arm64"
      ],
      "license": "Apache-2.0 AND LGPL-3.0-or-later",
      "optional": true,
      "os": [
        "win32"
      ],
      "engines": {
        "node": "^18.17.0 || ^20.3.0 || >=21.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/libvips"
      }
    },
    "node_modules/@img/sharp-win32-ia32": {
      "version": "0.34.2",
      "resolved": "https://registry.npmjs.org/@img/sharp-win32-ia32/-/sharp-win32-ia32-0.34.2.tgz",
      "integrity": "sha512-QLjGGvAbj0X/FXl8n1WbtQ6iVBpWU7JO94u/P2M4a8CFYsvQi4GW2mRy/JqkRx0qpBzaOdKJKw8uc930EX2AHw==",
      "cpu": [
        "ia32"
      ],
      "license": "Apache-2.0 AND LGPL-3.0-or-later",
      "optional": true,
      "os": [
        "win32"
      ],
      "engines": {
        "node": "^18.17.0 || ^20.3.0 || >=21.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/libvips"
      }
    },
    "node_modules/@img/sharp-win32-x64": {
      "version": "0.34.2",
      "resolved": "https://registry.npmjs.org/@img/sharp-win32-x64/-/sharp-win32-x64-0.34.2.tgz",
      "integrity": "sha512-aUdT6zEYtDKCaxkofmmJDJYGCf0+pJg3eU9/oBuqvEeoB9dKI6ZLc/1iLJCTuJQDO4ptntAlkUmHgGjyuobZbw==",
      "cpu": [
        "x64"
      ],
      "license": "Apache-2.0 AND LGPL-3.0-or-later",
      "optional": true,
      "os": [
        "win32"
      ],
      "engines": {
        "node": "^18.17.0 || ^20.3.0 || >=21.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/libvips"
      }
    },
    "node_modules/@jridgewell/gen-mapping": {
      "version": "0.3.8",
      "resolved": "https://registry.npmjs.org/@jridgewell/gen-mapping/-/gen-mapping-0.3.8.tgz",
      "integrity": "sha512-imAbBGkb+ebQyxKgzv5Hu2nmROxoDOXHh80evxdoXNOrvAnVx7zimzc1Oo5h9RlfV4vPXaE2iM5pOFbvOCClWA==",
      "license": "MIT",
      "dependencies": {
        "@jridgewell/set-array": "^1.2.1",
        "@jridgewell/sourcemap-codec": "^1.4.10",
        "@jridgewell/trace-mapping": "^0.3.24"
      },
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@jridgewell/resolve-uri": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/@jridgewell/resolve-uri/-/resolve-uri-3.1.2.tgz",
      "integrity": "sha512-bRISgCIjP20/tbWSPWMEi54QVPRZExkuD9lJL+UIxUKtwVJA8wW1Trb1jMs1RFXo1CBTNZ/5hpC9QvmKWdopKw==",
      "license": "MIT",
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@jridgewell/set-array": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/@jridgewell/set-array/-/set-array-1.2.1.tgz",
      "integrity": "sha512-R8gLRTZeyp03ymzP/6Lil/28tGeGEzhx1q2k703KGWRAI1VdvPIXdG70VJc2pAMw3NA6JKL5hhFu1sJX0Mnn/A==",
      "license": "MIT",
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@jridgewell/sourcemap-codec": {
      "version": "1.5.0",
      "resolved": "https://registry.npmjs.org/@jridgewell/sourcemap-codec/-/sourcemap-codec-1.5.0.tgz",
      "integrity": "sha512-gv3ZRaISU3fjPAgNsriBRqGWQL6quFx04YMPW/zD8XMLsU32mhCCbfbO6KZFLjvYpCZ8zyDEgqsgf+PwPaM7GQ==",
      "license": "MIT"
    },
    "node_modules/@jridgewell/trace-mapping": {
      "version": "0.3.25",
      "resolved": "https://registry.npmjs.org/@jridgewell/trace-mapping/-/trace-mapping-0.3.25.tgz",
      "integrity": "sha512-vNk6aEwybGtawWmy/PzwnGDOjCkLWSD2wqvjGGAgOAwCGWySYXfYoxt00IJkTF+8Lb57DwOb3Aa0o9CApepiYQ==",
      "license": "MIT",
      "dependencies": {
        "@jridgewell/resolve-uri": "^3.1.0",
        "@jridgewell/sourcemap-codec": "^1.4.14"
      }
    },
    "node_modules/@mui/core-downloads-tracker": {
      "version": "7.1.0",
      "resolved": "https://registry.npmjs.org/@mui/core-downloads-tracker/-/core-downloads-tracker-7.1.0.tgz",
      "integrity": "sha512-E0OqhZv548Qdc0PwWhLVA2zmjJZSTvaL4ZhoswmI8NJEC1tpW2js6LLP827jrW9MEiXYdz3QS6+hask83w74yQ==",
      "license": "MIT",
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/mui-org"
      }
    },
    "node_modules/@mui/icons-material": {
      "version": "7.1.0",
      "resolved": "https://registry.npmjs.org/@mui/icons-material/-/icons-material-7.1.0.tgz",
      "integrity": "sha512-1mUPMAZ+Qk3jfgL5ftRR06ATH/Esi0izHl1z56H+df6cwIlCWG66RXciUqeJCttbOXOQ5y2DCjLZI/4t3Yg3LA==",
      "license": "MIT",
      "dependencies": {
        "@babel/runtime": "^7.27.1"
      },
      "engines": {
        "node": ">=14.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/mui-org"
      },
      "peerDependencies": {
        "@mui/material": "^7.1.0",
        "@types/react": "^17.0.0 || ^18.0.0 || ^19.0.0",
        "react": "^17.0.0 || ^18.0.0 || ^19.0.0"
      },
      "peerDependenciesMeta": {
        "@types/react": {
          "optional": true
        }
      }
    },
    "node_modules/@mui/lab": {
      "version": "7.0.0-beta.12",
      "resolved": "https://registry.npmjs.org/@mui/lab/-/lab-7.0.0-beta.12.tgz",
      "integrity": "sha512-685MmzByCy3Vmb7xI6J8qOQm4l7yqfVTOLwxVmNV1EHBKuJiMuoX4/2vAAEGfNbDeEfWQsp7aBWanYpSWe1iRA==",
      "license": "MIT",
      "dependencies": {
        "@babel/runtime": "^7.27.1",
        "@mui/system": "^7.1.0",
        "@mui/types": "^7.4.2",
        "@mui/utils": "^7.1.0",
        "clsx": "^2.1.1",
        "prop-types": "^15.8.1"
      },
      "engines": {
        "node": ">=14.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/mui-org"
      },
      "peerDependencies": {
        "@emotion/react": "^11.5.0",
        "@emotion/styled": "^11.3.0",
        "@mui/material": "^7.1.0",
        "@mui/material-pigment-css": "^7.1.0",
        "@types/react": "^17.0.0 || ^18.0.0 || ^19.0.0",
        "react": "^17.0.0 || ^18.0.0 || ^19.0.0",
        "react-dom": "^17.0.0 || ^18.0.0 || ^19.0.0"
      },
      "peerDependenciesMeta": {
        "@emotion/react": {
          "optional": true
        },
        "@emotion/styled": {
          "optional": true
        },
        "@mui/material-pigment-css": {
          "optional": true
        },
        "@types/react": {
          "optional": true
        }
      }
    },
    "node_modules/@mui/material": {
      "version": "7.1.0",
      "resolved": "https://registry.npmjs.org/@mui/material/-/material-7.1.0.tgz",
      "integrity": "sha512-ahUJdrhEv+mCp4XHW+tHIEYzZMSRLg8z4AjUOsj44QpD1ZaMxQoVOG2xiHvLFdcsIPbgSRx1bg1eQSheHBgvtg==",
      "license": "MIT",
      "dependencies": {
        "@babel/runtime": "^7.27.1",
        "@mui/core-downloads-tracker": "^7.1.0",
        "@mui/system": "^7.1.0",
        "@mui/types": "^7.4.2",
        "@mui/utils": "^7.1.0",
        "@popperjs/core": "^2.11.8",
        "@types/react-transition-group": "^4.4.12",
        "clsx": "^2.1.1",
        "csstype": "^3.1.3",
        "prop-types": "^15.8.1",
        "react-is": "^19.1.0",
        "react-transition-group": "^4.4.5"
      },
      "engines": {
        "node": ">=14.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/mui-org"
      },
      "peerDependencies": {
        "@emotion/react": "^11.5.0",
        "@emotion/styled": "^11.3.0",
        "@mui/material-pigment-css": "^7.1.0",
        "@types/react": "^17.0.0 || ^18.0.0 || ^19.0.0",
        "react": "^17.0.0 || ^18.0.0 || ^19.0.0",
        "react-dom": "^17.0.0 || ^18.0.0 || ^19.0.0"
      },
      "peerDependenciesMeta": {
        "@emotion/react": {
          "optional": true
        },
        "@emotion/styled": {
          "optional": true
        },
        "@mui/material-pigment-css": {
          "optional": true
        },
        "@types/react": {
          "optional": true
        }
      }
    },
    "node_modules/@mui/private-theming": {
      "version": "7.1.0",
      "resolved": "https://registry.npmjs.org/@mui/private-theming/-/private-theming-7.1.0.tgz",
      "integrity": "sha512-4Kck4jxhqF6YxNwJdSae1WgDfXVg0lIH6JVJ7gtuFfuKcQCgomJxPvUEOySTFRPz1IZzwz5OAcToskRdffElDA==",
      "license": "MIT",
      "dependencies": {
        "@babel/runtime": "^7.27.1",
        "@mui/utils": "^7.1.0",
        "prop-types": "^15.8.1"
      },
      "engines": {
        "node": ">=14.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/mui-org"
      },
      "peerDependencies": {
        "@types/react": "^17.0.0 || ^18.0.0 || ^19.0.0",
        "react": "^17.0.0 || ^18.0.0 || ^19.0.0"
      },
      "peerDependenciesMeta": {
        "@types/react": {
          "optional": true
        }
      }
    },
    "node_modules/@mui/styled-engine": {
      "version": "7.1.0",
      "resolved": "https://registry.npmjs.org/@mui/styled-engine/-/styled-engine-7.1.0.tgz",
      "integrity": "sha512-m0mJ0c6iRC+f9hMeRe0W7zZX1wme3oUX0+XTVHjPG7DJz6OdQ6K/ggEOq7ZdwilcpdsDUwwMfOmvO71qDkYd2w==",
      "license": "MIT",
      "dependencies": {
        "@babel/runtime": "^7.27.1",
        "@emotion/cache": "^11.13.5",
        "@emotion/serialize": "^1.3.3",
        "@emotion/sheet": "^1.4.0",
        "csstype": "^3.1.3",
        "prop-types": "^15.8.1"
      },
      "engines": {
        "node": ">=14.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/mui-org"
      },
      "peerDependencies": {
        "@emotion/react": "^11.4.1",
        "@emotion/styled": "^11.3.0",
        "react": "^17.0.0 || ^18.0.0 || ^19.0.0"
      },
      "peerDependenciesMeta": {
        "@emotion/react": {
          "optional": true
        },
        "@emotion/styled": {
          "optional": true
        }
      }
    },
    "node_modules/@mui/system": {
      "version": "7.1.0",
      "resolved": "https://registry.npmjs.org/@mui/system/-/system-7.1.0.tgz",
      "integrity": "sha512-iedAWgRJMCxeMHvkEhsDlbvkK+qKf9me6ofsf7twk/jfT4P1ImVf7Rwb5VubEA0sikrVL+1SkoZM41M4+LNAVA==",
      "license": "MIT",
      "dependencies": {
        "@babel/runtime": "^7.27.1",
        "@mui/private-theming": "^7.1.0",
        "@mui/styled-engine": "^7.1.0",
        "@mui/types": "^7.4.2",
        "@mui/utils": "^7.1.0",
        "clsx": "^2.1.1",
        "csstype": "^3.1.3",
        "prop-types": "^15.8.1"
      },
      "engines": {
        "node": ">=14.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/mui-org"
      },
      "peerDependencies": {
        "@emotion/react": "^11.5.0",
        "@emotion/styled": "^11.3.0",
        "@types/react": "^17.0.0 || ^18.0.0 || ^19.0.0",
        "react": "^17.0.0 || ^18.0.0 || ^19.0.0"
      },
      "peerDependenciesMeta": {
        "@emotion/react": {
          "optional": true
        },
        "@emotion/styled": {
          "optional": true
        },
        "@types/react": {
          "optional": true
        }
      }
    },
    "node_modules/@mui/types": {
      "version": "7.4.2",
      "resolved": "https://registry.npmjs.org/@mui/types/-/types-7.4.2.tgz",
      "integrity": "sha512-edRc5JcLPsrlNFYyTPxds+d5oUovuUxnnDtpJUbP6WMeV4+6eaX/mqai1ZIWT62lCOe0nlrON0s9HDiv5en5bA==",
      "license": "MIT",
      "dependencies": {
        "@babel/runtime": "^7.27.1"
      },
      "peerDependencies": {
        "@types/react": "^17.0.0 || ^18.0.0 || ^19.0.0"
      },
      "peerDependenciesMeta": {
        "@types/react": {
          "optional": true
        }
      }
    },
    "node_modules/@mui/utils": {
      "version": "7.1.0",
      "resolved": "https://registry.npmjs.org/@mui/utils/-/utils-7.1.0.tgz",
      "integrity": "sha512-/OM3S8kSHHmWNOP+NH9xEtpYSG10upXeQ0wLZnfDgmgadTAk5F4MQfFLyZ5FCRJENB3eRzltMmaNl6UtDnPovw==",
      "license": "MIT",
      "dependencies": {
        "@babel/runtime": "^7.27.1",
        "@mui/types": "^7.4.2",
        "@types/prop-types": "^15.7.14",
        "clsx": "^2.1.1",
        "prop-types": "^15.8.1",
        "react-is": "^19.1.0"
      },
      "engines": {
        "node": ">=14.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/mui-org"
      },
      "peerDependencies": {
        "@types/react": "^17.0.0 || ^18.0.0 || ^19.0.0",
        "react": "^17.0.0 || ^18.0.0 || ^19.0.0"
      },
      "peerDependenciesMeta": {
        "@types/react": {
          "optional": true
        }
      }
    },
    "node_modules/@mui/x-date-pickers": {
      "version": "8.4.0",
      "resolved": "https://registry.npmjs.org/@mui/x-date-pickers/-/x-date-pickers-8.4.0.tgz",
      "integrity": "sha512-x7jI7JnKK25xL3yjD2Z1r86gAWtabKj9ogI2WDKd/v9WwE1VxmDD/NTiXprEZFo9psPOoqr+juPGDz5Cb2v7jw==",
      "license": "MIT",
      "dependencies": {
        "@babel/runtime": "^7.27.1",
        "@mui/utils": "^7.0.2",
        "@mui/x-internals": "8.4.0",
        "@types/react-transition-group": "^4.4.12",
        "clsx": "^2.1.1",
        "prop-types": "^15.8.1",
        "react-transition-group": "^4.4.5"
      },
      "engines": {
        "node": ">=14.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/mui-org"
      },
      "peerDependencies": {
        "@emotion/react": "^11.9.0",
        "@emotion/styled": "^11.8.1",
        "@mui/material": "^5.15.14 || ^6.0.0 || ^7.0.0",
        "@mui/system": "^5.15.14 || ^6.0.0 || ^7.0.0",
        "date-fns": "^2.25.0 || ^3.2.0 || ^4.0.0",
        "date-fns-jalali": "^2.13.0-0 || ^3.2.0-0 || ^4.0.0-0",
        "dayjs": "^1.10.7",
        "luxon": "^3.0.2",
        "moment": "^2.29.4",
        "moment-hijri": "^2.1.2 || ^3.0.0",
        "moment-jalaali": "^0.7.4 || ^0.8.0 || ^0.9.0 || ^0.10.0",
        "react": "^17.0.0 || ^18.0.0 || ^19.0.0",
        "react-dom": "^17.0.0 || ^18.0.0 || ^19.0.0"
      },
      "peerDependenciesMeta": {
        "@emotion/react": {
          "optional": true
        },
        "@emotion/styled": {
          "optional": true
        },
        "date-fns": {
          "optional": true
        },
        "date-fns-jalali": {
          "optional": true
        },
        "dayjs": {
          "optional": true
        },
        "luxon": {
          "optional": true
        },
        "moment": {
          "optional": true
        },
        "moment-hijri": {
          "optional": true
        },
        "moment-jalaali": {
          "optional": true
        }
      }
    },
    "node_modules/@mui/x-date-pickers-pro": {
      "version": "8.4.0",
      "resolved": "https://registry.npmjs.org/@mui/x-date-pickers-pro/-/x-date-pickers-pro-8.4.0.tgz",
      "integrity": "sha512-/PTrkeYMu7Dm3W83iUmRb5J98RK6WAKjUksILLTgYfBdzv9CAhHXF+eG3LocD6Xqv5UJP+7m19lRH9vCsk/JMA==",
      "license": "SEE LICENSE IN LICENSE",
      "dependencies": {
        "@babel/runtime": "^7.27.1",
        "@mui/utils": "^7.0.2",
        "@mui/x-date-pickers": "8.4.0",
        "@mui/x-internals": "8.4.0",
        "@mui/x-license": "8.4.0",
        "clsx": "^2.1.1",
        "prop-types": "^15.8.1",
        "react-transition-group": "^4.4.5"
      },
      "engines": {
        "node": ">=14.0.0"
      },
      "peerDependencies": {
        "@emotion/react": "^11.9.0",
        "@emotion/styled": "^11.8.1",
        "@mui/material": "^5.15.14 || ^6.0.0 || ^7.0.0",
        "@mui/system": "^5.15.14 || ^6.0.0 || ^7.0.0",
        "date-fns": "^2.25.0 || ^3.2.0 || ^4.0.0",
        "date-fns-jalali": "^2.13.0-0 || ^3.2.0-0 || ^4.0.0-0",
        "dayjs": "^1.10.7",
        "luxon": "^3.0.2",
        "moment": "^2.29.4",
        "moment-hijri": "^2.1.2 || ^3.0.0",
        "moment-jalaali": "^0.7.4 || ^0.8.0 || ^0.9.0 || ^0.10.0",
        "react": "^17.0.0 || ^18.0.0 || ^19.0.0",
        "react-dom": "^17.0.0 || ^18.0.0 || ^19.0.0"
      },
      "peerDependenciesMeta": {
        "@emotion/react": {
          "optional": true
        },
        "@emotion/styled": {
          "optional": true
        },
        "date-fns": {
          "optional": true
        },
        "date-fns-jalali": {
          "optional": true
        },
        "dayjs": {
          "optional": true
        },
        "luxon": {
          "optional": true
        },
        "moment": {
          "optional": true
        },
        "moment-hijri": {
          "optional": true
        },
        "moment-jalaali": {
          "optional": true
        }
      }
    },
    "node_modules/@mui/x-internals": {
      "version": "8.4.0",
      "resolved": "https://registry.npmjs.org/@mui/x-internals/-/x-internals-8.4.0.tgz",
      "integrity": "sha512-Z7FCahC4MLfTVzEwnKOB7P1fiR9DzFuMzHOPRNaMXc/rsS7unbtBKAG94yvsRzReCyjzZUVA7h37lnQ1DoPKJw==",
      "license": "MIT",
      "dependencies": {
        "@babel/runtime": "^7.27.1",
        "@mui/utils": "^7.0.2"
      },
      "engines": {
        "node": ">=14.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/mui-org"
      },
      "peerDependencies": {
        "react": "^17.0.0 || ^18.0.0 || ^19.0.0"
      }
    },
    "node_modules/@mui/x-license": {
      "version": "8.4.0",
      "resolved": "https://registry.npmjs.org/@mui/x-license/-/x-license-8.4.0.tgz",
      "integrity": "sha512-kISlcCZWmg8r7FtYDdrHudx3t+WcvXCAaSF21zaJSSgedOoAP5InYuOxOVoSAUoE1eKU28+Ef9aLWCL1V4Zalw==",
      "license": "SEE LICENSE IN LICENSE",
      "dependencies": {
        "@babel/runtime": "^7.27.1",
        "@mui/utils": "^7.0.2",
        "@mui/x-internals": "8.4.0",
        "@mui/x-telemetry": "8.4.0"
      },
      "engines": {
        "node": ">=14.0.0"
      },
      "peerDependencies": {
        "react": "^17.0.0 || ^18.0.0 || ^19.0.0"
      }
    },
    "node_modules/@mui/x-telemetry": {
      "version": "8.4.0",
      "resolved": "https://registry.npmjs.org/@mui/x-telemetry/-/x-telemetry-8.4.0.tgz",
      "integrity": "sha512-nyCkfq8iB55dFhbeIrR+qVbSEZdTa1t6uOZWzz+md2pTaV6vf4s5Lp9LZikl+LrdL+LXb1ixzU+/TTS3YELXrw==",
      "hasInstallScript": true,
      "license": "SEE LICENSE IN LICENSE",
      "dependencies": {
        "@babel/runtime": "^7.27.1",
        "@fingerprintjs/fingerprintjs": "^3.4.2",
        "@mui/utils": "^7.0.2",
        "ci-info": "^4.2.0",
        "conf": "^11.0.2",
        "is-docker": "^3.0.0",
        "node-machine-id": "^1.1.12"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@next/env": {
      "version": "15.3.2",
      "resolved": "https://registry.npmjs.org/@next/env/-/env-15.3.2.tgz",
      "integrity": "sha512-xURk++7P7qR9JG1jJtLzPzf0qEvqCN0A/T3DXf8IPMKo9/6FfjxtEffRJIIew/bIL4T3C2jLLqBor8B/zVlx6g==",
      "license": "MIT"
    },
    "node_modules/@next/swc-darwin-arm64": {
      "version": "15.3.2",
      "resolved": "https://registry.npmjs.org/@next/swc-darwin-arm64/-/swc-darwin-arm64-15.3.2.tgz",
      "integrity": "sha512-2DR6kY/OGcokbnCsjHpNeQblqCZ85/1j6njYSkzRdpLn5At7OkSdmk7WyAmB9G0k25+VgqVZ/u356OSoQZ3z0g==",
      "cpu": [
        "arm64"
      ],
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ],
      "engines": {
        "node": ">= 10"
      }
    },
    "node_modules/@next/swc-darwin-x64": {
      "version": "15.3.2",
      "resolved": "https://registry.npmjs.org/@next/swc-darwin-x64/-/swc-darwin-x64-15.3.2.tgz",
      "integrity": "sha512-ro/fdqaZWL6k1S/5CLv1I0DaZfDVJkWNaUU3un8Lg6m0YENWlDulmIWzV96Iou2wEYyEsZq51mwV8+XQXqMp3w==",
      "cpu": [
        "x64"
      ],
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ],
      "engines": {
        "node": ">= 10"
      }
    },
    "node_modules/@next/swc-linux-arm64-gnu": {
      "version": "15.3.2",
      "resolved": "https://registry.npmjs.org/@next/swc-linux-arm64-gnu/-/swc-linux-arm64-gnu-15.3.2.tgz",
      "integrity": "sha512-covwwtZYhlbRWK2HlYX9835qXum4xYZ3E2Mra1mdQ+0ICGoMiw1+nVAn4d9Bo7R3JqSmK1grMq/va+0cdh7bJA==",
      "cpu": [
        "arm64"
      ],
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">= 10"
      }
    },
    "node_modules/@next/swc-linux-arm64-musl": {
      "version": "15.3.2",
      "resolved": "https://registry.npmjs.org/@next/swc-linux-arm64-musl/-/swc-linux-arm64-musl-15.3.2.tgz",
      "integrity": "sha512-KQkMEillvlW5Qk5mtGA/3Yz0/tzpNlSw6/3/ttsV1lNtMuOHcGii3zVeXZyi4EJmmLDKYcTcByV2wVsOhDt/zg==",
      "cpu": [
        "arm64"
      ],
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">= 10"
      }
    },
    "node_modules/@next/swc-linux-x64-gnu": {
      "version": "15.3.2",
      "resolved": "https://registry.npmjs.org/@next/swc-linux-x64-gnu/-/swc-linux-x64-gnu-15.3.2.tgz",
      "integrity": "sha512-uRBo6THWei0chz+Y5j37qzx+BtoDRFIkDzZjlpCItBRXyMPIg079eIkOCl3aqr2tkxL4HFyJ4GHDes7W8HuAUg==",
      "cpu": [
        "x64"
      ],
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">= 10"
      }
    },
    "node_modules/@next/swc-linux-x64-musl": {
      "version": "15.3.2",
      "resolved": "https://registry.npmjs.org/@next/swc-linux-x64-musl/-/swc-linux-x64-musl-15.3.2.tgz",
      "integrity": "sha512-+uxFlPuCNx/T9PdMClOqeE8USKzj8tVz37KflT3Kdbx/LOlZBRI2yxuIcmx1mPNK8DwSOMNCr4ureSet7eyC0w==",
      "cpu": [
        "x64"
      ],
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">= 10"
      }
    },
    "node_modules/@next/swc-win32-arm64-msvc": {
      "version": "15.3.2",
      "resolved": "https://registry.npmjs.org/@next/swc-win32-arm64-msvc/-/swc-win32-arm64-msvc-15.3.2.tgz",
      "integrity": "sha512-LLTKmaI5cfD8dVzh5Vt7+OMo+AIOClEdIU/TSKbXXT2iScUTSxOGoBhfuv+FU8R9MLmrkIL1e2fBMkEEjYAtPQ==",
      "cpu": [
        "arm64"
      ],
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ],
      "engines": {
        "node": ">= 10"
      }
    },
    "node_modules/@next/swc-win32-x64-msvc": {
      "version": "15.3.2",
      "resolved": "https://registry.npmjs.org/@next/swc-win32-x64-msvc/-/swc-win32-x64-msvc-15.3.2.tgz",
      "integrity": "sha512-aW5B8wOPioJ4mBdMDXkt5f3j8pUr9W8AnlX0Df35uRWNT1Y6RIybxjnSUe+PhM+M1bwgyY8PHLmXZC6zT1o5tA==",
      "cpu": [
        "x64"
      ],
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ],
      "engines": {
        "node": ">= 10"
      }
    },
    "node_modules/@npmcli/fs": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/@npmcli/fs/-/fs-1.1.1.tgz",
      "integrity": "sha512-8KG5RD0GVP4ydEzRn/I4BNDuxDtqVbOdm8675T49OIG/NGhaK0pjPX7ZcDlvKYbA+ulvVK3ztfcF4uBdOxuJbQ==",
      "license": "ISC",
      "optional": true,
      "dependencies": {
        "@gar/promisify": "^1.0.1",
        "semver": "^7.3.5"
      }
    },
    "node_modules/@npmcli/move-file": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/@npmcli/move-file/-/move-file-1.1.2.tgz",
      "integrity": "sha512-1SUf/Cg2GzGDyaf15aR9St9TWlb+XvbZXWpDx8YKs7MLzMH/BCeopv+y9vzrzgkfykCGuWOlSu3mZhj2+FQcrg==",
      "deprecated": "This functionality has been moved to @npmcli/fs",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "mkdirp": "^1.0.4",
        "rimraf": "^3.0.2"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/@panva/hkdf": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/@panva/hkdf/-/hkdf-1.2.1.tgz",
      "integrity": "sha512-6oclG6Y3PiDFcoyk8srjLfVKyMfVCKJ27JwNPViuXziFpmdz+MZnZN/aKY0JGXgYuO/VghU0jcOAZgWXZ1Dmrw==",
      "license": "MIT",
      "funding": {
        "url": "https://github.com/sponsors/panva"
      }
    },
    "node_modules/@popperjs/core": {
      "version": "2.11.8",
      "resolved": "https://registry.npmjs.org/@popperjs/core/-/core-2.11.8.tgz",
      "integrity": "sha512-P1st0aksCrn9sGZhp8GMYwBnQsbvAWsZAX44oXNNvLHGqAOcoVxmjZiohstwQ7SqKnbR47akdNi+uleWD8+g6A==",
      "license": "MIT",
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/popperjs"
      }
    },
    "node_modules/@prisma/client": {
      "version": "6.8.2",
      "resolved": "https://registry.npmjs.org/@prisma/client/-/client-6.8.2.tgz",
      "integrity": "sha512-5II+vbyzv4si6Yunwgkj0qT/iY0zyspttoDrL3R4BYgLdp42/d2C8xdi9vqkrYtKt9H32oFIukvyw3Koz5JoDg==",
      "hasInstallScript": true,
      "license": "Apache-2.0",
      "peer": true,
      "engines": {
        "node": ">=18.18"
      },
      "peerDependencies": {
        "prisma": "*",
        "typescript": ">=5.1.0"
      },
      "peerDependenciesMeta": {
        "prisma": {
          "optional": true
        },
        "typescript": {
          "optional": true
        }
      }
    },
    "node_modules/@prisma/config": {
      "version": "6.8.2",
      "resolved": "https://registry.npmjs.org/@prisma/config/-/config-6.8.2.tgz",
      "integrity": "sha512-ZJY1fF4qRBPdLQ/60wxNtX+eu89c3AkYEcP7L3jkp0IPXCNphCYxikTg55kPJLDOG6P0X+QG5tCv6CmsBRZWFQ==",
      "license": "Apache-2.0",
      "dependencies": {
        "jiti": "2.4.2"
      }
    },
    "node_modules/@prisma/debug": {
      "version": "6.8.2",
      "resolved": "https://registry.npmjs.org/@prisma/debug/-/debug-6.8.2.tgz",
      "integrity": "sha512-4muBSSUwJJ9BYth5N8tqts8JtiLT8QI/RSAzEogwEfpbYGFo9mYsInsVo8dqXdPO2+Rm5OG5q0qWDDE3nyUbVg==",
      "license": "Apache-2.0"
    },
    "node_modules/@prisma/engines": {
      "version": "6.8.2",
      "resolved": "https://registry.npmjs.org/@prisma/engines/-/engines-6.8.2.tgz",
      "integrity": "sha512-XqAJ//LXjqYRQ1RRabs79KOY4+v6gZOGzbcwDQl0D6n9WBKjV7qdrbd042CwSK0v0lM9MSHsbcFnU2Yn7z8Zlw==",
      "hasInstallScript": true,
      "license": "Apache-2.0",
      "dependencies": {
        "@prisma/debug": "6.8.2",
        "@prisma/engines-version": "6.8.0-43.2060c79ba17c6bb9f5823312b6f6b7f4a845738e",
        "@prisma/fetch-engine": "6.8.2",
        "@prisma/get-platform": "6.8.2"
      }
    },
    "node_modules/@prisma/engines-version": {
      "version": "6.8.0-43.2060c79ba17c6bb9f5823312b6f6b7f4a845738e",
      "resolved": "https://registry.npmjs.org/@prisma/engines-version/-/engines-version-6.8.0-43.2060c79ba17c6bb9f5823312b6f6b7f4a845738e.tgz",
      "integrity": "sha512-Rkik9lMyHpFNGaLpPF3H5q5TQTkm/aE7DsGM5m92FZTvWQsvmi6Va8On3pWvqLHOt5aPUvFb/FeZTmphI4CPiQ==",
      "license": "Apache-2.0"
    },
    "node_modules/@prisma/fetch-engine": {
      "version": "6.8.2",
      "resolved": "https://registry.npmjs.org/@prisma/fetch-engine/-/fetch-engine-6.8.2.tgz",
      "integrity": "sha512-lCvikWOgaLOfqXGacEKSNeenvj0n3qR5QvZUOmPE2e1Eh8cMYSobxonCg9rqM6FSdTfbpqp9xwhSAOYfNqSW0g==",
      "license": "Apache-2.0",
      "dependencies": {
        "@prisma/debug": "6.8.2",
        "@prisma/engines-version": "6.8.0-43.2060c79ba17c6bb9f5823312b6f6b7f4a845738e",
        "@prisma/get-platform": "6.8.2"
      }
    },
    "node_modules/@prisma/get-platform": {
      "version": "6.8.2",
      "resolved": "https://registry.npmjs.org/@prisma/get-platform/-/get-platform-6.8.2.tgz",
      "integrity": "sha512-vXSxyUgX3vm1Q70QwzwkjeYfRryIvKno1SXbIqwSptKwqKzskINnDUcx85oX+ys6ooN2ATGSD0xN2UTfg6Zcow==",
      "license": "Apache-2.0",
      "dependencies": {
        "@prisma/debug": "6.8.2"
      }
    },
    "node_modules/@schummar/icu-type-parser": {
      "version": "1.21.5",
      "resolved": "https://registry.npmjs.org/@schummar/icu-type-parser/-/icu-type-parser-1.21.5.tgz",
      "integrity": "sha512-bXHSaW5jRTmke9Vd0h5P7BtWZG9Znqb8gSDxZnxaGSJnGwPLDPfS+3g0BKzeWqzgZPsIVZkM7m2tbo18cm5HBw==",
      "license": "MIT"
    },
    "node_modules/@swc/counter": {
      "version": "0.1.3",
      "resolved": "https://registry.npmjs.org/@swc/counter/-/counter-0.1.3.tgz",
      "integrity": "sha512-e2BR4lsJkkRlKZ/qCHPw9ZaSxc0MVUd7gtbtaB7aMvHeJVYe8sOB8DBZkP2DtISHGSku9sCK6T6cnY0CtXrOCQ==",
      "license": "Apache-2.0"
    },
    "node_modules/@swc/helpers": {
      "version": "0.5.15",
      "resolved": "https://registry.npmjs.org/@swc/helpers/-/helpers-0.5.15.tgz",
      "integrity": "sha512-JQ5TuMi45Owi4/BIMAJBoSQoOJu12oOk/gADqlcUL9JEdHB8vyjUSsxqeNXnmXHjYKMi2WcYtezGEEhqUI/E2g==",
      "license": "Apache-2.0",
      "dependencies": {
        "tslib": "^2.8.0"
      }
    },
    "node_modules/@tootallnate/once": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/@tootallnate/once/-/once-1.1.2.tgz",
      "integrity": "sha512-RbzJvlNzmRq5c3O09UipeuXno4tA1FE6ikOjxZK0tuxVv3412l64l5t1W5pj4+rJq9vpkm/kwiR07aZXnsKPxw==",
      "license": "MIT",
      "optional": true,
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/@types/cookie": {
      "version": "0.6.0",
      "resolved": "https://registry.npmjs.org/@types/cookie/-/cookie-0.6.0.tgz",
      "integrity": "sha512-4Kh9a6B2bQciAhf7FSuMRRkUWecJgJu9nPnx3yzpsfXX/c50REIqpHY4C82bXP90qrLtXtkDxTZosYO3UpOwlA==",
      "license": "MIT",
      "optional": true,
      "peer": true
    },
    "node_modules/@types/d3-array": {
      "version": "3.2.1",
      "resolved": "https://registry.npmjs.org/@types/d3-array/-/d3-array-3.2.1.tgz",
      "integrity": "sha512-Y2Jn2idRrLzUfAKV2LyRImR+y4oa2AntrgID95SHJxuMUrkNXmanDSed71sRNZysveJVt1hLLemQZIady0FpEg==",
      "license": "MIT"
    },
    "node_modules/@types/d3-color": {
      "version": "3.1.3",
      "resolved": "https://registry.npmjs.org/@types/d3-color/-/d3-color-3.1.3.tgz",
      "integrity": "sha512-iO90scth9WAbmgv7ogoq57O9YpKmFBbmoEoCHDB2xMBY0+/KVrqAaCDyCE16dUspeOvIxFFRI+0sEtqDqy2b4A==",
      "license": "MIT"
    },
    "node_modules/@types/d3-ease": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/@types/d3-ease/-/d3-ease-3.0.2.tgz",
      "integrity": "sha512-NcV1JjO5oDzoK26oMzbILE6HW7uVXOHLQvHshBUW4UMdZGfiY6v5BeQwh9a9tCzv+CeefZQHJt5SRgK154RtiA==",
      "license": "MIT"
    },
    "node_modules/@types/d3-interpolate": {
      "version": "3.0.4",
      "resolved": "https://registry.npmjs.org/@types/d3-interpolate/-/d3-interpolate-3.0.4.tgz",
      "integrity": "sha512-mgLPETlrpVV1YRJIglr4Ez47g7Yxjl1lj7YKsiMCb27VJH9W8NVM6Bb9d8kkpG/uAQS5AmbA48q2IAolKKo1MA==",
      "license": "MIT",
      "dependencies": {
        "@types/d3-color": "*"
      }
    },
    "node_modules/@types/d3-path": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/@types/d3-path/-/d3-path-3.1.1.tgz",
      "integrity": "sha512-VMZBYyQvbGmWyWVea0EHs/BwLgxc+MKi1zLDCONksozI4YJMcTt8ZEuIR4Sb1MMTE8MMW49v0IwI5+b7RmfWlg==",
      "license": "MIT"
    },
    "node_modules/@types/d3-scale": {
      "version": "4.0.9",
      "resolved": "https://registry.npmjs.org/@types/d3-scale/-/d3-scale-4.0.9.tgz",
      "integrity": "sha512-dLmtwB8zkAeO/juAMfnV+sItKjlsw2lKdZVVy6LRr0cBmegxSABiLEpGVmSJJ8O08i4+sGR6qQtb6WtuwJdvVw==",
      "license": "MIT",
      "dependencies": {
        "@types/d3-time": "*"
      }
    },
    "node_modules/@types/d3-shape": {
      "version": "3.1.7",
      "resolved": "https://registry.npmjs.org/@types/d3-shape/-/d3-shape-3.1.7.tgz",
      "integrity": "sha512-VLvUQ33C+3J+8p+Daf+nYSOsjB4GXp19/S/aGo60m9h1v6XaxjiT82lKVWJCfzhtuZ3yD7i/TPeC/fuKLLOSmg==",
      "license": "MIT",
      "dependencies": {
        "@types/d3-path": "*"
      }
    },
    "node_modules/@types/d3-time": {
      "version": "3.0.4",
      "resolved": "https://registry.npmjs.org/@types/d3-time/-/d3-time-3.0.4.tgz",
      "integrity": "sha512-yuzZug1nkAAaBlBBikKZTgzCeA+k1uy4ZFwWANOfKw5z5LRhV0gNA7gNkKm7HoK+HRN0wX3EkxGk0fpbWhmB7g==",
      "license": "MIT"
    },
    "node_modules/@types/d3-timer": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/@types/d3-timer/-/d3-timer-3.0.2.tgz",
      "integrity": "sha512-Ps3T8E8dZDam6fUyNiMkekK3XUsaUEik+idO9/YjPtfj2qruF8tFBXS7XhtE4iIXBLxhmLjP3SXpLhVf21I9Lw==",
      "license": "MIT"
    },
    "node_modules/@types/node": {
      "version": "20.17.50",
      "resolved": "https://registry.npmjs.org/@types/node/-/node-20.17.50.tgz",
      "integrity": "sha512-Mxiq0ULv/zo1OzOhwPqOA13I81CV/W3nvd3ChtQZRT5Cwz3cr0FKo/wMSsbTqL3EXpaBAEQhva2B8ByRkOIh9A==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "undici-types": "~6.19.2"
      }
    },
    "node_modules/@types/parse-json": {
      "version": "4.0.2",
      "resolved": "https://registry.npmjs.org/@types/parse-json/-/parse-json-4.0.2.tgz",
      "integrity": "sha512-dISoDXWWQwUquiKsyZ4Ng+HX2KsPL7LyHKHQwgGFEA3IaKac4Obd+h2a/a6waisAoepJlBcx9paWqjA8/HVjCw==",
      "license": "MIT"
    },
    "node_modules/@types/prop-types": {
      "version": "15.7.14",
      "resolved": "https://registry.npmjs.org/@types/prop-types/-/prop-types-15.7.14.tgz",
      "integrity": "sha512-gNMvNH49DJ7OJYv+KAKn0Xp45p8PLl6zo2YnvDIbTd4J6MER2BmWN49TG7n9LvkyihINxeKW8+3bfS2yDC9dzQ==",
      "license": "MIT"
    },
    "node_modules/@types/react": {
      "version": "19.1.5",
      "resolved": "https://registry.npmjs.org/@types/react/-/react-19.1.5.tgz",
      "integrity": "sha512-piErsCVVbpMMT2r7wbawdZsq4xMvIAhQuac2gedQHysu1TZYEigE6pnFfgZT+/jQnrRuF5r+SHzuehFjfRjr4g==",
      "license": "MIT",
      "dependencies": {
        "csstype": "^3.0.2"
      }
    },
    "node_modules/@types/react-dom": {
      "version": "19.1.5",
      "resolved": "https://registry.npmjs.org/@types/react-dom/-/react-dom-19.1.5.tgz",
      "integrity": "sha512-CMCjrWucUBZvohgZxkjd6S9h0nZxXjzus6yDfUb+xLxYM7VvjKNH1tQrE9GWLql1XoOP4/Ds3bwFqShHUYraGg==",
      "dev": true,
      "license": "MIT",
      "peerDependencies": {
        "@types/react": "^19.0.0"
      }
    },
    "node_modules/@types/react-transition-group": {
      "version": "4.4.12",
      "resolved": "https://registry.npmjs.org/@types/react-transition-group/-/react-transition-group-4.4.12.tgz",
      "integrity": "sha512-8TV6R3h2j7a91c+1DXdJi3Syo69zzIZbz7Lg5tORM5LEJG7X/E6a1V3drRyBRZq7/utz7A+c4OgYLiLcYGHG6w==",
      "license": "MIT",
      "peerDependencies": {
        "@types/react": "*"
      }
    },
    "node_modules/abbrev": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/abbrev/-/abbrev-1.1.1.tgz",
      "integrity": "sha512-nne9/IiQ/hzIhY6pdDnbBtz7DjPTKrY00P/zvPSm5pOFkl6xuGrGnXn/VtTNNfNtAfZ9/1RtehkszU9qcTii0Q==",
      "license": "ISC",
      "optional": true
    },
    "node_modules/agent-base": {
      "version": "6.0.2",
      "resolved": "https://registry.npmjs.org/agent-base/-/agent-base-6.0.2.tgz",
      "integrity": "sha512-RZNwNclF7+MS/8bDg70amg32dyeZGZxiDuQmZxKLAlQjr3jGyLx+4Kkk58UO7D2QdgFIQCovuSuZESne6RG6XQ==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "debug": "4"
      },
      "engines": {
        "node": ">= 6.0.0"
      }
    },
    "node_modules/agentkeepalive": {
      "version": "4.6.0",
      "resolved": "https://registry.npmjs.org/agentkeepalive/-/agentkeepalive-4.6.0.tgz",
      "integrity": "sha512-kja8j7PjmncONqaTsB8fQ+wE2mSU2DJ9D4XKoJ5PFWIdRMa6SLSN1ff4mOr4jCbfRSsxR4keIiySJU0N9T5hIQ==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "humanize-ms": "^1.2.1"
      },
      "engines": {
        "node": ">= 8.0.0"
      }
    },
    "node_modules/aggregate-error": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/aggregate-error/-/aggregate-error-3.1.0.tgz",
      "integrity": "sha512-4I7Td01quW/RpocfNayFdFVk1qSuoh0E7JrbRJ16nH01HhKFQ88INq9Sd+nd72zqRySlr9BmDA8xlEJ6vJMrYA==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "clean-stack": "^2.0.0",
        "indent-string": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/ajv": {
      "version": "8.17.1",
      "resolved": "https://registry.npmjs.org/ajv/-/ajv-8.17.1.tgz",
      "integrity": "sha512-B/gBuNg5SiMTrPkC+A2+cW0RszwxYmn6VYxB/inlBStS5nx6xHIt/ehKRhIMhqusl7a8LjQoZnjCs5vhwxOQ1g==",
      "license": "MIT",
      "dependencies": {
        "fast-deep-equal": "^3.1.3",
        "fast-uri": "^3.0.1",
        "json-schema-traverse": "^1.0.0",
        "require-from-string": "^2.0.2"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/epoberezkin"
      }
    },
    "node_modules/ajv-formats": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/ajv-formats/-/ajv-formats-2.1.1.tgz",
      "integrity": "sha512-Wx0Kx52hxE7C18hkMEggYlEifqWZtYaRgouJor+WMdPnQyEK13vgEWyVNup7SoeeoLMsr4kf5h6dOW11I15MUA==",
      "license": "MIT",
      "dependencies": {
        "ajv": "^8.0.0"
      },
      "peerDependencies": {
        "ajv": "^8.0.0"
      },
      "peerDependenciesMeta": {
        "ajv": {
          "optional": true
        }
      }
    },
    "node_modules/ansi-regex": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-5.0.1.tgz",
      "integrity": "sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ==",
      "license": "MIT",
      "optional": true,
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/aproba": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/aproba/-/aproba-2.0.0.tgz",
      "integrity": "sha512-lYe4Gx7QT+MKGbDsA+Z+he/Wtef0BiwDOlK/XkBrdfsh9J/jPPXbX0tE9x9cl27Tmu5gg3QUbUrQYa/y+KOHPQ==",
      "license": "ISC",
      "optional": true
    },
    "node_modules/are-we-there-yet": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/are-we-there-yet/-/are-we-there-yet-3.0.1.tgz",
      "integrity": "sha512-QZW4EDmGwlYur0Yyf/b2uGucHQMa8aFUP7eu9ddR73vvhFyt4V0Vl3QHPcTNJ8l6qYOBdxgXdnBXQrHilfRQBg==",
      "deprecated": "This package is no longer supported.",
      "license": "ISC",
      "optional": true,
      "dependencies": {
        "delegates": "^1.0.0",
        "readable-stream": "^3.6.0"
      },
      "engines": {
        "node": "^12.13.0 || ^14.15.0 || >=16.0.0"
      }
    },
    "node_modules/atomically": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/atomically/-/atomically-2.0.3.tgz",
      "integrity": "sha512-kU6FmrwZ3Lx7/7y3hPS5QnbJfaohcIul5fGqf7ok+4KklIEk9tJ0C2IQPdacSbVUWv6zVHXEBWoWd6NrVMT7Cw==",
      "dependencies": {
        "stubborn-fs": "^1.2.5",
        "when-exit": "^2.1.1"
      }
    },
    "node_modules/babel-plugin-macros": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/babel-plugin-macros/-/babel-plugin-macros-3.1.0.tgz",
      "integrity": "sha512-Cg7TFGpIr01vOQNODXOOaGz2NpCU5gl8x1qJFbb6hbZxR7XrcE2vtbAsTAbJ7/xwJtUuJEw8K8Zr/AE0LHlesg==",
      "license": "MIT",
      "dependencies": {
        "@babel/runtime": "^7.12.5",
        "cosmiconfig": "^7.0.0",
        "resolve": "^1.19.0"
      },
      "engines": {
        "node": ">=10",
        "npm": ">=6"
      }
    },
    "node_modules/balanced-match": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/balanced-match/-/balanced-match-1.0.2.tgz",
      "integrity": "sha512-3oSeUO0TMV67hN1AmbXsK4yaqU7tjiHlbxRDZOpH0KW9+CeX4bRAaX0Anxt0tx2MrpRpWwQaPwIlISEJhYU5Pw==",
      "license": "MIT",
      "optional": true
    },
    "node_modules/base64-js": {
      "version": "1.5.1",
      "resolved": "https://registry.npmjs.org/base64-js/-/base64-js-1.5.1.tgz",
      "integrity": "sha512-AKpaYlHn8t4SVbOHCy+b5+KKgvR4vrsD8vbvrbiQJps7fKDTkjkDry6ji0rUJjC0kzbNePLwzxq8iypo41qeWA==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ],
      "license": "MIT"
    },
    "node_modules/bindings": {
      "version": "1.5.0",
      "resolved": "https://registry.npmjs.org/bindings/-/bindings-1.5.0.tgz",
      "integrity": "sha512-p2q/t/mhvuOj/UeLlV6566GD/guowlr0hHxClI0W9m7MWYkL1F0hLo+0Aexs9HSPCtR1SXQ0TD3MMKrXZajbiQ==",
      "license": "MIT",
      "dependencies": {
        "file-uri-to-path": "1.0.0"
      }
    },
    "node_modules/bl": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/bl/-/bl-4.1.0.tgz",
      "integrity": "sha512-1W07cM9gS6DcLperZfFSj+bWLtaPGSOHWhPiGzXmvVJbRLdG82sH/Kn8EtW1VqWVA54AKf2h5k5BbnIbwF3h6w==",
      "license": "MIT",
      "dependencies": {
        "buffer": "^5.5.0",
        "inherits": "^2.0.4",
        "readable-stream": "^3.4.0"
      }
    },
    "node_modules/brace-expansion": {
      "version": "1.1.11",
      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.11.tgz",
      "integrity": "sha512-iCuPHDFgrHX7H2vEI/5xpz07zSHB00TpugqhmYtVmMO6518mCuRMoOYFldEBl0g187ufozdaHgWKcYFb61qGiA==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "balanced-match": "^1.0.0",
        "concat-map": "0.0.1"
      }
    },
    "node_modules/buffer": {
      "version": "5.7.1",
      "resolved": "https://registry.npmjs.org/buffer/-/buffer-5.7.1.tgz",
      "integrity": "sha512-EHcyIPBQ4BSGlvjB16k5KgAJ27CIsHY/2JBmCRReo48y9rQ3MaUzWX3KVlBa4U7MyX02HdVj0K7C3WaB3ju7FQ==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "base64-js": "^1.3.1",
        "ieee754": "^1.1.13"
      }
    },
    "node_modules/busboy": {
      "version": "1.6.0",
      "resolved": "https://registry.npmjs.org/busboy/-/busboy-1.6.0.tgz",
      "integrity": "sha512-8SFQbg/0hQ9xy3UNTB0YEnsNBbWfhf7RtnzpL7TkBiTBRfrQ9Fxcnz7VJsleJpyp6rVLvXiuORqjlHi5q+PYuA==",
      "dependencies": {
        "streamsearch": "^1.1.0"
      },
      "engines": {
        "node": ">=10.16.0"
      }
    },
    "node_modules/cacache": {
      "version": "15.3.0",
      "resolved": "https://registry.npmjs.org/cacache/-/cacache-15.3.0.tgz",
      "integrity": "sha512-VVdYzXEn+cnbXpFgWs5hTT7OScegHVmLhJIR8Ufqk3iFD6A6j5iSX1KuBTfNEv4tdJWE2PzA6IVFtcLC7fN9wQ==",
      "license": "ISC",
      "optional": true,
      "dependencies": {
        "@npmcli/fs": "^1.0.0",
        "@npmcli/move-file": "^1.0.1",
        "chownr": "^2.0.0",
        "fs-minipass": "^2.0.0",
        "glob": "^7.1.4",
        "infer-owner": "^1.0.4",
        "lru-cache": "^6.0.0",
        "minipass": "^3.1.1",
        "minipass-collect": "^1.0.2",
        "minipass-flush": "^1.0.5",
        "minipass-pipeline": "^1.2.2",
        "mkdirp": "^1.0.3",
        "p-map": "^4.0.0",
        "promise-inflight": "^1.0.1",
        "rimraf": "^3.0.2",
        "ssri": "^8.0.1",
        "tar": "^6.0.2",
        "unique-filename": "^1.1.1"
      },
      "engines": {
        "node": ">= 10"
      }
    },
    "node_modules/callsites": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/callsites/-/callsites-3.1.0.tgz",
      "integrity": "sha512-P8BjAsXvZS+VIDUI11hHCQEv74YT67YUi5JJFNWIqL235sBmjX4+qx9Muvls5ivyNENctx46xQLQ3aTuE7ssaQ==",
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/caniuse-lite": {
      "version": "1.0.30001718",
      "resolved": "https://registry.npmjs.org/caniuse-lite/-/caniuse-lite-1.0.30001718.tgz",
      "integrity": "sha512-AflseV1ahcSunK53NfEs9gFWgOEmzr0f+kaMFA4xiLZlr9Hzt7HxcSpIFcnNCUkz6R6dWKa54rUz3HUmI3nVcw==",
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/browserslist"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/caniuse-lite"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "CC-BY-4.0"
    },
    "node_modules/chownr": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/chownr/-/chownr-2.0.0.tgz",
      "integrity": "sha512-bIomtDF5KGpdogkLd9VspvFzk9KfpyyGlS8YFVZl7TGPBHL5snIOnxeshwVgPteQ9b4Eydl+pVbIyE1DcvCWgQ==",
      "license": "ISC",
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/ci-info": {
      "version": "4.2.0",
      "resolved": "https://registry.npmjs.org/ci-info/-/ci-info-4.2.0.tgz",
      "integrity": "sha512-cYY9mypksY8NRqgDB1XD1RiJL338v/551niynFTGkZOO2LHuB2OmOYxDIe/ttN9AHwrqdum1360G3ald0W9kCg==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/sibiraj-s"
        }
      ],
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/clean-stack": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/clean-stack/-/clean-stack-2.2.0.tgz",
      "integrity": "sha512-4diC9HaTE+KRAMWhDhrGOECgWZxoevMc5TlkObMqNSsVU62PYzXZ/SMTjzyGAFF1YusgxGcSWTEXBhp0CPwQ1A==",
      "license": "MIT",
      "optional": true,
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/client-only": {
      "version": "0.0.1",
      "resolved": "https://registry.npmjs.org/client-only/-/client-only-0.0.1.tgz",
      "integrity": "sha512-IV3Ou0jSMzZrd3pZ48nLkT9DA7Ag1pnPzaiQhpW7c3RbcqqzvzzVu+L8gfqMp/8IM2MQtSiqaCxrrcfu8I8rMA==",
      "license": "MIT"
    },
    "node_modules/clsx": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/clsx/-/clsx-2.1.1.tgz",
      "integrity": "sha512-eYm0QWBtUrBWZWG0d386OGAw16Z995PiOVo2B7bjWSbHedGl5e0ZWaq65kOGgUSNesEIDkB9ISbTg/JK9dhCZA==",
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/color": {
      "version": "4.2.3",
      "resolved": "https://registry.npmjs.org/color/-/color-4.2.3.tgz",
      "integrity": "sha512-1rXeuUUiGGrykh+CeBdu5Ie7OJwinCgQY0bc7GCRxy5xVHy+moaqkpL/jqQq0MtQOeYcrqEz4abc5f0KtU7W4A==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "color-convert": "^2.0.1",
        "color-string": "^1.9.0"
      },
      "engines": {
        "node": ">=12.5.0"
      }
    },
    "node_modules/color-convert": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
      "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "color-name": "~1.1.4"
      },
      "engines": {
        "node": ">=7.0.0"
      }
    },
    "node_modules/color-name": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
      "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==",
      "license": "MIT",
      "optional": true
    },
    "node_modules/color-string": {
      "version": "1.9.1",
      "resolved": "https://registry.npmjs.org/color-string/-/color-string-1.9.1.tgz",
      "integrity": "sha512-shrVawQFojnZv6xM40anx4CkoDP+fZsw/ZerEMsW/pyzsRbElpsL/DBVW7q3ExxwusdNXI3lXpuhEZkzs8p5Eg==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "color-name": "^1.0.0",
        "simple-swizzle": "^0.2.2"
      }
    },
    "node_modules/color-support": {
      "version": "1.1.3",
      "resolved": "https://registry.npmjs.org/color-support/-/color-support-1.1.3.tgz",
      "integrity": "sha512-qiBjkpbMLO/HL68y+lh4q0/O1MZFj2RX6X/KmMa3+gJD3z+WwI1ZzDHysvqHGS3mP6mznPckpXmw1nI9cJjyRg==",
      "license": "ISC",
      "optional": true,
      "bin": {
        "color-support": "bin.js"
      }
    },
    "node_modules/concat-map": {
      "version": "0.0.1",
      "resolved": "https://registry.npmjs.org/concat-map/-/concat-map-0.0.1.tgz",
      "integrity": "sha512-/Srv4dswyQNBfohGpz9o6Yb3Gz3SrUDqBH5rTuhGR7ahtlbYKnVxw2bCFMRljaA7EXHaXZ8wsHdodFvbkhKmqg==",
      "license": "MIT",
      "optional": true
    },
    "node_modules/conf": {
      "version": "11.0.2",
      "resolved": "https://registry.npmjs.org/conf/-/conf-11.0.2.tgz",
      "integrity": "sha512-jjyhlQ0ew/iwmtwsS2RaB6s8DBifcE2GYBEaw2SJDUY/slJJbNfY4GlDVzOs/ff8cM/Wua5CikqXgbFl5eu85A==",
      "license": "MIT",
      "dependencies": {
        "ajv": "^8.12.0",
        "ajv-formats": "^2.1.1",
        "atomically": "^2.0.0",
        "debounce-fn": "^5.1.2",
        "dot-prop": "^7.2.0",
        "env-paths": "^3.0.0",
        "json-schema-typed": "^8.0.1",
        "semver": "^7.3.8"
      },
      "engines": {
        "node": ">=14.16"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/console-control-strings": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/console-control-strings/-/console-control-strings-1.1.0.tgz",
      "integrity": "sha512-ty/fTekppD2fIwRvnZAVdeOiGd1c7YXEixbgJTNzqcxJWKQnjJ/V1bNEEE6hygpM3WjwHFUVK6HTjWSzV4a8sQ==",
      "license": "ISC",
      "optional": true
    },
    "node_modules/convert-source-map": {
      "version": "1.9.0",
      "resolved": "https://registry.npmjs.org/convert-source-map/-/convert-source-map-1.9.0.tgz",
      "integrity": "sha512-ASFBup0Mz1uyiIjANan1jzLQami9z1PoYSZCiiYW2FczPbenXc45FZdBZLzOT+r6+iciuEModtmCti+hjaAk0A==",
      "license": "MIT"
    },
    "node_modules/cookie": {
      "version": "0.7.2",
      "resolved": "https://registry.npmjs.org/cookie/-/cookie-0.7.2.tgz",
      "integrity": "sha512-yki5XnKuf750l50uGTllt6kKILY4nQ1eNIQatoXEByZ5dWgnKqbnqmTrBE5B4N7lrMJKQ2ytWMiTO2o0v6Ew/w==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/cosmiconfig": {
      "version": "7.1.0",
      "resolved": "https://registry.npmjs.org/cosmiconfig/-/cosmiconfig-7.1.0.tgz",
      "integrity": "sha512-AdmX6xUzdNASswsFtmwSt7Vj8po9IuqXm0UXz7QKPuEUmPB4XyjGfaAr2PSuELMwkRMVH1EpIkX5bTZGRB3eCA==",
      "license": "MIT",
      "dependencies": {
        "@types/parse-json": "^4.0.0",
        "import-fresh": "^3.2.1",
        "parse-json": "^5.0.0",
        "path-type": "^4.0.0",
        "yaml": "^1.10.0"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/csstype": {
      "version": "3.1.3",
      "resolved": "https://registry.npmjs.org/csstype/-/csstype-3.1.3.tgz",
      "integrity": "sha512-M1uQkMl8rQK/szD0LNhtqxIPLpimGm8sOBwU7lLnCpSbTyY3yeU1Vc7l4KT5zT4s/yOxHH5O7tIuuLOCnLADRw==",
      "license": "MIT"
    },
    "node_modules/d3-array": {
      "version": "3.2.4",
      "resolved": "https://registry.npmjs.org/d3-array/-/d3-array-3.2.4.tgz",
      "integrity": "sha512-tdQAmyA18i4J7wprpYq8ClcxZy3SC31QMeByyCFyRt7BVHdREQZ5lpzoe5mFEYZUWe+oq8HBvk9JjpibyEV4Jg==",
      "license": "ISC",
      "dependencies": {
        "internmap": "1 - 2"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/d3-color": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/d3-color/-/d3-color-3.1.0.tgz",
      "integrity": "sha512-zg/chbXyeBtMQ1LbD/WSoW2DpC3I0mpmPdW+ynRTj/x2DAWYrIY7qeZIHidozwV24m4iavr15lNwIwLxRmOxhA==",
      "license": "ISC",
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/d3-ease": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/d3-ease/-/d3-ease-3.0.1.tgz",
      "integrity": "sha512-wR/XK3D3XcLIZwpbvQwQ5fK+8Ykds1ip7A2Txe0yxncXSdq1L9skcG7blcedkOX+ZcgxGAmLX1FrRGbADwzi0w==",
      "license": "BSD-3-Clause",
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/d3-format": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/d3-format/-/d3-format-3.1.0.tgz",
      "integrity": "sha512-YyUI6AEuY/Wpt8KWLgZHsIU86atmikuoOmCfommt0LYHiQSPjvX2AcFc38PX0CBpr2RCyZhjex+NS/LPOv6YqA==",
      "license": "ISC",
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/d3-interpolate": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/d3-interpolate/-/d3-interpolate-3.0.1.tgz",
      "integrity": "sha512-3bYs1rOD33uo8aqJfKP3JWPAibgw8Zm2+L9vBKEHJ2Rg+viTR7o5Mmv5mZcieN+FRYaAOWX5SJATX6k1PWz72g==",
      "license": "ISC",
      "dependencies": {
        "d3-color": "1 - 3"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/d3-path": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/d3-path/-/d3-path-3.1.0.tgz",
      "integrity": "sha512-p3KP5HCf/bvjBSSKuXid6Zqijx7wIfNW+J/maPs+iwR35at5JCbLUT0LzF1cnjbCHWhqzQTIN2Jpe8pRebIEFQ==",
      "license": "ISC",
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/d3-scale": {
      "version": "4.0.2",
      "resolved": "https://registry.npmjs.org/d3-scale/-/d3-scale-4.0.2.tgz",
      "integrity": "sha512-GZW464g1SH7ag3Y7hXjf8RoUuAFIqklOAq3MRl4OaWabTFJY9PN/E1YklhXLh+OQ3fM9yS2nOkCoS+WLZ6kvxQ==",
      "license": "ISC",
      "dependencies": {
        "d3-array": "2.10.0 - 3",
        "d3-format": "1 - 3",
        "d3-interpolate": "1.2.0 - 3",
        "d3-time": "2.1.1 - 3",
        "d3-time-format": "2 - 4"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/d3-shape": {
      "version": "3.2.0",
      "resolved": "https://registry.npmjs.org/d3-shape/-/d3-shape-3.2.0.tgz",
      "integrity": "sha512-SaLBuwGm3MOViRq2ABk3eLoxwZELpH6zhl3FbAoJ7Vm1gofKx6El1Ib5z23NUEhF9AsGl7y+dzLe5Cw2AArGTA==",
      "license": "ISC",
      "dependencies": {
        "d3-path": "^3.1.0"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/d3-time": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/d3-time/-/d3-time-3.1.0.tgz",
      "integrity": "sha512-VqKjzBLejbSMT4IgbmVgDjpkYrNWUYJnbCGo874u7MMKIWsILRX+OpX/gTk8MqjpT1A/c6HY2dCA77ZN0lkQ2Q==",
      "license": "ISC",
      "dependencies": {
        "d3-array": "2 - 3"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/d3-time-format": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/d3-time-format/-/d3-time-format-4.1.0.tgz",
      "integrity": "sha512-dJxPBlzC7NugB2PDLwo9Q8JiTR3M3e4/XANkreKSUxF8vvXKqm1Yfq4Q5dl8budlunRVlUUaDUgFt7eA8D6NLg==",
      "license": "ISC",
      "dependencies": {
        "d3-time": "1 - 3"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/d3-timer": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/d3-timer/-/d3-timer-3.0.1.tgz",
      "integrity": "sha512-ndfJ/JxxMd3nw31uyKoY2naivF+r29V+Lc0svZxe1JvvIRmi8hUsrMvdOwgS1o6uBHmiz91geQ0ylPP0aj1VUA==",
      "license": "ISC",
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/date-fns": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/date-fns/-/date-fns-4.1.0.tgz",
      "integrity": "sha512-Ukq0owbQXxa/U3EGtsdVBkR1w7KOQ5gIBqdH2hkvknzZPYvBxb/aa6E8L7tmjFtkwZBu3UXBbjIgPo/Ez4xaNg==",
      "license": "MIT",
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/kossnocorp"
      }
    },
    "node_modules/debounce-fn": {
      "version": "5.1.2",
      "resolved": "https://registry.npmjs.org/debounce-fn/-/debounce-fn-5.1.2.tgz",
      "integrity": "sha512-Sr4SdOZ4vw6eQDvPYNxHogvrxmCIld/VenC5JbNrFwMiwd7lY/Z18ZFfo+EWNG4DD9nFlAujWAo/wGuOPHmy5A==",
      "license": "MIT",
      "dependencies": {
        "mimic-fn": "^4.0.0"
      },
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/debug": {
      "version": "4.4.1",
      "resolved": "https://registry.npmjs.org/debug/-/debug-4.4.1.tgz",
      "integrity": "sha512-KcKCqiftBJcZr++7ykoDIEwSa3XWowTfNPo92BYxjXiyYEVrUQh2aLyhxBCwww+heortUFxEJYcRzosstTEBYQ==",
      "license": "MIT",
      "dependencies": {
        "ms": "^2.1.3"
      },
      "engines": {
        "node": ">=6.0"
      },
      "peerDependenciesMeta": {
        "supports-color": {
          "optional": true
        }
      }
    },
    "node_modules/decimal.js": {
      "version": "10.5.0",
      "resolved": "https://registry.npmjs.org/decimal.js/-/decimal.js-10.5.0.tgz",
      "integrity": "sha512-8vDa8Qxvr/+d94hSh5P3IJwI5t8/c0KsMp+g8bNw9cY2icONa5aPfvKeieW1WlG0WQYwwhJ7mjui2xtiePQSXw==",
      "license": "MIT"
    },
    "node_modules/decimal.js-light": {
      "version": "2.5.1",
      "resolved": "https://registry.npmjs.org/decimal.js-light/-/decimal.js-light-2.5.1.tgz",
      "integrity": "sha512-qIMFpTMZmny+MMIitAB6D7iVPEorVw6YQRWkvarTkT4tBeSLLiHzcwj6q0MmYSFCiVpiqPJTJEYIrpcPzVEIvg==",
      "license": "MIT"
    },
    "node_modules/decompress-response": {
      "version": "6.0.0",
      "resolved": "https://registry.npmjs.org/decompress-response/-/decompress-response-6.0.0.tgz",
      "integrity": "sha512-aW35yZM6Bb/4oJlZncMH2LCoZtJXTRxES17vE3hoRiowU2kWHaJKFkSBDnDR+cm9J+9QhXmREyIfv0pji9ejCQ==",
      "license": "MIT",
      "dependencies": {
        "mimic-response": "^3.1.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/deep-extend": {
      "version": "0.6.0",
      "resolved": "https://registry.npmjs.org/deep-extend/-/deep-extend-0.6.0.tgz",
      "integrity": "sha512-LOHxIOaPYdHlJRtCQfDIVZtfw/ufM8+rVj649RIHzcm/vGwQRXFt6OPqIFWsm2XEMrNIEtWR64sY1LEKD2vAOA==",
      "license": "MIT",
      "engines": {
        "node": ">=4.0.0"
      }
    },
    "node_modules/delegates": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/delegates/-/delegates-1.0.0.tgz",
      "integrity": "sha512-bd2L678uiWATM6m5Z1VzNCErI3jiGzt6HGY8OVICs40JQq/HALfbyNJmp0UDakEY4pMMaN0Ly5om/B1VI/+xfQ==",
      "license": "MIT",
      "optional": true
    },
    "node_modules/detect-libc": {
      "version": "2.0.4",
      "resolved": "https://registry.npmjs.org/detect-libc/-/detect-libc-2.0.4.tgz",
      "integrity": "sha512-3UDv+G9CsCKO1WKMGw9fwq/SWJYbI0c5Y7LU1AXYoDdbhE2AHQ6N6Nb34sG8Fj7T5APy8qXDCKuuIHd1BR0tVA==",
      "license": "Apache-2.0",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/dom-helpers": {
      "version": "5.2.1",
      "resolved": "https://registry.npmjs.org/dom-helpers/-/dom-helpers-5.2.1.tgz",
      "integrity": "sha512-nRCa7CK3VTrM2NmGkIy4cbK7IZlgBE/PYMn55rrXefr5xXDP0LdtfPnblFDoVdcAfslJ7or6iqAUnx0CCGIWQA==",
      "license": "MIT",
      "dependencies": {
        "@babel/runtime": "^7.8.7",
        "csstype": "^3.0.2"
      }
    },
    "node_modules/dot-prop": {
      "version": "7.2.0",
      "resolved": "https://registry.npmjs.org/dot-prop/-/dot-prop-7.2.0.tgz",
      "integrity": "sha512-Ol/IPXUARn9CSbkrdV4VJo7uCy1I3VuSiWCaFSg+8BdUOzF9n3jefIpcgAydvUZbTdEBZs2vEiTiS9m61ssiDA==",
      "license": "MIT",
      "dependencies": {
        "type-fest": "^2.11.2"
      },
      "engines": {
        "node": "^12.20.0 || ^14.13.1 || >=16.0.0"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/emoji-regex": {
      "version": "8.0.0",
      "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-8.0.0.tgz",
      "integrity": "sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A==",
      "license": "MIT",
      "optional": true
    },
    "node_modules/encoding": {
      "version": "0.1.13",
      "resolved": "https://registry.npmjs.org/encoding/-/encoding-0.1.13.tgz",
      "integrity": "sha512-ETBauow1T35Y/WZMkio9jiM0Z5xjHHmJ4XmjZOq1l/dXz3lr2sRn87nJy20RupqSh1F2m3HHPSp8ShIPQJrJ3A==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "iconv-lite": "^0.6.2"
      }
    },
    "node_modules/end-of-stream": {
      "version": "1.4.4",
      "resolved": "https://registry.npmjs.org/end-of-stream/-/end-of-stream-1.4.4.tgz",
      "integrity": "sha512-+uw1inIHVPQoaVuHzRyXd21icM+cnt4CzD5rW+NC1wjOUSTOs+Te7FOv7AhN7vS9x/oIyhLP5PR1H+phQAHu5Q==",
      "license": "MIT",
      "dependencies": {
        "once": "^1.4.0"
      }
    },
    "node_modules/env-paths": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/env-paths/-/env-paths-3.0.0.tgz",
      "integrity": "sha512-dtJUTepzMW3Lm/NPxRf3wP4642UWhjL2sQxc+ym2YMj1m/H2zDNQOlezafzkHwn6sMstjHTwG6iQQsctDW/b1A==",
      "license": "MIT",
      "engines": {
        "node": "^12.20.0 || ^14.13.1 || >=16.0.0"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/err-code": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/err-code/-/err-code-2.0.3.tgz",
      "integrity": "sha512-2bmlRpNKBxT/CRmPOlyISQpNj+qSeYvcym/uT0Jx2bMOlKLtSy1ZmLuVxSEKKyor/N5yhvp/ZiG1oE3DEYMSFA==",
      "license": "MIT",
      "optional": true
    },
    "node_modules/error-ex": {
      "version": "1.3.2",
      "resolved": "https://registry.npmjs.org/error-ex/-/error-ex-1.3.2.tgz",
      "integrity": "sha512-7dFHNmqeFSEt2ZBsCriorKnn3Z2pj+fd9kmI6QoWw4//DL+icEBfc0U7qJCisqrTsKTjw4fNFy2pW9OqStD84g==",
      "license": "MIT",
      "dependencies": {
        "is-arrayish": "^0.2.1"
      }
    },
    "node_modules/escape-string-regexp": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-4.0.0.tgz",
      "integrity": "sha512-TtpcNJ3XAzx3Gq8sWRzJaVajRs0uVxA2YAkdb1jm2YkPz4G6egUFAyA3n5vtEIZefPk5Wa4UXbKuS5fKkJWdgA==",
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/eventemitter3": {
      "version": "4.0.7",
      "resolved": "https://registry.npmjs.org/eventemitter3/-/eventemitter3-4.0.7.tgz",
      "integrity": "sha512-8guHBZCwKnFhYdHr2ysuRWErTwhoN2X8XELRlrRwpmfeY2jjuUN4taQMsULKUVo1K4DvZl+0pgfyoysHxvmvEw==",
      "license": "MIT"
    },
    "node_modules/expand-template": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/expand-template/-/expand-template-2.0.3.tgz",
      "integrity": "sha512-XYfuKMvj4O35f/pOXLObndIRvyQ+/+6AhODh+OKWj9S9498pHHn/IMszH+gt0fBCRWMNfk1ZSp5x3AifmnI2vg==",
      "license": "(MIT OR WTFPL)",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/fast-deep-equal": {
      "version": "3.1.3",
      "resolved": "https://registry.npmjs.org/fast-deep-equal/-/fast-deep-equal-3.1.3.tgz",
      "integrity": "sha512-f3qQ9oQy9j2AhBe/H9VC91wLmKBCCU/gDOnKNAYG5hswO7BLKj09Hc5HYNz9cGI++xlpDCIgDaitVs03ATR84Q==",
      "license": "MIT"
    },
    "node_modules/fast-equals": {
      "version": "5.2.2",
      "resolved": "https://registry.npmjs.org/fast-equals/-/fast-equals-5.2.2.tgz",
      "integrity": "sha512-V7/RktU11J3I36Nwq2JnZEM7tNm17eBJz+u25qdxBZeCKiX6BkVSZQjwWIr+IobgnZy+ag73tTZgZi7tr0LrBw==",
      "license": "MIT",
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/fast-uri": {
      "version": "3.0.6",
      "resolved": "https://registry.npmjs.org/fast-uri/-/fast-uri-3.0.6.tgz",
      "integrity": "sha512-Atfo14OibSv5wAp4VWNsFYE1AchQRTv9cBGWET4pZWHzYshFSS9NQI6I57rdKn9croWVMbYFbLhJ+yJvmZIIHw==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/fastify"
        },
        {
          "type": "opencollective",
          "url": "https://opencollective.com/fastify"
        }
      ],
      "license": "BSD-3-Clause"
    },
    "node_modules/file-uri-to-path": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/file-uri-to-path/-/file-uri-to-path-1.0.0.tgz",
      "integrity": "sha512-0Zt+s3L7Vf1biwWZ29aARiVYLx7iMGnEUl9x33fbB/j3jR81u/O2LbqK+Bm1CDSNDKVtJ/YjwY7TUd5SkeLQLw==",
      "license": "MIT"
    },
    "node_modules/find-root": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/find-root/-/find-root-1.1.0.tgz",
      "integrity": "sha512-NKfW6bec6GfKc0SGx1e07QZY9PE99u0Bft/0rzSD5k3sO/vwkVUpDUKVm5Gpp5Ue3YfShPFTX2070tDs5kB9Ng==",
      "license": "MIT"
    },
    "node_modules/fs-constants": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/fs-constants/-/fs-constants-1.0.0.tgz",
      "integrity": "sha512-y6OAwoSIf7FyjMIv94u+b5rdheZEjzR63GTyZJm5qh4Bi+2YgwLCcI/fPFZkL5PSixOt6ZNKm+w+Hfp/Bciwow==",
      "license": "MIT"
    },
    "node_modules/fs-minipass": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/fs-minipass/-/fs-minipass-2.1.0.tgz",
      "integrity": "sha512-V/JgOLFCS+R6Vcq0slCuaeWEdNC3ouDlJMNIsacH2VtALiu9mV4LPrHc5cDl8k5aw6J8jwgWWpiTo5RYhmIzvg==",
      "license": "ISC",
      "dependencies": {
        "minipass": "^3.0.0"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/fs.realpath": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/fs.realpath/-/fs.realpath-1.0.0.tgz",
      "integrity": "sha512-OO0pH2lK6a0hZnAdau5ItzHPI6pUlvI7jMVnxUQRtw4owF2wk8lOSabtGDCTP4Ggrg2MbGnWO9X8K1t4+fGMDw==",
      "license": "ISC",
      "optional": true
    },
    "node_modules/function-bind": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/function-bind/-/function-bind-1.1.2.tgz",
      "integrity": "sha512-7XHNxH7qX9xG5mIwxkhumTox/MIRNcOgDrxWsMt2pAr23WHp6MrRlN7FBSFpCpr+oVO0F744iUgR82nJMfG2SA==",
      "license": "MIT",
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/gauge": {
      "version": "4.0.4",
      "resolved": "https://registry.npmjs.org/gauge/-/gauge-4.0.4.tgz",
      "integrity": "sha512-f9m+BEN5jkg6a0fZjleidjN51VE1X+mPFQ2DJ0uv1V39oCLCbsGe6yjbBnp7eK7z/+GAon99a3nHuqbuuthyPg==",
      "deprecated": "This package is no longer supported.",
      "license": "ISC",
      "optional": true,
      "dependencies": {
        "aproba": "^1.0.3 || ^2.0.0",
        "color-support": "^1.1.3",
        "console-control-strings": "^1.1.0",
        "has-unicode": "^2.0.1",
        "signal-exit": "^3.0.7",
        "string-width": "^4.2.3",
        "strip-ansi": "^6.0.1",
        "wide-align": "^1.1.5"
      },
      "engines": {
        "node": "^12.13.0 || ^14.15.0 || >=16.0.0"
      }
    },
    "node_modules/github-from-package": {
      "version": "0.0.0",
      "resolved": "https://registry.npmjs.org/github-from-package/-/github-from-package-0.0.0.tgz",
      "integrity": "sha512-SyHy3T1v2NUXn29OsWdxmK6RwHD+vkj3v8en8AOBZ1wBQ/hCAQ5bAQTD02kW4W9tUp/3Qh6J8r9EvntiyCmOOw==",
      "license": "MIT"
    },
    "node_modules/glob": {
      "version": "7.2.3",
      "resolved": "https://registry.npmjs.org/glob/-/glob-7.2.3.tgz",
      "integrity": "sha512-nFR0zLpU2YCaRxwoCJvL6UvCH2JFyFVIvwTLsIf21AuHlMskA1hhTdk+LlYJtOlYt9v6dvszD2BGRqBL+iQK9Q==",
      "deprecated": "Glob versions prior to v9 are no longer supported",
      "license": "ISC",
      "optional": true,
      "dependencies": {
        "fs.realpath": "^1.0.0",
        "inflight": "^1.0.4",
        "inherits": "2",
        "minimatch": "^3.1.1",
        "once": "^1.3.0",
        "path-is-absolute": "^1.0.0"
      },
      "engines": {
        "node": "*"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      }
    },
    "node_modules/globals": {
      "version": "11.12.0",
      "resolved": "https://registry.npmjs.org/globals/-/globals-11.12.0.tgz",
      "integrity": "sha512-WOBp/EEGUiIsJSp7wcv/y6MO+lV9UoncWqxuFfm8eBwzWNgyfBd6Gz+IeKQ9jCmyhoH99g15M3T+QaVHFjizVA==",
      "license": "MIT",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/graceful-fs": {
      "version": "4.2.11",
      "resolved": "https://registry.npmjs.org/graceful-fs/-/graceful-fs-4.2.11.tgz",
      "integrity": "sha512-RbJ5/jmFcNNCcDV5o9eTnBLJ/HszWV0P73bc+Ff4nS/rJj+YaS6IGyiOL0VoBYX+l1Wrl3k63h/KrH+nhJ0XvQ==",
      "license": "ISC",
      "optional": true
    },
    "node_modules/has-unicode": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/has-unicode/-/has-unicode-2.0.1.tgz",
      "integrity": "sha512-8Rf9Y83NBReMnx0gFzA8JImQACstCYWUplepDa9xprwwtmgEZUF0h/i5xSA625zB/I37EtrswSST6OXxwaaIJQ==",
      "license": "ISC",
      "optional": true
    },
    "node_modules/hasown": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/hasown/-/hasown-2.0.2.tgz",
      "integrity": "sha512-0hJU9SCPvmMzIBdZFqNPXWa6dqh7WdH0cII9y+CyS8rG3nL48Bclra9HmKhVVUHyPWNH5Y7xDwAB7bfgSjkUMQ==",
      "license": "MIT",
      "dependencies": {
        "function-bind": "^1.1.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/hoist-non-react-statics": {
      "version": "3.3.2",
      "resolved": "https://registry.npmjs.org/hoist-non-react-statics/-/hoist-non-react-statics-3.3.2.tgz",
      "integrity": "sha512-/gGivxi8JPKWNm/W0jSmzcMPpfpPLc3dY/6GxhX2hQ9iGj3aDfklV4ET7NjKpSinLpJ5vafa9iiGIEZg10SfBw==",
      "license": "BSD-3-Clause",
      "dependencies": {
        "react-is": "^16.7.0"
      }
    },
    "node_modules/hoist-non-react-statics/node_modules/react-is": {
      "version": "16.13.1",
      "resolved": "https://registry.npmjs.org/react-is/-/react-is-16.13.1.tgz",
      "integrity": "sha512-24e6ynE2H+OKt4kqsOvNd8kBpV65zoxbA4BVsEOB3ARVWQki/DHzaUoC5KuON/BiccDaCCTZBuOcfZs70kR8bQ==",
      "license": "MIT"
    },
    "node_modules/http-cache-semantics": {
      "version": "4.2.0",
      "resolved": "https://registry.npmjs.org/http-cache-semantics/-/http-cache-semantics-4.2.0.tgz",
      "integrity": "sha512-dTxcvPXqPvXBQpq5dUr6mEMJX4oIEFv6bwom3FDwKRDsuIjjJGANqhBuoAn9c1RQJIdAKav33ED65E2ys+87QQ==",
      "license": "BSD-2-Clause",
      "optional": true
    },
    "node_modules/http-proxy-agent": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/http-proxy-agent/-/http-proxy-agent-4.0.1.tgz",
      "integrity": "sha512-k0zdNgqWTGA6aeIRVpvfVob4fL52dTfaehylg0Y4UvSySvOq/Y+BOyPrgpUrA7HylqvU8vIZGsRuXmspskV0Tg==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "@tootallnate/once": "1",
        "agent-base": "6",
        "debug": "4"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/https-proxy-agent": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/https-proxy-agent/-/https-proxy-agent-5.0.1.tgz",
      "integrity": "sha512-dFcAjpTQFgoLMzC2VwU+C/CbS7uRL0lWmxDITmqm7C+7F0Odmj6s9l6alZc6AELXhrnggM2CeWSXHGOdX2YtwA==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "agent-base": "6",
        "debug": "4"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/humanize-ms": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/humanize-ms/-/humanize-ms-1.2.1.tgz",
      "integrity": "sha512-Fl70vYtsAFb/C06PTS9dZBo7ihau+Tu/DNCk/OyHhea07S+aeMWpFFkUaXRa8fI+ScZbEI8dfSxwY7gxZ9SAVQ==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "ms": "^2.0.0"
      }
    },
    "node_modules/iconv-lite": {
      "version": "0.6.3",
      "resolved": "https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.6.3.tgz",
      "integrity": "sha512-4fCk79wshMdzMp2rH06qWrJE4iolqLhCUH+OiuIgU++RB0+94NlDL81atO7GX55uUKueo0txHNtvEyI6D7WdMw==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "safer-buffer": ">= 2.1.2 < 3.0.0"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/ieee754": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/ieee754/-/ieee754-1.2.1.tgz",
      "integrity": "sha512-dcyqhDvX1C46lXZcVqCpK+FtMRQVdIMN6/Df5js2zouUsqG7I6sFxitIC+7KYK29KdXOLHdu9zL4sFnoVQnqaA==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ],
      "license": "BSD-3-Clause"
    },
    "node_modules/import-fresh": {
      "version": "3.3.1",
      "resolved": "https://registry.npmjs.org/import-fresh/-/import-fresh-3.3.1.tgz",
      "integrity": "sha512-TR3KfrTZTYLPB6jUjfx6MF9WcWrHL9su5TObK4ZkYgBdWKPOFoSoQIdEuTuR82pmtxH2spWG9h6etwfr1pLBqQ==",
      "license": "MIT",
      "dependencies": {
        "parent-module": "^1.0.0",
        "resolve-from": "^4.0.0"
      },
      "engines": {
        "node": ">=6"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/imurmurhash": {
      "version": "0.1.4",
      "resolved": "https://registry.npmjs.org/imurmurhash/-/imurmurhash-0.1.4.tgz",
      "integrity": "sha512-JmXMZ6wuvDmLiHEml9ykzqO6lwFbof0GG4IkcGaENdCRDDmMVnny7s5HsIgHCbaq0w2MyPhDqkhTUgS2LU2PHA==",
      "license": "MIT",
      "optional": true,
      "engines": {
        "node": ">=0.8.19"
      }
    },
    "node_modules/indent-string": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/indent-string/-/indent-string-4.0.0.tgz",
      "integrity": "sha512-EdDDZu4A2OyIK7Lr/2zG+w5jmbuk1DVBnEwREQvBzspBJkCEbRa8GxU1lghYcaGJCnRWibjDXlq779X1/y5xwg==",
      "license": "MIT",
      "optional": true,
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/infer-owner": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/infer-owner/-/infer-owner-1.0.4.tgz",
      "integrity": "sha512-IClj+Xz94+d7irH5qRyfJonOdfTzuDaifE6ZPWfx0N0+/ATZCbuTPq2prFl526urkQd90WyUKIh1DfBQ2hMz9A==",
      "license": "ISC",
      "optional": true
    },
    "node_modules/inflight": {
      "version": "1.0.6",
      "resolved": "https://registry.npmjs.org/inflight/-/inflight-1.0.6.tgz",
      "integrity": "sha512-k92I/b08q4wvFscXCLvqfsHCrjrF7yiXsQuIVvVE7N82W3+aqpzuUdBbfhWcy/FZR3/4IgflMgKLOsvPDrGCJA==",
      "deprecated": "This module is not supported, and leaks memory. Do not use it. Check out lru-cache if you want a good and tested way to coalesce async requests by a key value, which is much more comprehensive and powerful.",
      "license": "ISC",
      "optional": true,
      "dependencies": {
        "once": "^1.3.0",
        "wrappy": "1"
      }
    },
    "node_modules/inherits": {
      "version": "2.0.4",
      "resolved": "https://registry.npmjs.org/inherits/-/inherits-2.0.4.tgz",
      "integrity": "sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ==",
      "license": "ISC"
    },
    "node_modules/ini": {
      "version": "1.3.8",
      "resolved": "https://registry.npmjs.org/ini/-/ini-1.3.8.tgz",
      "integrity": "sha512-JV/yugV2uzW5iMRSiZAyDtQd+nxtUnjeLt0acNdw98kKLrvuRVyB80tsREOE7yvGVgalhZ6RNXCmEHkUKBKxew==",
      "license": "ISC"
    },
    "node_modules/internmap": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/internmap/-/internmap-2.0.3.tgz",
      "integrity": "sha512-5Hh7Y1wQbvY5ooGgPbDaL5iYLAPzMTUrjMulskHLH6wnv/A+1q5rgEaiuqEjB+oxGXIVZs1FF+R/KPN3ZSQYYg==",
      "license": "ISC",
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/intl-messageformat": {
      "version": "10.7.16",
      "resolved": "https://registry.npmjs.org/intl-messageformat/-/intl-messageformat-10.7.16.tgz",
      "integrity": "sha512-UmdmHUmp5CIKKjSoE10la5yfU+AYJAaiYLsodbjL4lji83JNvgOQUjGaGhGrpFCb0Uh7sl7qfP1IyILa8Z40ug==",
      "license": "BSD-3-Clause",
      "dependencies": {
        "@formatjs/ecma402-abstract": "2.3.4",
        "@formatjs/fast-memoize": "2.2.7",
        "@formatjs/icu-messageformat-parser": "2.11.2",
        "tslib": "^2.8.0"
      }
    },
    "node_modules/ip-address": {
      "version": "9.0.5",
      "resolved": "https://registry.npmjs.org/ip-address/-/ip-address-9.0.5.tgz",
      "integrity": "sha512-zHtQzGojZXTwZTHQqra+ETKd4Sn3vgi7uBmlPoXVWZqYvuKmtI0l/VZTjqGmJY9x88GGOaZ9+G9ES8hC4T4X8g==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "jsbn": "1.1.0",
        "sprintf-js": "^1.1.3"
      },
      "engines": {
        "node": ">= 12"
      }
    },
    "node_modules/is-arrayish": {
      "version": "0.2.1",
      "resolved": "https://registry.npmjs.org/is-arrayish/-/is-arrayish-0.2.1.tgz",
      "integrity": "sha512-zz06S8t0ozoDXMG+ube26zeCTNXcKIPJZJi8hBrF4idCLms4CG9QtK7qBl1boi5ODzFpjswb5JPmHCbMpjaYzg==",
      "license": "MIT"
    },
    "node_modules/is-core-module": {
      "version": "2.16.1",
      "resolved": "https://registry.npmjs.org/is-core-module/-/is-core-module-2.16.1.tgz",
      "integrity": "sha512-UfoeMA6fIJ8wTYFEUjelnaGI67v6+N7qXJEvQuIGa99l4xsCruSYOVSQ0uPANn4dAzm8lkYPaKLrrijLq7x23w==",
      "license": "MIT",
      "dependencies": {
        "hasown": "^2.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-docker": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/is-docker/-/is-docker-3.0.0.tgz",
      "integrity": "sha512-eljcgEDlEns/7AXFosB5K/2nCM4P7FQPkGc/DWLy5rmFEWvZayGrik1d9/QIY5nJ4f9YsVvBkA6kJpHn9rISdQ==",
      "license": "MIT",
      "bin": {
        "is-docker": "cli.js"
      },
      "engines": {
        "node": "^12.20.0 || ^14.13.1 || >=16.0.0"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/is-fullwidth-code-point": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-3.0.0.tgz",
      "integrity": "sha512-zymm5+u+sCsSWyD9qNaejV3DFvhCKclKdizYaJUuHA83RLjb7nSuGnddCHGv0hk+KY7BMAlsWeK4Ueg6EV6XQg==",
      "license": "MIT",
      "optional": true,
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/is-lambda": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/is-lambda/-/is-lambda-1.0.1.tgz",
      "integrity": "sha512-z7CMFGNrENq5iFB9Bqo64Xk6Y9sg+epq1myIcdHaGnbMTYOxvzsEtdYqQUylB7LxfkvgrrjP32T6Ywciio9UIQ==",
      "license": "MIT",
      "optional": true
    },
    "node_modules/isexe": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/isexe/-/isexe-2.0.0.tgz",
      "integrity": "sha512-RHxMLp9lnKHGHRng9QFhRCMbYAcVpn69smSGcq3f36xjgVVWThj4qqLbTLlq7Ssj8B+fIQ1EuCEGI2lKsyQeIw==",
      "license": "ISC",
      "optional": true
    },
    "node_modules/jiti": {
      "version": "2.4.2",
      "resolved": "https://registry.npmjs.org/jiti/-/jiti-2.4.2.tgz",
      "integrity": "sha512-rg9zJN+G4n2nfJl5MW3BMygZX56zKPNVEYYqq7adpmMh4Jn2QNEwhvQlFy6jPVdcod7txZtKHWnyZiA3a0zP7A==",
      "license": "MIT",
      "bin": {
        "jiti": "lib/jiti-cli.mjs"
      }
    },
    "node_modules/jose": {
      "version": "4.15.9",
      "resolved": "https://registry.npmjs.org/jose/-/jose-4.15.9.tgz",
      "integrity": "sha512-1vUQX+IdDMVPj4k8kOxgUqlcK518yluMuGZwqlr44FS1ppZB/5GWh4rZG89erpOBOJjU/OBsnCVFfapsRz6nEA==",
      "license": "MIT",
      "funding": {
        "url": "https://github.com/sponsors/panva"
      }
    },
    "node_modules/js-tokens": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/js-tokens/-/js-tokens-4.0.0.tgz",
      "integrity": "sha512-RdJUflcE3cUzKiMqQgsCu06FPu9UdIJO0beYbPhHN4k6apgJtifcoCtT9bcxOpYBtpD2kCM6Sbzg4CausW/PKQ==",
      "license": "MIT"
    },
    "node_modules/jsbn": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/jsbn/-/jsbn-1.1.0.tgz",
      "integrity": "sha512-4bYVV3aAMtDTTu4+xsDYa6sy9GyJ69/amsu9sYF2zqjiEoZA5xJi3BrfX3uY+/IekIu7MwdObdbDWpoZdBv3/A==",
      "license": "MIT",
      "optional": true
    },
    "node_modules/jsesc": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/jsesc/-/jsesc-3.1.0.tgz",
      "integrity": "sha512-/sM3dO2FOzXjKQhJuo0Q173wf2KOo8t4I8vHy6lF9poUp7bKT0/NHE8fPX23PwfhnykfqnC2xRxOnVw5XuGIaA==",
      "license": "MIT",
      "bin": {
        "jsesc": "bin/jsesc"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/json-parse-even-better-errors": {
      "version": "2.3.1",
      "resolved": "https://registry.npmjs.org/json-parse-even-better-errors/-/json-parse-even-better-errors-2.3.1.tgz",
      "integrity": "sha512-xyFwyhro/JEof6Ghe2iz2NcXoj2sloNsWr/XsERDK/oiPCfaNhl5ONfp+jQdAZRQQ0IJWNzH9zIZF7li91kh2w==",
      "license": "MIT"
    },
    "node_modules/json-schema-traverse": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/json-schema-traverse/-/json-schema-traverse-1.0.0.tgz",
      "integrity": "sha512-NM8/P9n3XjXhIZn1lLhkFaACTOURQXjWhV4BA/RnOv8xvgqtqpAX9IO4mRQxSx1Rlo4tqzeqb0sOlruaOy3dug==",
      "license": "MIT"
    },
    "node_modules/json-schema-typed": {
      "version": "8.0.1",
      "resolved": "https://registry.npmjs.org/json-schema-typed/-/json-schema-typed-8.0.1.tgz",
      "integrity": "sha512-XQmWYj2Sm4kn4WeTYvmpKEbyPsL7nBsb647c7pMe6l02/yx2+Jfc4dT6UZkEXnIUb5LhD55r2HPsJ1milQ4rDg==",
      "license": "BSD-2-Clause"
    },
    "node_modules/lines-and-columns": {
      "version": "1.2.4",
      "resolved": "https://registry.npmjs.org/lines-and-columns/-/lines-and-columns-1.2.4.tgz",
      "integrity": "sha512-7ylylesZQ/PV29jhEDl3Ufjo6ZX7gCqJr5F7PKrqc93v7fzSymt1BpwEU8nAUXs8qzzvqhbjhK5QZg6Mt/HkBg==",
      "license": "MIT"
    },
    "node_modules/lodash": {
      "version": "4.17.21",
      "resolved": "https://registry.npmjs.org/lodash/-/lodash-4.17.21.tgz",
      "integrity": "sha512-v2kDEe57lecTulaDIuNTPy3Ry4gLGJ6Z1O3vE1krgXZNrsQ+LFTGHVxVjcXPs17LhbZVGedAJv8XZ1tvj5FvSg==",
      "license": "MIT"
    },
    "node_modules/loose-envify": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/loose-envify/-/loose-envify-1.4.0.tgz",
      "integrity": "sha512-lyuxPGr/Wfhrlem2CL/UcnUc1zcqKAImBDzukY7Y5F/yQiNdko6+fRLevlw1HgMySw7f611UIY408EtxRSoK3Q==",
      "license": "MIT",
      "dependencies": {
        "js-tokens": "^3.0.0 || ^4.0.0"
      },
      "bin": {
        "loose-envify": "cli.js"
      }
    },
    "node_modules/lru-cache": {
      "version": "6.0.0",
      "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-6.0.0.tgz",
      "integrity": "sha512-Jo6dJ04CmSjuznwJSS3pUeWmd/H0ffTlkXXgwZi+eq1UCmqQwCh+eLsYOYCwY991i2Fah4h1BEMCx4qThGbsiA==",
      "license": "ISC",
      "dependencies": {
        "yallist": "^4.0.0"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/make-fetch-happen": {
      "version": "9.1.0",
      "resolved": "https://registry.npmjs.org/make-fetch-happen/-/make-fetch-happen-9.1.0.tgz",
      "integrity": "sha512-+zopwDy7DNknmwPQplem5lAZX/eCOzSvSNNcSKm5eVwTkOBzoktEfXsa9L23J/GIRhxRsaxzkPEhrJEpE2F4Gg==",
      "license": "ISC",
      "optional": true,
      "dependencies": {
        "agentkeepalive": "^4.1.3",
        "cacache": "^15.2.0",
        "http-cache-semantics": "^4.1.0",
        "http-proxy-agent": "^4.0.1",
        "https-proxy-agent": "^5.0.0",
        "is-lambda": "^1.0.1",
        "lru-cache": "^6.0.0",
        "minipass": "^3.1.3",
        "minipass-collect": "^1.0.2",
        "minipass-fetch": "^1.3.2",
        "minipass-flush": "^1.0.5",
        "minipass-pipeline": "^1.2.4",
        "negotiator": "^0.6.2",
        "promise-retry": "^2.0.1",
        "socks-proxy-agent": "^6.0.0",
        "ssri": "^8.0.0"
      },
      "engines": {
        "node": ">= 10"
      }
    },
    "node_modules/make-fetch-happen/node_modules/negotiator": {
      "version": "0.6.4",
      "resolved": "https://registry.npmjs.org/negotiator/-/negotiator-0.6.4.tgz",
      "integrity": "sha512-myRT3DiWPHqho5PrJaIRyaMv2kgYf0mUVgBNOYMuCH5Ki1yEiQaf/ZJuQ62nvpc44wL5WDbTX7yGJi1Neevw8w==",
      "license": "MIT",
      "optional": true,
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/mimic-fn": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/mimic-fn/-/mimic-fn-4.0.0.tgz",
      "integrity": "sha512-vqiC06CuhBTUdZH+RYl8sFrL096vA45Ok5ISO6sE/Mr1jRbGH4Csnhi8f3wKVl7x8mO4Au7Ir9D3Oyv1VYMFJw==",
      "license": "MIT",
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/mimic-response": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/mimic-response/-/mimic-response-3.1.0.tgz",
      "integrity": "sha512-z0yWI+4FDrrweS8Zmt4Ej5HdJmky15+L2e6Wgn3+iK5fWzb6T3fhNFq2+MeTRb064c6Wr4N/wv0DzQTjNzHNGQ==",
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/minimatch": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz",
      "integrity": "sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==",
      "license": "ISC",
      "optional": true,
      "dependencies": {
        "brace-expansion": "^1.1.7"
      },
      "engines": {
        "node": "*"
      }
    },
    "node_modules/minimist": {
      "version": "1.2.8",
      "resolved": "https://registry.npmjs.org/minimist/-/minimist-1.2.8.tgz",
      "integrity": "sha512-2yyAR8qBkN3YuheJanUpWC5U3bb5osDywNB8RzDVlDwDHbocAJveqqj1u8+SVD7jkWT4yvsHCpWqqWqAxb0zCA==",
      "license": "MIT",
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/minipass": {
      "version": "3.3.6",
      "resolved": "https://registry.npmjs.org/minipass/-/minipass-3.3.6.tgz",
      "integrity": "sha512-DxiNidxSEK+tHG6zOIklvNOwm3hvCrbUrdtzY74U6HKTJxvIDfOUL5W5P2Ghd3DTkhhKPYGqeNUIh5qcM4YBfw==",
      "license": "ISC",
      "dependencies": {
        "yallist": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/minipass-collect": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/minipass-collect/-/minipass-collect-1.0.2.tgz",
      "integrity": "sha512-6T6lH0H8OG9kITm/Jm6tdooIbogG9e0tLgpY6mphXSm/A9u8Nq1ryBG+Qspiub9LjWlBPsPS3tWQ/Botq4FdxA==",
      "license": "ISC",
      "optional": true,
      "dependencies": {
        "minipass": "^3.0.0"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/minipass-fetch": {
      "version": "1.4.1",
      "resolved": "https://registry.npmjs.org/minipass-fetch/-/minipass-fetch-1.4.1.tgz",
      "integrity": "sha512-CGH1eblLq26Y15+Azk7ey4xh0J/XfJfrCox5LDJiKqI2Q2iwOLOKrlmIaODiSQS8d18jalF6y2K2ePUm0CmShw==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "minipass": "^3.1.0",
        "minipass-sized": "^1.0.3",
        "minizlib": "^2.0.0"
      },
      "engines": {
        "node": ">=8"
      },
      "optionalDependencies": {
        "encoding": "^0.1.12"
      }
    },
    "node_modules/minipass-flush": {
      "version": "1.0.5",
      "resolved": "https://registry.npmjs.org/minipass-flush/-/minipass-flush-1.0.5.tgz",
      "integrity": "sha512-JmQSYYpPUqX5Jyn1mXaRwOda1uQ8HP5KAT/oDSLCzt1BYRhQU0/hDtsB1ufZfEEzMZ9aAVmsBw8+FWsIXlClWw==",
      "license": "ISC",
      "optional": true,
      "dependencies": {
        "minipass": "^3.0.0"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/minipass-pipeline": {
      "version": "1.2.4",
      "resolved": "https://registry.npmjs.org/minipass-pipeline/-/minipass-pipeline-1.2.4.tgz",
      "integrity": "sha512-xuIq7cIOt09RPRJ19gdi4b+RiNvDFYe5JH+ggNvBqGqpQXcru3PcRmOZuHBKWK1Txf9+cQ+HMVN4d6z46LZP7A==",
      "license": "ISC",
      "optional": true,
      "dependencies": {
        "minipass": "^3.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/minipass-sized": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/minipass-sized/-/minipass-sized-1.0.3.tgz",
      "integrity": "sha512-MbkQQ2CTiBMlA2Dm/5cY+9SWFEN8pzzOXi6rlM5Xxq0Yqbda5ZQy9sU75a673FE9ZK0Zsbr6Y5iP6u9nktfg2g==",
      "license": "ISC",
      "optional": true,
      "dependencies": {
        "minipass": "^3.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/minizlib": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/minizlib/-/minizlib-2.1.2.tgz",
      "integrity": "sha512-bAxsR8BVfj60DWXHE3u30oHzfl4G7khkSuPW+qvpd7jFRHm7dLxOjUk1EHACJ/hxLY8phGJ0YhYHZo7jil7Qdg==",
      "license": "MIT",
      "dependencies": {
        "minipass": "^3.0.0",
        "yallist": "^4.0.0"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/mkdirp": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/mkdirp/-/mkdirp-1.0.4.tgz",
      "integrity": "sha512-vVqVZQyf3WLx2Shd0qJ9xuvqgAyKPLAiqITEtqW0oIUjzo3PePDd6fW9iFz30ef7Ysp/oiWqbhszeGWW2T6Gzw==",
      "license": "MIT",
      "bin": {
        "mkdirp": "bin/cmd.js"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/mkdirp-classic": {
      "version": "0.5.3",
      "resolved": "https://registry.npmjs.org/mkdirp-classic/-/mkdirp-classic-0.5.3.tgz",
      "integrity": "sha512-gKLcREMhtuZRwRAfqP3RFW+TK4JqApVBtOIftVgjuABpAtpxhPGaDcfvbhNvD0B8iD1oUr/txX35NjcaY6Ns/A==",
      "license": "MIT"
    },
    "node_modules/ms": {
      "version": "2.1.3",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
      "license": "MIT"
    },
    "node_modules/nanoid": {
      "version": "3.3.11",
      "resolved": "https://registry.npmjs.org/nanoid/-/nanoid-3.3.11.tgz",
      "integrity": "sha512-N8SpfPUnUp1bK+PMYW8qSWdl9U+wwNWI4QKxOYDy9JAro3WMX7p2OeVRF9v+347pnakNevPmiHhNmZ2HbFA76w==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "MIT",
      "bin": {
        "nanoid": "bin/nanoid.cjs"
      },
      "engines": {
        "node": "^10 || ^12 || ^13.7 || ^14 || >=15.0.1"
      }
    },
    "node_modules/napi-build-utils": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/napi-build-utils/-/napi-build-utils-2.0.0.tgz",
      "integrity": "sha512-GEbrYkbfF7MoNaoh2iGG84Mnf/WZfB0GdGEsM8wz7Expx/LlWf5U8t9nvJKXSp3qr5IsEbK04cBGhol/KwOsWA==",
      "license": "MIT"
    },
    "node_modules/negotiator": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/negotiator/-/negotiator-1.0.0.tgz",
      "integrity": "sha512-8Ofs/AUQh8MaEcrlq5xOX0CQ9ypTF5dl78mjlMNfOK08fzpgTHQRQPBxcPlEtIw0yRpws+Zo/3r+5WRby7u3Gg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/next": {
      "version": "15.3.2",
      "resolved": "https://registry.npmjs.org/next/-/next-15.3.2.tgz",
      "integrity": "sha512-CA3BatMyHkxZ48sgOCLdVHjFU36N7TF1HhqAHLFOkV6buwZnvMI84Cug8xD56B9mCuKrqXnLn94417GrZ/jjCQ==",
      "license": "MIT",
      "dependencies": {
        "@next/env": "15.3.2",
        "@swc/counter": "0.1.3",
        "@swc/helpers": "0.5.15",
        "busboy": "1.6.0",
        "caniuse-lite": "^1.0.30001579",
        "postcss": "8.4.31",
        "styled-jsx": "5.1.6"
      },
      "bin": {
        "next": "dist/bin/next"
      },
      "engines": {
        "node": "^18.18.0 || ^19.8.0 || >= 20.0.0"
      },
      "optionalDependencies": {
        "@next/swc-darwin-arm64": "15.3.2",
        "@next/swc-darwin-x64": "15.3.2",
        "@next/swc-linux-arm64-gnu": "15.3.2",
        "@next/swc-linux-arm64-musl": "15.3.2",
        "@next/swc-linux-x64-gnu": "15.3.2",
        "@next/swc-linux-x64-musl": "15.3.2",
        "@next/swc-win32-arm64-msvc": "15.3.2",
        "@next/swc-win32-x64-msvc": "15.3.2",
        "sharp": "^0.34.1"
      },
      "peerDependencies": {
        "@opentelemetry/api": "^1.1.0",
        "@playwright/test": "^1.41.2",
        "babel-plugin-react-compiler": "*",
        "react": "^18.2.0 || 19.0.0-rc-de68d2f4-20241204 || ^19.0.0",
        "react-dom": "^18.2.0 || 19.0.0-rc-de68d2f4-20241204 || ^19.0.0",
        "sass": "^1.3.0"
      },
      "peerDependenciesMeta": {
        "@opentelemetry/api": {
          "optional": true
        },
        "@playwright/test": {
          "optional": true
        },
        "babel-plugin-react-compiler": {
          "optional": true
        },
        "sass": {
          "optional": true
        }
      }
    },
    "node_modules/next-auth": {
      "version": "4.24.11",
      "resolved": "https://registry.npmjs.org/next-auth/-/next-auth-4.24.11.tgz",
      "integrity": "sha512-pCFXzIDQX7xmHFs4KVH4luCjaCbuPRtZ9oBUjUhOk84mZ9WVPf94n87TxYI4rSRf9HmfHEF8Yep3JrYDVOo3Cw==",
      "license": "ISC",
      "dependencies": {
        "@babel/runtime": "^7.20.13",
        "@panva/hkdf": "^1.0.2",
        "cookie": "^0.7.0",
        "jose": "^4.15.5",
        "oauth": "^0.9.15",
        "openid-client": "^5.4.0",
        "preact": "^10.6.3",
        "preact-render-to-string": "^5.1.19",
        "uuid": "^8.3.2"
      },
      "peerDependencies": {
        "@auth/core": "0.34.2",
        "next": "^12.2.5 || ^13 || ^14 || ^15",
        "nodemailer": "^6.6.5",
        "react": "^17.0.2 || ^18 || ^19",
        "react-dom": "^17.0.2 || ^18 || ^19"
      },
      "peerDependenciesMeta": {
        "@auth/core": {
          "optional": true
        },
        "nodemailer": {
          "optional": true
        }
      }
    },
    "node_modules/next-intl": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/next-intl/-/next-intl-4.1.0.tgz",
      "integrity": "sha512-JNJRjc7sdnfUxhZmGcvzDszZ60tQKrygV/VLsgzXhnJDxQPn1cN2rVpc53adA1SvBJwPK2O6Sc6b4gYSILjCzw==",
      "funding": [
        {
          "type": "individual",
          "url": "https://github.com/sponsors/amannn"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "@formatjs/intl-localematcher": "^0.5.4",
        "negotiator": "^1.0.0",
        "use-intl": "^4.1.0"
      },
      "peerDependencies": {
        "next": "^12.0.0 || ^13.0.0 || ^14.0.0 || ^15.0.0",
        "react": "^16.8.0 || ^17.0.0 || ^18.0.0 || >=19.0.0-rc <19.0.0 || ^19.0.0",
        "typescript": "^5.0.0"
      },
      "peerDependenciesMeta": {
        "typescript": {
          "optional": true
        }
      }
    },
    "node_modules/node-abi": {
      "version": "3.75.0",
      "resolved": "https://registry.npmjs.org/node-abi/-/node-abi-3.75.0.tgz",
      "integrity": "sha512-OhYaY5sDsIka7H7AtijtI9jwGYLyl29eQn/W623DiN/MIv5sUqc4g7BIDThX+gb7di9f6xK02nkp8sdfFWZLTg==",
      "license": "MIT",
      "dependencies": {
        "semver": "^7.3.5"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/node-addon-api": {
      "version": "7.1.1",
      "resolved": "https://registry.npmjs.org/node-addon-api/-/node-addon-api-7.1.1.tgz",
      "integrity": "sha512-5m3bsyrjFWE1xf7nz7YXdN4udnVtXK6/Yfgn5qnahL6bCkf2yKt4k3nuTKAtT4r3IG8JNR2ncsIMdZuAzJjHQQ==",
      "license": "MIT"
    },
    "node_modules/node-gyp": {
      "version": "8.4.1",
      "resolved": "https://registry.npmjs.org/node-gyp/-/node-gyp-8.4.1.tgz",
      "integrity": "sha512-olTJRgUtAb/hOXG0E93wZDs5YiJlgbXxTwQAFHyNlRsXQnYzUaF2aGgujZbw+hR8aF4ZG/rST57bWMWD16jr9w==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "env-paths": "^2.2.0",
        "glob": "^7.1.4",
        "graceful-fs": "^4.2.6",
        "make-fetch-happen": "^9.1.0",
        "nopt": "^5.0.0",
        "npmlog": "^6.0.0",
        "rimraf": "^3.0.2",
        "semver": "^7.3.5",
        "tar": "^6.1.2",
        "which": "^2.0.2"
      },
      "bin": {
        "node-gyp": "bin/node-gyp.js"
      },
      "engines": {
        "node": ">= 10.12.0"
      }
    },
    "node_modules/node-gyp/node_modules/env-paths": {
      "version": "2.2.1",
      "resolved": "https://registry.npmjs.org/env-paths/-/env-paths-2.2.1.tgz",
      "integrity": "sha512-+h1lkLKhZMTYjog1VEpJNG7NZJWcuc2DDk/qsqSTRRCOXiLjeQ1d1/udrUGhqMxUgAlwKNZ0cf2uqan5GLuS2A==",
      "license": "MIT",
      "optional": true,
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/node-machine-id": {
      "version": "1.1.12",
      "resolved": "https://registry.npmjs.org/node-machine-id/-/node-machine-id-1.1.12.tgz",
      "integrity": "sha512-QNABxbrPa3qEIfrE6GOJ7BYIuignnJw7iQ2YPbc3Nla1HzRJjXzZOiikfF8m7eAMfichLt3M4VgLOetqgDmgGQ==",
      "license": "MIT"
    },
    "node_modules/nopt": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/nopt/-/nopt-5.0.0.tgz",
      "integrity": "sha512-Tbj67rffqceeLpcRXrT7vKAN8CwfPeIBgM7E6iBkmKLV7bEMwpGgYLGv0jACUsECaa/vuxP0IjEont6umdMgtQ==",
      "license": "ISC",
      "optional": true,
      "dependencies": {
        "abbrev": "1"
      },
      "bin": {
        "nopt": "bin/nopt.js"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/npmlog": {
      "version": "6.0.2",
      "resolved": "https://registry.npmjs.org/npmlog/-/npmlog-6.0.2.tgz",
      "integrity": "sha512-/vBvz5Jfr9dT/aFWd0FIRf+T/Q2WBsLENygUaFUqstqsycmZAP/t5BvFJTK0viFmSUxiUKTUplWy5vt+rvKIxg==",
      "deprecated": "This package is no longer supported.",
      "license": "ISC",
      "optional": true,
      "dependencies": {
        "are-we-there-yet": "^3.0.0",
        "console-control-strings": "^1.1.0",
        "gauge": "^4.0.3",
        "set-blocking": "^2.0.0"
      },
      "engines": {
        "node": "^12.13.0 || ^14.15.0 || >=16.0.0"
      }
    },
    "node_modules/oauth": {
      "version": "0.9.15",
      "resolved": "https://registry.npmjs.org/oauth/-/oauth-0.9.15.tgz",
      "integrity": "sha512-a5ERWK1kh38ExDEfoO6qUHJb32rd7aYmPHuyCu3Fta/cnICvYmgd2uhuKXvPD+PXB+gCEYYEaQdIRAjCOwAKNA==",
      "license": "MIT"
    },
    "node_modules/oauth4webapi": {
      "version": "2.17.0",
      "resolved": "https://registry.npmjs.org/oauth4webapi/-/oauth4webapi-2.17.0.tgz",
      "integrity": "sha512-lbC0Z7uzAFNFyzEYRIC+pkSVvDHJTbEW+dYlSBAlCYDe6RxUkJ26bClhk8ocBZip1wfI9uKTe0fm4Ib4RHn6uQ==",
      "license": "MIT",
      "optional": true,
      "peer": true,
      "funding": {
        "url": "https://github.com/sponsors/panva"
      }
    },
    "node_modules/object-assign": {
      "version": "4.1.1",
      "resolved": "https://registry.npmjs.org/object-assign/-/object-assign-4.1.1.tgz",
      "integrity": "sha512-rJgTQnkUnH1sFw8yT6VSU3zD3sWmu6sZhIseY8VX+GRu3P6F7Fu+JNDoXfklElbLJSnc3FUQHVe4cU5hj+BcUg==",
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/object-hash": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/object-hash/-/object-hash-2.2.0.tgz",
      "integrity": "sha512-gScRMn0bS5fH+IuwyIFgnh9zBdo4DV+6GhygmWM9HyNJSgS0hScp1f5vjtm7oIIOiT9trXrShAkLFSc2IqKNgw==",
      "license": "MIT",
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/oidc-token-hash": {
      "version": "5.1.0",
      "resolved": "https://registry.npmjs.org/oidc-token-hash/-/oidc-token-hash-5.1.0.tgz",
      "integrity": "sha512-y0W+X7Ppo7oZX6eovsRkuzcSM40Bicg2JEJkDJ4irIt1wsYAP5MLSNv+QAogO8xivMffw/9OvV3um1pxXgt1uA==",
      "license": "MIT",
      "engines": {
        "node": "^10.13.0 || >=12.0.0"
      }
    },
    "node_modules/once": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/once/-/once-1.4.0.tgz",
      "integrity": "sha512-lNaJgI+2Q5URQBkccEKHTQOPaXdUxnZZElQTZY0MFUAuaEqe1E+Nyvgdz/aIyNi6Z9MzO5dv1H8n58/GELp3+w==",
      "license": "ISC",
      "dependencies": {
        "wrappy": "1"
      }
    },
    "node_modules/openid-client": {
      "version": "5.7.1",
      "resolved": "https://registry.npmjs.org/openid-client/-/openid-client-5.7.1.tgz",
      "integrity": "sha512-jDBPgSVfTnkIh71Hg9pRvtJc6wTwqjRkN88+gCFtYWrlP4Yx2Dsrow8uPi3qLr/aeymPF3o2+dS+wOpglK04ew==",
      "license": "MIT",
      "dependencies": {
        "jose": "^4.15.9",
        "lru-cache": "^6.0.0",
        "object-hash": "^2.2.0",
        "oidc-token-hash": "^5.0.3"
      },
      "funding": {
        "url": "https://github.com/sponsors/panva"
      }
    },
    "node_modules/p-map": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/p-map/-/p-map-4.0.0.tgz",
      "integrity": "sha512-/bjOqmgETBYB5BoEeGVea8dmvHb2m9GLy1E9W43yeyfP6QQCZGFNa+XRceJEuDB6zqr+gKpIAmlLebMpykw/MQ==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "aggregate-error": "^3.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/parent-module": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/parent-module/-/parent-module-1.0.1.tgz",
      "integrity": "sha512-GQ2EWRpQV8/o+Aw8YqtfZZPfNRWZYkbidE9k5rpl/hC3vtHHBfGm2Ifi6qWV+coDGkrUKZAxE3Lot5kcsRlh+g==",
      "license": "MIT",
      "dependencies": {
        "callsites": "^3.0.0"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/parse-json": {
      "version": "5.2.0",
      "resolved": "https://registry.npmjs.org/parse-json/-/parse-json-5.2.0.tgz",
      "integrity": "sha512-ayCKvm/phCGxOkYRSCM82iDwct8/EonSEgCSxWxD7ve6jHggsFl4fZVQBPRNgQoKiuV/odhFrGzQXZwbifC8Rg==",
      "license": "MIT",
      "dependencies": {
        "@babel/code-frame": "^7.0.0",
        "error-ex": "^1.3.1",
        "json-parse-even-better-errors": "^2.3.0",
        "lines-and-columns": "^1.1.6"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/path-is-absolute": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/path-is-absolute/-/path-is-absolute-1.0.1.tgz",
      "integrity": "sha512-AVbw3UJ2e9bq64vSaS9Am0fje1Pa8pbGqTTsmXfaIiMpnr5DlDhfJOuLj9Sf95ZPVDAUerDfEk88MPmPe7UCQg==",
      "license": "MIT",
      "optional": true,
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/path-parse": {
      "version": "1.0.7",
      "resolved": "https://registry.npmjs.org/path-parse/-/path-parse-1.0.7.tgz",
      "integrity": "sha512-LDJzPVEEEPR+y48z93A0Ed0yXb8pAByGWo/k5YYdYgpY2/2EsOsksJrq7lOHxryrVOn1ejG6oAp8ahvOIQD8sw==",
      "license": "MIT"
    },
    "node_modules/path-type": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/path-type/-/path-type-4.0.0.tgz",
      "integrity": "sha512-gDKb8aZMDeD/tZWs9P6+q0J9Mwkdl6xMV8TjnGP3qJVJ06bdMgkbBlLU8IdfOsIsFz2BW1rNVT3XuNEl8zPAvw==",
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/picocolors": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/picocolors/-/picocolors-1.1.1.tgz",
      "integrity": "sha512-xceH2snhtb5M9liqDsmEw56le376mTZkEX/jEb/RxNFyegNul7eNslCXP9FDj/Lcu0X8KEyMceP2ntpaHrDEVA==",
      "license": "ISC"
    },
    "node_modules/postcss": {
      "version": "8.4.31",
      "resolved": "https://registry.npmjs.org/postcss/-/postcss-8.4.31.tgz",
      "integrity": "sha512-PS08Iboia9mts/2ygV3eLpY5ghnUcfLV/EXTOW1E2qYxJKGGBUtNjN76FYHnMs36RmARn41bC0AZmn+rR0OVpQ==",
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/postcss/"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/postcss"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "nanoid": "^3.3.6",
        "picocolors": "^1.0.0",
        "source-map-js": "^1.0.2"
      },
      "engines": {
        "node": "^10 || ^12 || >=14"
      }
    },
    "node_modules/preact": {
      "version": "10.24.3",
      "resolved": "https://registry.npmjs.org/preact/-/preact-10.24.3.tgz",
      "integrity": "sha512-Z2dPnBnMUfyQfSQ+GBdsGa16hz35YmLmtTLhM169uW944hYL6xzTYkJjC07j+Wosz733pMWx0fgON3JNw1jJQA==",
      "license": "MIT",
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/preact"
      }
    },
    "node_modules/preact-render-to-string": {
      "version": "5.2.6",
      "resolved": "https://registry.npmjs.org/preact-render-to-string/-/preact-render-to-string-5.2.6.tgz",
      "integrity": "sha512-JyhErpYOvBV1hEPwIxc/fHWXPfnEGdRKxc8gFdAZ7XV4tlzyzG847XAyEZqoDnynP88akM4eaHcSOzNcLWFguw==",
      "license": "MIT",
      "dependencies": {
        "pretty-format": "^3.8.0"
      },
      "peerDependencies": {
        "preact": ">=10"
      }
    },
    "node_modules/prebuild-install": {
      "version": "7.1.3",
      "resolved": "https://registry.npmjs.org/prebuild-install/-/prebuild-install-7.1.3.tgz",
      "integrity": "sha512-8Mf2cbV7x1cXPUILADGI3wuhfqWvtiLA1iclTDbFRZkgRQS0NqsPZphna9V+HyTEadheuPmjaJMsbzKQFOzLug==",
      "license": "MIT",
      "dependencies": {
        "detect-libc": "^2.0.0",
        "expand-template": "^2.0.3",
        "github-from-package": "0.0.0",
        "minimist": "^1.2.3",
        "mkdirp-classic": "^0.5.3",
        "napi-build-utils": "^2.0.0",
        "node-abi": "^3.3.0",
        "pump": "^3.0.0",
        "rc": "^1.2.7",
        "simple-get": "^4.0.0",
        "tar-fs": "^2.0.0",
        "tunnel-agent": "^0.6.0"
      },
      "bin": {
        "prebuild-install": "bin.js"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/pretty-format": {
      "version": "3.8.0",
      "resolved": "https://registry.npmjs.org/pretty-format/-/pretty-format-3.8.0.tgz",
      "integrity": "sha512-WuxUnVtlWL1OfZFQFuqvnvs6MiAGk9UNsBostyBOB0Is9wb5uRESevA6rnl/rkksXaGX3GzZhPup5d6Vp1nFew==",
      "license": "MIT"
    },
    "node_modules/prisma": {
      "version": "6.8.2",
      "resolved": "https://registry.npmjs.org/prisma/-/prisma-6.8.2.tgz",
      "integrity": "sha512-JNricTXQxzDtRS7lCGGOB4g5DJ91eg3nozdubXze3LpcMl1oWwcFddrj++Up3jnRE6X/3gB/xz3V+ecBk/eEGA==",
      "hasInstallScript": true,
      "license": "Apache-2.0",
      "dependencies": {
        "@prisma/config": "6.8.2",
        "@prisma/engines": "6.8.2"
      },
      "bin": {
        "prisma": "build/index.js"
      },
      "engines": {
        "node": ">=18.18"
      },
      "peerDependencies": {
        "typescript": ">=5.1.0"
      },
      "peerDependenciesMeta": {
        "typescript": {
          "optional": true
        }
      }
    },
    "node_modules/promise-inflight": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/promise-inflight/-/promise-inflight-1.0.1.tgz",
      "integrity": "sha512-6zWPyEOFaQBJYcGMHBKTKJ3u6TBsnMFOIZSa6ce1e/ZrrsOlnHRHbabMjLiBYKp+n44X9eUI6VUPaukCXHuG4g==",
      "license": "ISC",
      "optional": true
    },
    "node_modules/promise-retry": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/promise-retry/-/promise-retry-2.0.1.tgz",
      "integrity": "sha512-y+WKFlBR8BGXnsNlIHFGPZmyDf3DFMoLhaflAnyZgV6rG6xu+JwesTo2Q9R6XwYmtmwAFCkAk3e35jEdoeh/3g==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "err-code": "^2.0.2",
        "retry": "^0.12.0"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/prop-types": {
      "version": "15.8.1",
      "resolved": "https://registry.npmjs.org/prop-types/-/prop-types-15.8.1.tgz",
      "integrity": "sha512-oj87CgZICdulUohogVAR7AjlC0327U4el4L6eAvOqCeudMDVU0NThNaV+b9Df4dXgSP1gXMTnPdhfe/2qDH5cg==",
      "license": "MIT",
      "dependencies": {
        "loose-envify": "^1.4.0",
        "object-assign": "^4.1.1",
        "react-is": "^16.13.1"
      }
    },
    "node_modules/prop-types/node_modules/react-is": {
      "version": "16.13.1",
      "resolved": "https://registry.npmjs.org/react-is/-/react-is-16.13.1.tgz",
      "integrity": "sha512-24e6ynE2H+OKt4kqsOvNd8kBpV65zoxbA4BVsEOB3ARVWQki/DHzaUoC5KuON/BiccDaCCTZBuOcfZs70kR8bQ==",
      "license": "MIT"
    },
    "node_modules/pump": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/pump/-/pump-3.0.2.tgz",
      "integrity": "sha512-tUPXtzlGM8FE3P0ZL6DVs/3P58k9nk8/jZeQCurTJylQA8qFYzHFfhBJkuqyE0FifOsQ0uKWekiZ5g8wtr28cw==",
      "license": "MIT",
      "dependencies": {
        "end-of-stream": "^1.1.0",
        "once": "^1.3.1"
      }
    },
    "node_modules/rc": {
      "version": "1.2.8",
      "resolved": "https://registry.npmjs.org/rc/-/rc-1.2.8.tgz",
      "integrity": "sha512-y3bGgqKj3QBdxLbLkomlohkvsA8gdAiUQlSBJnBhfn+BPxg4bc62d8TcBW15wavDfgexCgccckhcZvywyQYPOw==",
      "license": "(BSD-2-Clause OR MIT OR Apache-2.0)",
      "dependencies": {
        "deep-extend": "^0.6.0",
        "ini": "~1.3.0",
        "minimist": "^1.2.0",
        "strip-json-comments": "~2.0.1"
      },
      "bin": {
        "rc": "cli.js"
      }
    },
    "node_modules/react": {
      "version": "19.1.0",
      "resolved": "https://registry.npmjs.org/react/-/react-19.1.0.tgz",
      "integrity": "sha512-FS+XFBNvn3GTAWq26joslQgWNoFu08F4kl0J4CgdNKADkdSGXQyTCnKteIAJy96Br6YbpEU1LSzV5dYtjMkMDg==",
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/react-dom": {
      "version": "19.1.0",
      "resolved": "https://registry.npmjs.org/react-dom/-/react-dom-19.1.0.tgz",
      "integrity": "sha512-Xs1hdnE+DyKgeHJeJznQmYMIBG3TKIHJJT95Q58nHLSrElKlGQqDTR2HQ9fx5CN/Gk6Vh/kupBTDLU11/nDk/g==",
      "license": "MIT",
      "dependencies": {
        "scheduler": "^0.26.0"
      },
      "peerDependencies": {
        "react": "^19.1.0"
      }
    },
    "node_modules/react-is": {
      "version": "19.1.0",
      "resolved": "https://registry.npmjs.org/react-is/-/react-is-19.1.0.tgz",
      "integrity": "sha512-Oe56aUPnkHyyDxxkvqtd7KkdQP5uIUfHxd5XTb3wE9d/kRnZLmKbDB0GWk919tdQ+mxxPtG6EAs6RMT6i1qtHg==",
      "license": "MIT"
    },
    "node_modules/react-smooth": {
      "version": "4.0.4",
      "resolved": "https://registry.npmjs.org/react-smooth/-/react-smooth-4.0.4.tgz",
      "integrity": "sha512-gnGKTpYwqL0Iii09gHobNolvX4Kiq4PKx6eWBCYYix+8cdw+cGo3do906l1NBPKkSWx1DghC1dlWG9L2uGd61Q==",
      "license": "MIT",
      "dependencies": {
        "fast-equals": "^5.0.1",
        "prop-types": "^15.8.1",
        "react-transition-group": "^4.4.5"
      },
      "peerDependencies": {
        "react": "^16.8.0 || ^17.0.0 || ^18.0.0 || ^19.0.0",
        "react-dom": "^16.8.0 || ^17.0.0 || ^18.0.0 || ^19.0.0"
      }
    },
    "node_modules/react-transition-group": {
      "version": "4.4.5",
      "resolved": "https://registry.npmjs.org/react-transition-group/-/react-transition-group-4.4.5.tgz",
      "integrity": "sha512-pZcd1MCJoiKiBR2NRxeCRg13uCXbydPnmB4EOeRrY7480qNWO8IIgQG6zlDkm6uRMsURXPuKq0GWtiM59a5Q6g==",
      "license": "BSD-3-Clause",
      "dependencies": {
        "@babel/runtime": "^7.5.5",
        "dom-helpers": "^5.0.1",
        "loose-envify": "^1.4.0",
        "prop-types": "^15.6.2"
      },
      "peerDependencies": {
        "react": ">=16.6.0",
        "react-dom": ">=16.6.0"
      }
    },
    "node_modules/readable-stream": {
      "version": "3.6.2",
      "resolved": "https://registry.npmjs.org/readable-stream/-/readable-stream-3.6.2.tgz",
      "integrity": "sha512-9u/sniCrY3D5WdsERHzHE4G2YCXqoG5FTHUiCC4SIbr6XcLZBY05ya9EKjYek9O5xOAwjGq+1JdGBAS7Q9ScoA==",
      "license": "MIT",
      "dependencies": {
        "inherits": "^2.0.3",
        "string_decoder": "^1.1.1",
        "util-deprecate": "^1.0.1"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/recharts": {
      "version": "2.15.3",
      "resolved": "https://registry.npmjs.org/recharts/-/recharts-2.15.3.tgz",
      "integrity": "sha512-EdOPzTwcFSuqtvkDoaM5ws/Km1+WTAO2eizL7rqiG0V2UVhTnz0m7J2i0CjVPUCdEkZImaWvXLbZDS2H5t6GFQ==",
      "license": "MIT",
      "dependencies": {
        "clsx": "^2.0.0",
        "eventemitter3": "^4.0.1",
        "lodash": "^4.17.21",
        "react-is": "^18.3.1",
        "react-smooth": "^4.0.4",
        "recharts-scale": "^0.4.4",
        "tiny-invariant": "^1.3.1",
        "victory-vendor": "^36.6.8"
      },
      "engines": {
        "node": ">=14"
      },
      "peerDependencies": {
        "react": "^16.0.0 || ^17.0.0 || ^18.0.0 || ^19.0.0",
        "react-dom": "^16.0.0 || ^17.0.0 || ^18.0.0 || ^19.0.0"
      }
    },
    "node_modules/recharts-scale": {
      "version": "0.4.5",
      "resolved": "https://registry.npmjs.org/recharts-scale/-/recharts-scale-0.4.5.tgz",
      "integrity": "sha512-kivNFO+0OcUNu7jQquLXAxz1FIwZj8nrj+YkOKc5694NbjCvcT6aSZiIzNzd2Kul4o4rTto8QVR9lMNtxD4G1w==",
      "license": "MIT",
      "dependencies": {
        "decimal.js-light": "^2.4.1"
      }
    },
    "node_modules/recharts/node_modules/react-is": {
      "version": "18.3.1",
      "resolved": "https://registry.npmjs.org/react-is/-/react-is-18.3.1.tgz",
      "integrity": "sha512-/LLMVyas0ljjAtoYiPqYiL8VWXzUUdThrmU5+n20DZv+a+ClRoevUzw5JxU+Ieh5/c87ytoTBV9G1FiKfNJdmg==",
      "license": "MIT"
    },
    "node_modules/require-from-string": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/require-from-string/-/require-from-string-2.0.2.tgz",
      "integrity": "sha512-Xf0nWe6RseziFMu+Ap9biiUbmplq6S9/p+7w7YXP/JBHhrUDDUhwa+vANyubuqfZWTveU//DYVGsDG7RKL/vEw==",
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/resolve": {
      "version": "1.22.10",
      "resolved": "https://registry.npmjs.org/resolve/-/resolve-1.22.10.tgz",
      "integrity": "sha512-NPRy+/ncIMeDlTAsuqwKIiferiawhefFJtkNSW0qZJEqMEb+qBt/77B/jGeeek+F0uOeN05CDa6HXbbIgtVX4w==",
      "license": "MIT",
      "dependencies": {
        "is-core-module": "^2.16.0",
        "path-parse": "^1.0.7",
        "supports-preserve-symlinks-flag": "^1.0.0"
      },
      "bin": {
        "resolve": "bin/resolve"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/resolve-from": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/resolve-from/-/resolve-from-4.0.0.tgz",
      "integrity": "sha512-pb/MYmXstAkysRFx8piNI1tGFNQIFA3vkE3Gq4EuA1dF6gHp/+vgZqsCGJapvy8N3Q+4o7FwvquPJcnZ7RYy4g==",
      "license": "MIT",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/retry": {
      "version": "0.12.0",
      "resolved": "https://registry.npmjs.org/retry/-/retry-0.12.0.tgz",
      "integrity": "sha512-9LkiTwjUh6rT555DtE9rTX+BKByPfrMzEAtnlEtdEwr3Nkffwiihqe2bWADg+OQRjt9gl6ICdmB/ZFDCGAtSow==",
      "license": "MIT",
      "optional": true,
      "engines": {
        "node": ">= 4"
      }
    },
    "node_modules/rimraf": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/rimraf/-/rimraf-3.0.2.tgz",
      "integrity": "sha512-JZkJMZkAGFFPP2YqXZXPbMlMBgsxzE8ILs4lMIX/2o0L9UBw9O/Y3o6wFw/i9YLapcUJWwqbi3kdxIPdC62TIA==",
      "deprecated": "Rimraf versions prior to v4 are no longer supported",
      "license": "ISC",
      "optional": true,
      "dependencies": {
        "glob": "^7.1.3"
      },
      "bin": {
        "rimraf": "bin.js"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      }
    },
    "node_modules/safe-buffer": {
      "version": "5.2.1",
      "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.2.1.tgz",
      "integrity": "sha512-rp3So07KcdmmKbGvgaNxQSJr7bGVSVk5S9Eq1F+ppbRo70+YeaDxkw5Dd8NPN+GD6bjnYm2VuPuCXmpuYvmCXQ==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ],
      "license": "MIT"
    },
    "node_modules/safer-buffer": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/safer-buffer/-/safer-buffer-2.1.2.tgz",
      "integrity": "sha512-YZo3K82SD7Riyi0E1EQPojLz7kpepnSQI9IyPbHHg1XXXevb5dJI7tpyN2ADxGcQbHG7vcyRHk0cbwqcQriUtg==",
      "license": "MIT",
      "optional": true
    },
    "node_modules/scheduler": {
      "version": "0.26.0",
      "resolved": "https://registry.npmjs.org/scheduler/-/scheduler-0.26.0.tgz",
      "integrity": "sha512-NlHwttCI/l5gCPR3D1nNXtWABUmBwvZpEQiD4IXSbIDq8BzLIK/7Ir5gTFSGZDUu37K5cMNp0hFtzO38sC7gWA==",
      "license": "MIT"
    },
    "node_modules/semver": {
      "version": "7.7.2",
      "resolved": "https://registry.npmjs.org/semver/-/semver-7.7.2.tgz",
      "integrity": "sha512-RF0Fw+rO5AMf9MAyaRXI4AV0Ulj5lMHqVxxdSgiVbixSCXoEmmX/jk0CuJw4+3SqroYO9VoUh+HcuJivvtJemA==",
      "license": "ISC",
      "bin": {
        "semver": "bin/semver.js"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/set-blocking": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/set-blocking/-/set-blocking-2.0.0.tgz",
      "integrity": "sha512-KiKBS8AnWGEyLzofFfmvKwpdPzqiy16LvQfK3yv/fVH7Bj13/wl3JSR1J+rfgRE9q7xUJK4qvgS8raSOeLUehw==",
      "license": "ISC",
      "optional": true
    },
    "node_modules/sharp": {
      "version": "0.34.2",
      "resolved": "https://registry.npmjs.org/sharp/-/sharp-0.34.2.tgz",
      "integrity": "sha512-lszvBmB9QURERtyKT2bNmsgxXK0ShJrL/fvqlonCo7e6xBF8nT8xU6pW+PMIbLsz0RxQk3rgH9kd8UmvOzlMJg==",
      "hasInstallScript": true,
      "license": "Apache-2.0",
      "optional": true,
      "dependencies": {
        "color": "^4.2.3",
        "detect-libc": "^2.0.4",
        "semver": "^7.7.2"
      },
      "engines": {
        "node": "^18.17.0 || ^20.3.0 || >=21.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/libvips"
      },
      "optionalDependencies": {
        "@img/sharp-darwin-arm64": "0.34.2",
        "@img/sharp-darwin-x64": "0.34.2",
        "@img/sharp-libvips-darwin-arm64": "1.1.0",
        "@img/sharp-libvips-darwin-x64": "1.1.0",
        "@img/sharp-libvips-linux-arm": "1.1.0",
        "@img/sharp-libvips-linux-arm64": "1.1.0",
        "@img/sharp-libvips-linux-ppc64": "1.1.0",
        "@img/sharp-libvips-linux-s390x": "1.1.0",
        "@img/sharp-libvips-linux-x64": "1.1.0",
        "@img/sharp-libvips-linuxmusl-arm64": "1.1.0",
        "@img/sharp-libvips-linuxmusl-x64": "1.1.0",
        "@img/sharp-linux-arm": "0.34.2",
        "@img/sharp-linux-arm64": "0.34.2",
        "@img/sharp-linux-s390x": "0.34.2",
        "@img/sharp-linux-x64": "0.34.2",
        "@img/sharp-linuxmusl-arm64": "0.34.2",
        "@img/sharp-linuxmusl-x64": "0.34.2",
        "@img/sharp-wasm32": "0.34.2",
        "@img/sharp-win32-arm64": "0.34.2",
        "@img/sharp-win32-ia32": "0.34.2",
        "@img/sharp-win32-x64": "0.34.2"
      }
    },
    "node_modules/signal-exit": {
      "version": "3.0.7",
      "resolved": "https://registry.npmjs.org/signal-exit/-/signal-exit-3.0.7.tgz",
      "integrity": "sha512-wnD2ZE+l+SPC/uoS0vXeE9L1+0wuaMqKlfz9AMUo38JsyLSBWSFcHR1Rri62LZc12vLr1gb3jl7iwQhgwpAbGQ==",
      "license": "ISC",
      "optional": true
    },
    "node_modules/simple-concat": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/simple-concat/-/simple-concat-1.0.1.tgz",
      "integrity": "sha512-cSFtAPtRhljv69IK0hTVZQ+OfE9nePi/rtJmw5UjHeVyVroEqJXP1sFztKUy1qU+xvz3u/sfYJLa947b7nAN2Q==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ],
      "license": "MIT"
    },
    "node_modules/simple-get": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/simple-get/-/simple-get-4.0.1.tgz",
      "integrity": "sha512-brv7p5WgH0jmQJr1ZDDfKDOSeWWg+OVypG99A/5vYGPqJ6pxiaHLy8nxtFjBA7oMa01ebA9gfh1uMCFqOuXxvA==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "decompress-response": "^6.0.0",
        "once": "^1.3.1",
        "simple-concat": "^1.0.0"
      }
    },
    "node_modules/simple-swizzle": {
      "version": "0.2.2",
      "resolved": "https://registry.npmjs.org/simple-swizzle/-/simple-swizzle-0.2.2.tgz",
      "integrity": "sha512-JA//kQgZtbuY83m+xT+tXJkmJncGMTFT+C+g2h2R9uxkYIrE2yy9sgmcLhCnw57/WSD+Eh3J97FPEDFnbXnDUg==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "is-arrayish": "^0.3.1"
      }
    },
    "node_modules/simple-swizzle/node_modules/is-arrayish": {
      "version": "0.3.2",
      "resolved": "https://registry.npmjs.org/is-arrayish/-/is-arrayish-0.3.2.tgz",
      "integrity": "sha512-eVRqCvVlZbuw3GrM63ovNSNAeA1K16kaR/LRY/92w0zxQ5/1YzwblUX652i4Xs9RwAGjW9d9y6X88t8OaAJfWQ==",
      "license": "MIT",
      "optional": true
    },
    "node_modules/smart-buffer": {
      "version": "4.2.0",
      "resolved": "https://registry.npmjs.org/smart-buffer/-/smart-buffer-4.2.0.tgz",
      "integrity": "sha512-94hK0Hh8rPqQl2xXc3HsaBoOXKV20MToPkcXvwbISWLEs+64sBq5kFgn2kJDHb1Pry9yrP0dxrCI9RRci7RXKg==",
      "license": "MIT",
      "optional": true,
      "engines": {
        "node": ">= 6.0.0",
        "npm": ">= 3.0.0"
      }
    },
    "node_modules/socks": {
      "version": "2.8.4",
      "resolved": "https://registry.npmjs.org/socks/-/socks-2.8.4.tgz",
      "integrity": "sha512-D3YaD0aRxR3mEcqnidIs7ReYJFVzWdd6fXJYUM8ixcQcJRGTka/b3saV0KflYhyVJXKhb947GndU35SxYNResQ==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "ip-address": "^9.0.5",
        "smart-buffer": "^4.2.0"
      },
      "engines": {
        "node": ">= 10.0.0",
        "npm": ">= 3.0.0"
      }
    },
    "node_modules/socks-proxy-agent": {
      "version": "6.2.1",
      "resolved": "https://registry.npmjs.org/socks-proxy-agent/-/socks-proxy-agent-6.2.1.tgz",
      "integrity": "sha512-a6KW9G+6B3nWZ1yB8G7pJwL3ggLy1uTzKAgCb7ttblwqdz9fMGJUuTy3uFzEP48FAs9FLILlmzDlE2JJhVQaXQ==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "agent-base": "^6.0.2",
        "debug": "^4.3.3",
        "socks": "^2.6.2"
      },
      "engines": {
        "node": ">= 10"
      }
    },
    "node_modules/source-map": {
      "version": "0.5.7",
      "resolved": "https://registry.npmjs.org/source-map/-/source-map-0.5.7.tgz",
      "integrity": "sha512-LbrmJOMUSdEVxIKvdcJzQC+nQhe8FUZQTXQy6+I75skNgn3OoQ0DZA8YnFa7gp8tqtL3KPf1kmo0R5DoApeSGQ==",
      "license": "BSD-3-Clause",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/source-map-js": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/source-map-js/-/source-map-js-1.2.1.tgz",
      "integrity": "sha512-UXWMKhLOwVKb728IUtQPXxfYU+usdybtUrK/8uGE8CQMvrhOpwvzDBwj0QhSL7MQc7vIsISBG8VQ8+IDQxpfQA==",
      "license": "BSD-3-Clause",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/sprintf-js": {
      "version": "1.1.3",
      "resolved": "https://registry.npmjs.org/sprintf-js/-/sprintf-js-1.1.3.tgz",
      "integrity": "sha512-Oo+0REFV59/rz3gfJNKQiBlwfHaSESl1pcGyABQsnnIfWOFt6JNj5gCog2U6MLZ//IGYD+nA8nI+mTShREReaA==",
      "license": "BSD-3-Clause",
      "optional": true
    },
    "node_modules/sqlite3": {
      "version": "5.1.7",
      "resolved": "https://registry.npmjs.org/sqlite3/-/sqlite3-5.1.7.tgz",
      "integrity": "sha512-GGIyOiFaG+TUra3JIfkI/zGP8yZYLPQ0pl1bH+ODjiX57sPhrLU5sQJn1y9bDKZUFYkX1crlrPfSYt0BKKdkog==",
      "hasInstallScript": true,
      "license": "BSD-3-Clause",
      "dependencies": {
        "bindings": "^1.5.0",
        "node-addon-api": "^7.0.0",
        "prebuild-install": "^7.1.1",
        "tar": "^6.1.11"
      },
      "optionalDependencies": {
        "node-gyp": "8.x"
      },
      "peerDependencies": {
        "node-gyp": "8.x"
      },
      "peerDependenciesMeta": {
        "node-gyp": {
          "optional": true
        }
      }
    },
    "node_modules/ssri": {
      "version": "8.0.1",
      "resolved": "https://registry.npmjs.org/ssri/-/ssri-8.0.1.tgz",
      "integrity": "sha512-97qShzy1AiyxvPNIkLWoGua7xoQzzPjQ0HAH4B0rWKo7SZ6USuPcrUiAFrws0UH8RrbWmgq3LMTObhPIHbbBeQ==",
      "license": "ISC",
      "optional": true,
      "dependencies": {
        "minipass": "^3.1.1"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/streamsearch": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/streamsearch/-/streamsearch-1.1.0.tgz",
      "integrity": "sha512-Mcc5wHehp9aXz1ax6bZUyY5afg9u2rv5cqQI3mRrYkGC8rW2hM02jWuwjtL++LS5qinSyhj2QfLyNsuc+VsExg==",
      "engines": {
        "node": ">=10.0.0"
      }
    },
    "node_modules/string_decoder": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/string_decoder/-/string_decoder-1.3.0.tgz",
      "integrity": "sha512-hkRX8U1WjJFd8LsDJ2yQ/wWWxaopEsABU1XfkM8A+j0+85JAGppt16cr1Whg6KIbb4okU6Mql6BOj+uup/wKeA==",
      "license": "MIT",
      "dependencies": {
        "safe-buffer": "~5.2.0"
      }
    },
    "node_modules/string-width": {
      "version": "4.2.3",
      "resolved": "https://registry.npmjs.org/string-width/-/string-width-4.2.3.tgz",
      "integrity": "sha512-wKyQRQpjJ0sIp62ErSZdGsjMJWsap5oRNihHhu6G7JVO/9jIB6UyevL+tXuOqrng8j/cxKTWyWUwvSTriiZz/g==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "emoji-regex": "^8.0.0",
        "is-fullwidth-code-point": "^3.0.0",
        "strip-ansi": "^6.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/strip-ansi": {
      "version": "6.0.1",
      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.1.tgz",
      "integrity": "sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "ansi-regex": "^5.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/strip-json-comments": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/strip-json-comments/-/strip-json-comments-2.0.1.tgz",
      "integrity": "sha512-4gB8na07fecVVkOI6Rs4e7T6NOTki5EmL7TUduTs6bu3EdnSycntVJ4re8kgZA+wx9IueI2Y11bfbgwtzuE0KQ==",
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/stubborn-fs": {
      "version": "1.2.5",
      "resolved": "https://registry.npmjs.org/stubborn-fs/-/stubborn-fs-1.2.5.tgz",
      "integrity": "sha512-H2N9c26eXjzL/S/K+i/RHHcFanE74dptvvjM8iwzwbVcWY/zjBbgRqF3K0DY4+OD+uTTASTBvDoxPDaPN02D7g=="
    },
    "node_modules/styled-jsx": {
      "version": "5.1.6",
      "resolved": "https://registry.npmjs.org/styled-jsx/-/styled-jsx-5.1.6.tgz",
      "integrity": "sha512-qSVyDTeMotdvQYoHWLNGwRFJHC+i+ZvdBRYosOFgC+Wg1vx4frN2/RG/NA7SYqqvKNLf39P2LSRA2pu6n0XYZA==",
      "license": "MIT",
      "dependencies": {
        "client-only": "0.0.1"
      },
      "engines": {
        "node": ">= 12.0.0"
      },
      "peerDependencies": {
        "react": ">= 16.8.0 || 17.x.x || ^18.0.0-0 || ^19.0.0-0"
      },
      "peerDependenciesMeta": {
        "@babel/core": {
          "optional": true
        },
        "babel-plugin-macros": {
          "optional": true
        }
      }
    },
    "node_modules/stylis": {
      "version": "4.2.0",
      "resolved": "https://registry.npmjs.org/stylis/-/stylis-4.2.0.tgz",
      "integrity": "sha512-Orov6g6BB1sDfYgzWfTHDOxamtX1bE/zo104Dh9e6fqJ3PooipYyfJ0pUmrZO2wAvO8YbEyeFrkV91XTsGMSrw==",
      "license": "MIT"
    },
    "node_modules/supports-preserve-symlinks-flag": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/supports-preserve-symlinks-flag/-/supports-preserve-symlinks-flag-1.0.0.tgz",
      "integrity": "sha512-ot0WnXS9fgdkgIcePe6RHNk1WA8+muPa6cSjeR3V8K27q9BB1rTE3R1p7Hv0z1ZyAc8s6Vvv8DIyWf681MAt0w==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/tar": {
      "version": "6.2.1",
      "resolved": "https://registry.npmjs.org/tar/-/tar-6.2.1.tgz",
      "integrity": "sha512-DZ4yORTwrbTj/7MZYq2w+/ZFdI6OZ/f9SFHR+71gIVUZhOQPHzVCLpvRnPgyaMpfWxxk/4ONva3GQSyNIKRv6A==",
      "license": "ISC",
      "dependencies": {
        "chownr": "^2.0.0",
        "fs-minipass": "^2.0.0",
        "minipass": "^5.0.0",
        "minizlib": "^2.1.1",
        "mkdirp": "^1.0.3",
        "yallist": "^4.0.0"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/tar-fs": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/tar-fs/-/tar-fs-2.1.2.tgz",
      "integrity": "sha512-EsaAXwxmx8UB7FRKqeozqEPop69DXcmYwTQwXvyAPF352HJsPdkVhvTaDPYqfNgruveJIJy3TA2l+2zj8LJIJA==",
      "license": "MIT",
      "dependencies": {
        "chownr": "^1.1.1",
        "mkdirp-classic": "^0.5.2",
        "pump": "^3.0.0",
        "tar-stream": "^2.1.4"
      }
    },
    "node_modules/tar-fs/node_modules/chownr": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/chownr/-/chownr-1.1.4.tgz",
      "integrity": "sha512-jJ0bqzaylmJtVnNgzTeSOs8DPavpbYgEr/b0YL8/2GO3xJEhInFmhKMUnEJQjZumK7KXGFhUy89PrsJWlakBVg==",
      "license": "ISC"
    },
    "node_modules/tar-stream": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/tar-stream/-/tar-stream-2.2.0.tgz",
      "integrity": "sha512-ujeqbceABgwMZxEJnk2HDY2DlnUZ+9oEcb1KzTVfYHio0UE6dG71n60d8D2I4qNvleWrrXpmjpt7vZeF1LnMZQ==",
      "license": "MIT",
      "dependencies": {
        "bl": "^4.0.3",
        "end-of-stream": "^1.4.1",
        "fs-constants": "^1.0.0",
        "inherits": "^2.0.3",
        "readable-stream": "^3.1.1"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/tar/node_modules/minipass": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/minipass/-/minipass-5.0.0.tgz",
      "integrity": "sha512-3FnjYuehv9k6ovOEbyOswadCDPX1piCfhV8ncmYtHOjuPwylVWsghTLo7rabjC3Rx5xD4HDx8Wm1xnMF7S5qFQ==",
      "license": "ISC",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/tiny-invariant": {
      "version": "1.3.3",
      "resolved": "https://registry.npmjs.org/tiny-invariant/-/tiny-invariant-1.3.3.tgz",
      "integrity": "sha512-+FbBPE1o9QAYvviau/qC5SE3caw21q3xkvWKBtja5vgqOWIHHJ3ioaq1VPfn/Szqctz2bU/oYeKd9/z5BL+PVg==",
      "license": "MIT"
    },
    "node_modules/tslib": {
      "version": "2.8.1",
      "resolved": "https://registry.npmjs.org/tslib/-/tslib-2.8.1.tgz",
      "integrity": "sha512-oJFu94HQb+KVduSUQL7wnpmqnfmLsOA/nAh6b6EH0wCEoK0/mPeXU6c3wKDV83MkOuHPRHtSXKKU99IBazS/2w==",
      "license": "0BSD"
    },
    "node_modules/tunnel-agent": {
      "version": "0.6.0",
      "resolved": "https://registry.npmjs.org/tunnel-agent/-/tunnel-agent-0.6.0.tgz",
      "integrity": "sha512-McnNiV1l8RYeY8tBgEpuodCC1mLUdbSN+CYBL7kJsJNInOP8UjDDEwdk6Mw60vdLLrr5NHKZhMAOSrR2NZuQ+w==",
      "license": "Apache-2.0",
      "dependencies": {
        "safe-buffer": "^5.0.1"
      },
      "engines": {
        "node": "*"
      }
    },
    "node_modules/type-fest": {
      "version": "2.19.0",
      "resolved": "https://registry.npmjs.org/type-fest/-/type-fest-2.19.0.tgz",
      "integrity": "sha512-RAH822pAdBgcNMAfWnCBU3CFZcfZ/i1eZjwFU/dsLKumyuuP3niueg2UAukXYF0E2AAoc82ZSSf9J0WQBinzHA==",
      "license": "(MIT OR CC0-1.0)",
      "engines": {
        "node": ">=12.20"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/typescript": {
      "version": "5.8.3",
      "resolved": "https://registry.npmjs.org/typescript/-/typescript-5.8.3.tgz",
      "integrity": "sha512-p1diW6TqL9L07nNxvRMM7hMMw4c5XOo/1ibL4aAIGmSAt9slTE1Xgw5KWuof2uTOvCg9BY7ZRi+GaF+7sfgPeQ==",
      "devOptional": true,
      "license": "Apache-2.0",
      "bin": {
        "tsc": "bin/tsc",
        "tsserver": "bin/tsserver"
      },
      "engines": {
        "node": ">=14.17"
      }
    },
    "node_modules/undici-types": {
      "version": "6.19.8",
      "resolved": "https://registry.npmjs.org/undici-types/-/undici-types-6.19.8.tgz",
      "integrity": "sha512-ve2KP6f/JnbPBFyobGHuerC9g1FYGn/F8n1LWTwNxCEzd6IfqTwUQcNXgEtmmQ6DlRrC1hrSrBnCZPokRrDHjw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/unique-filename": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/unique-filename/-/unique-filename-1.1.1.tgz",
      "integrity": "sha512-Vmp0jIp2ln35UTXuryvjzkjGdRyf9b2lTXuSYUiPmzRcl3FDtYqAwOnTJkAngD9SWhnoJzDbTKwaOrZ+STtxNQ==",
      "license": "ISC",
      "optional": true,
      "dependencies": {
        "unique-slug": "^2.0.0"
      }
    },
    "node_modules/unique-slug": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/unique-slug/-/unique-slug-2.0.2.tgz",
      "integrity": "sha512-zoWr9ObaxALD3DOPfjPSqxt4fnZiWblxHIgeWqW8x7UqDzEtHEQLzji2cuJYQFCU6KmoJikOYAZlrTHHebjx2w==",
      "license": "ISC",
      "optional": true,
      "dependencies": {
        "imurmurhash": "^0.1.4"
      }
    },
    "node_modules/use-intl": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/use-intl/-/use-intl-4.1.0.tgz",
      "integrity": "sha512-mQvDYFvoGn+bm/PWvlQOtluKCknsQ5a9F1Cj0hMfBjMBVTwnOqLPd6srhjvVdEQEQFVyHM1PfyifKqKYb11M9Q==",
      "license": "MIT",
      "dependencies": {
        "@formatjs/fast-memoize": "^2.2.0",
        "@schummar/icu-type-parser": "1.21.5",
        "intl-messageformat": "^10.5.14"
      },
      "peerDependencies": {
        "react": "^17.0.0 || ^18.0.0 || >=19.0.0-rc <19.0.0 || ^19.0.0"
      }
    },
    "node_modules/util-deprecate": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/util-deprecate/-/util-deprecate-1.0.2.tgz",
      "integrity": "sha512-EPD5q1uXyFxJpCrLnCc1nHnq3gOa6DZBocAIiI2TaSCA7VCJ1UJDMagCzIkXNsUYfD1daK//LTEQ8xiIbrHtcw==",
      "license": "MIT"
    },
    "node_modules/uuid": {
      "version": "8.3.2",
      "resolved": "https://registry.npmjs.org/uuid/-/uuid-8.3.2.tgz",
      "integrity": "sha512-+NYs2QeMWy+GWFOEm9xnn6HCDp0l7QBD7ml8zLUmJ+93Q5NF0NocErnwkTkXVFNiX3/fpC6afS8Dhb/gz7R7eg==",
      "license": "MIT",
      "bin": {
        "uuid": "dist/bin/uuid"
      }
    },
    "node_modules/victory-vendor": {
      "version": "36.9.2",
      "resolved": "https://registry.npmjs.org/victory-vendor/-/victory-vendor-36.9.2.tgz",
      "integrity": "sha512-PnpQQMuxlwYdocC8fIJqVXvkeViHYzotI+NJrCuav0ZYFoq912ZHBk3mCeuj+5/VpodOjPe1z0Fk2ihgzlXqjQ==",
      "license": "MIT AND ISC",
      "dependencies": {
        "@types/d3-array": "^3.0.3",
        "@types/d3-ease": "^3.0.0",
        "@types/d3-interpolate": "^3.0.1",
        "@types/d3-scale": "^4.0.2",
        "@types/d3-shape": "^3.1.0",
        "@types/d3-time": "^3.0.0",
        "@types/d3-timer": "^3.0.0",
        "d3-array": "^3.1.6",
        "d3-ease": "^3.0.1",
        "d3-interpolate": "^3.0.1",
        "d3-scale": "^4.0.2",
        "d3-shape": "^3.1.0",
        "d3-time": "^3.0.0",
        "d3-timer": "^3.0.1"
      }
    },
    "node_modules/when-exit": {
      "version": "2.1.4",
      "resolved": "https://registry.npmjs.org/when-exit/-/when-exit-2.1.4.tgz",
      "integrity": "sha512-4rnvd3A1t16PWzrBUcSDZqcAmsUIy4minDXT/CZ8F2mVDgd65i4Aalimgz1aQkRGU0iH5eT5+6Rx2TK8o443Pg==",
      "license": "MIT"
    },
    "node_modules/which": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/which/-/which-2.0.2.tgz",
      "integrity": "sha512-BLI3Tl1TW3Pvl70l3yq3Y64i+awpwXqsGBYWkkqMtnbXgrMD+yj7rhW0kuEDxzJaYXGjEW5ogapKNMEKNMjibA==",
      "license": "ISC",
      "optional": true,
      "dependencies": {
        "isexe": "^2.0.0"
      },
      "bin": {
        "node-which": "bin/node-which"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/wide-align": {
      "version": "1.1.5",
      "resolved": "https://registry.npmjs.org/wide-align/-/wide-align-1.1.5.tgz",
      "integrity": "sha512-eDMORYaPNZ4sQIuuYPDHdQvf4gyCF9rEEV/yPxGfwPkRodwEgiMUUXTx/dex+Me0wxx53S+NgUHaP7y3MGlDmg==",
      "license": "ISC",
      "optional": true,
      "dependencies": {
        "string-width": "^1.0.2 || 2 || 3 || 4"
      }
    },
    "node_modules/wrappy": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/wrappy/-/wrappy-1.0.2.tgz",
      "integrity": "sha512-l4Sp/DRseor9wL6EvV2+TuQn63dMkPjZ/sp9XkghTEbV9KlPS1xUsZ3u7/IQO4wxtcFB4bgpQPRcR3QCvezPcQ==",
      "license": "ISC"
    },
    "node_modules/yallist": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/yallist/-/yallist-4.0.0.tgz",
      "integrity": "sha512-3wdGidZyq5PB084XLES5TpOSRA3wjXAlIWMhum2kRcv/41Sn2emQ0dycQW4uZXLejwKvg6EsvbdlVL+FYEct7A==",
      "license": "ISC"
    },
    "node_modules/yaml": {
      "version": "1.10.2",
      "resolved": "https://registry.npmjs.org/yaml/-/yaml-1.10.2.tgz",
      "integrity": "sha512-r3vXyErRCYJ7wg28yvBY5VSoAF8ZvlcW9/BwUzEtUsjvX/DKs24dIkuwjtuprwJJHsbyUbLApepYTR1BN4uHrg==",
      "license": "ISC",
      "engines": {
        "node": ">= 6"
      }
    }
  }
}

```
--- FILE_END ---

--- FILE_START ---
PATH: package.json
TYPE: json
CONTENT:
```
{
  "name": "phulkas-earning-v2",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@auth/prisma-adapter": "^2.9.1",
    "@date-io/date-fns": "^3.2.1",
    "@emotion/react": "^11.14.0",
    "@emotion/styled": "^11.14.0",
    "@mui/icons-material": "^7.1.0",
    "@mui/lab": "^7.0.0-beta.12",
    "@mui/material": "^7.1.0",
    "@mui/x-date-pickers": "^8.3.1",
    "@mui/x-date-pickers-pro": "^8.3.1",
    "date-fns": "^4.1.0",
    "next": "15.3.2",
    "next-auth": "^4.24.7",
    "next-intl": "^4.1.0",
    "prisma": "^6.8.2",
    "react": "^19.0.0",
    "react-dom": "^19.0.0",
    "recharts": "^2.15.3",
    "sqlite3": "^5.1.7"
  },
  "devDependencies": {
    "@types/node": "^20",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "typescript": "^5"
  }
}

```
--- FILE_END ---

--- FILE_START ---
PATH: tsconfig.json
TYPE: json
CONTENT:
```
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}

```
--- FILE_END ---

--- FILE_START ---
PATH: next.config.ts
TYPE: typescript
CONTENT:
```
import {NextConfig} from 'next';
import createNextIntlPlugin from 'next-intl/plugin';

const nextConfig: NextConfig = {};
const withNextIntl = createNextIntlPlugin();
export default withNextIntl(nextConfig);
```
--- FILE_END ---

--- FILE_START ---
PATH: src/middleware.ts
TYPE: typescript
CONTENT:
```
// middleware.ts
import createMiddleware from 'next-intl/middleware';

export default createMiddleware({
  locales: ['en', 'ja'],
  defaultLocale: 'en',
  localeDetection: false,
  localePrefix: 'always',
});

export const config = {
  matcher: [
    '/',
    '/(ja|en)/:path*',
    '/((?!api|_next|_vercel|.*\\..*).*)',
  ],
};

export function middleware(request: NextRequest) {
  const response = createMiddleware({
    locales: ['en', 'ja'],
    defaultLocale: 'en',
    localeDetection: false,
    localePrefix: 'always',
  })(request);

  return response;
}

```
--- FILE_END ---

--- FILE_START ---
PATH: src/createEmotionCache.ts
TYPE: typescript
CONTENT:
```
// src/createEmotionCache.ts
import createCache from '@emotion/cache';

// Create a shared Emotion cache instance for Material UI SSR
const createEmotionCache = () => {
  return createCache({ key: 'css', prepend: true });
};

export default createEmotionCache;
```
--- FILE_END ---

--- FILE_START ---
PATH: src/theme.ts
TYPE: typescript
CONTENT:
```
// src/theme.ts
import { createTheme } from '@mui/material/styles';
import { Inter } from 'next/font/google';

const inter = Inter({
  weight: ['300', '400', '500', '700'],
  subsets: ['latin'],
  display: 'swap',
});

// Define your light and dark palettes
const lightPalette = {
  primary: {
    main: '#1976d2', // Blue
    light: '#42a5f5',
    dark: '#1565c0',
    contrastText: '#fff', // White text on primary blue
  },
  secondary: {
    main: '#dc004e', // Pink
    light: '#ff3378',
    dark: '#9a0036',
    contrastText: '#fff',
  },
  background: {
    default: '#f4f6f8', // Light grey background
    paper: '#ffffff', // White paper background
  },
  text: {
    primary: '#212121', // Dark text
    secondary: '#757575', // Grey text
  },
  divider: '#e0e0e0',
  mode: 'light' as const, // Explicitly define mode
};

const darkPalette = {
  primary: {
    main: '#90caf9', // Light blue for primary in dark mode (e.g., AppBar, chart bars)
    light: '#e3f2fd',
    dark: '#42a5f5',
    contrastText: '#000', // Black text on light primary for better contrast
  },
  secondary: {
    main: '#f48fb1', // Light pink
    light: '#ffc1e3',
    dark: '#ad1457',
    contrastText: '#000',
  },
  background: {
    default: '#121212', // Dark background
    paper: '#1e1e1e', // Darker paper background
  },
  text: {
    primary: '#ffffff', // White text for primary readability
    secondary: '#e0e0e0', // Very light grey for secondary text
  },
  divider: '#333333',
  mode: 'dark' as const, // Explicitly define mode
};

// Create the light theme
export const lightTheme = createTheme({
  palette: lightPalette,
  typography: {
    fontFamily: inter.style.fontFamily,
  },
  components: {
    MuiButton: {
      styleOverrides: {
        root: {
          borderRadius: 8,
        },
      },
    },
    MuiPaper: {
      styleOverrides: {
        root: {
          borderRadius: 8,
        },
      },
    },
    MuiTextField: {
      styleOverrides: {
        root: {
          '& .MuiOutlinedInput-root': {
            borderRadius: 8,
          },
        },
      },
    },
    MuiSelect: {
      styleOverrides: {
        root: {
          borderRadius: 8,
        },
      },
    },
    MuiAppBar: {
      styleOverrides: {
        root: {
          borderRadius: 0,
        },
      },
    },
  },
});

// Create the dark theme
export const darkTheme = createTheme({
  palette: darkPalette,
  typography: {
    fontFamily: inter.style.fontFamily,
  },
  components: {
    MuiButton: {
      styleOverrides: {
        root: {
          borderRadius: 8,
        },
      },
    },
    MuiPaper: {
      styleOverrides: {
        root: {
          borderRadius: 8,
        },
      },
    },
    MuiTextField: {
      styleOverrides: {
        root: {
          '& .MuiOutlinedInput-root': {
            borderRadius: 8,
          },
        },
      },
    },
    MuiSelect: {
      styleOverrides: {
        root: {
          borderRadius: 8,
        },
      },
    },
    MuiAppBar: {
      styleOverrides: {
        root: {
          borderRadius: 0,
        },
      },
    },
  },
});

```
--- FILE_END ---

--- FILE_START ---
PATH: src/auth.ts
TYPE: typescript
CONTENT:
```
import NextAuth from "next-auth";
import CredentialsProvider from "next-auth/providers/credentials";
import type { AuthOptions } from "next-auth";

const HARDCODED_USERNAME = "mari";
const HARDCODED_PASSWORD = "admin123";
const HARDCODED_USER_ID = "123";

export const authOptions: AuthOptions = {
  providers: [
    CredentialsProvider({
      name: "Credentials",
      credentials: {
        username: { label: "Username", type: "text" },
        password: { label: "Password", type: "password" },
      },
      async authorize(credentials) {
        if (
          credentials?.username === HARDCODED_USERNAME &&
          credentials?.password === HARDCODED_PASSWORD
        ) {
          return {
            id: HARDCODED_USER_ID,
            email: HARDCODED_USERNAME,
            name: "Hardcoded User",
          };
        }
        return null;
      },
    }),
  ],
  session: {
    strategy: "jwt",
  },
  pages: {
    signIn: "/en",
    error: "/en",
  },
  secret: process.env.NEXTAUTH_SECRET,
};

const handler = NextAuth(authOptions);

export { handler as GET, handler as POST };
```
--- FILE_END ---

--- FILE_START ---
PATH: src/messages/ja.json
TYPE: json
CONTENT:
```
{
  "login": {
    "title": "Phulkasアプリにログイン",
    "username_label": "ユーザー名",
    "password_label": "パスワード",
    "login_button": "サインイン",
    "login_error": "ログインに失敗しました。認証情報を確認してください。"
  },
  "auth": {
    "unauthenticated": "このページを表示するにはログインしてください",
    "login_failed": "ログインに失敗しました。認証情報を確認してください。"
  },
  "layout": {
    "app_title": "収益アプリ",
    "dashboard_link": "ダッシュボード",
    "summary_link": "概要",
    "purchases_link": "仕入れ",
    "sign_out_button": "サインアウト"
  },
  "language_switcher": {
    "label": "言語",
    "en": "英語",
    "ja": "日本語"
  },
  "summary": {
    "title": "収益概要",
    "summary_title": "収益概要と分析",
    "from_date": "開始日",
    "to_date": "終了日",
    "apply_filter": "フィルターを適用",
    "total_earnings": "総収益",
    "daily_earnings_chart": "毎日の収益",
    "meal_type_distribution_chart": "食事タイプの分布",
    "earnings": "収益",
    "daily_summary_for": "{date}の毎日の概要",
    "total_daily_earnings": "毎日の総収益：¥{amount}",
    "no_bills_found": "選択した日付範囲の請求書が見つかりません。",
    "lunch_summary_title": "昼食の概要",
    "dinner_summary_title": "夕食の概要",
    "food_total": "食事代合計",
    "drink_total": "飲み物代合計",
    "total_earnings_label": "総収益",
    "is_our_food_label": "お店の食事？",
    "num_people_working_label": "人数（夕食）",
    "no_lunch_entries": "昼食のエントリはありません",
    "no_dinner_entries": "夕食のエントリはありません",
    "all_bills_in_range": "範囲内のすべての請求書"
  },
  "date_range_filter": {
    "from_date": "開始日",
    "to_date": "終了日",
    "apply_filter": "フィルターを適用",
    "invalid_date_range": "無効な日付範囲。有効な日付を選択してください。",
    "from_date_after_to_date": "開始日は終了日より前にする必要があります。",
    "dates_not_selected": "開始日と終了日の両方を選択してください。",
    "invalid_date_format": "無効な日付形式。YYYY-MM-DDを使用してください。"
  },
  "dashboard": {
    "title": "ダッシュボード",
    "todays_entries": "今日の登録",
    "summary_for_date": "{date}の概要",
    "lunch_summary": "昼食の概要",
    "dinner_summary": "夕食の概要",
    "day_total_earnings_header": "1日の総収益",
    "food_bills_total": "食品代合計：{amount}",
    "drink_bills_total": "飲み物代合計：{amount}",
    "phulkas_lunch_earnings": "昼食の収益：{amount}",
    "phulkas_dinner_earnings": "夕食の収益：{amount}",
    "add_bill_entry": "新しい請求書エントリを追加",
    "no_entries_today": "今日のエントリはありません。",
    "no_summary_data": "この期間の概要データはありません。",
    "no_bills": "まだ請求書が記録されていません。最初の請求書を追加してください！",
    "edit_bill_title": "請求書を編集",
    "add_bill_title": "新しい請求書を追加",
    "date_label": "日付",
    "meal_type_label": "食事の種類",
    "food_amount_label": "食事代",
    "drink_amount_label": "飲み物代",
    "is_our_food_label": "お店の食事？",
    "num_people_working_label": "夕食の人数",
    "greeting": "こんにちは！",
    "welcome_message": "収益ダッシュボードへようこそ。"
  },
  "meal_type": {
    "lunch": "昼食",
    "dinner": "夕食"
  },
  "earnings_details": {
    "lunch_food_base_income": "昼食の食事代基本収入：{base}",
    "lunch_food_overage": " （+超過分：{overage} / 2 = {overageHalf}）",
    "total_lunch_food_income_share": "昼食の食事代収入分担合計：{amount}",
    "drink_calc_lunch": "飲み物代分担（昼食）：{total} * {percentage}% = {share}",
    "dinner_food_direct_share": "夕食の食事代直接分担（お店の食事の場合）：{share} (生の{total}から)",
    "dinner_common_pool_contrib_food": "食事代共通プール貢献：{amount}",
    "dinner_common_pool_contrib_drinks": "飲み物代共通プール貢献：{amount}",
    "total_common_pool": "共通プール合計：{amount}",
    "our_common_pool_share": "共通プール分担：{amount} ({workers} 人)"
  },
  "bill_list": {
    "date": "日付",
    "meal_type": "食事の種類",
    "food_amount": "食事代",
    "drink_amount": "飲み物代",
    "is_our_food": "お店の食事？",
    "num_people_working": "人数",
    "actions": "操作",
    "edit": "編集",
    "delete": "削除",
    "comments": "コメント"
  },
  "edit": {
    "delete_confirm_title": "削除の確認",
    "delete_confirm_message": "請求書ID {id} を削除してもよろしいですか？",
    "cancel": "キャンセル",
    "delete": "削除",
    "deleting": "請求書を削除しています...",
    "delete_bill_error": "請求書の削除に失敗しました：{error}"
  },
  "errors": {
    "failed_fetch": "データの取得に失敗しました。もう一度お試しください。",
    "bill_not_found": "請求書が見つかりません。",
    "required": "このフィールドは必須です",
    "invalid_date": "無効な日付形式",
    "positive_number": "正の数である必要があります",
    "invalid_date_range": "無効な日付範囲が選択されました。",
    "date_range_order": "開始日は終了日より前にする必要があります。",
    "bill_not_found_for_date": "この日付の請求書が見つかりません。",
    "form_validation_failed": "フォームのエラーを修正してください。",
    "no_purchase_bills_found": "選択した日付範囲の仕入れ請求書は見つかりません。"
  },
  "bill_form": {
    "add_title": "新しい請求書を追加",
    "edit_title": "請求書を編集",
    "date_label": "日付",
    "meal_type_label": "食事の種類",
    "lunch_option": "昼食",
    "dinner_option": "夕食",
    "food_amount_label": "食事代",
    "drink_amount_label": "飲み物代",
    "is_our_food_label": "お店の食事ですか？",
    "num_people_working_label": "夕食の人数",
    "save_button": "請求書を保存",
    "cancel_button": "キャンセル",
    "add_success": "請求書が正常に追加されました！",
    "edit_success": "請求書が正常に更新されました！",
    "add_error": "請求書の追加に失敗しました：{error}",
    "edit_error": "請求書の更新に失敗しました：{error}",
    "num_people_min": "夕食の人数は1以上である必要があります。",
    "comments_label": "コメント"
  },
  "general": {
    "currency": "¥",
    "yes": "はい",
    "no": "いいえ",
    "close": "閉じる",
    "save": "保存",
    "cancel": "キャンセル",
    "delete": "削除",
    "edit_button": "編集",
    "from_date": "開始日",
    "to_date": "終了日",
    "bills": "請求書"
  },
  "purchase_bill_form": {
    "add_title": "新しい仕入れ請求書を追加",
    "edit_title": "仕入れ請求書を編集",
    "date_label": "日付",
    "amount_label": "金額",
    "description_label": "説明",
    "comments_label": "コメント"
  },
  "purchases_page": {
    "title": "仕入れ請求書",
    "add_purchase_bill": "新しい仕入れ請求書を追加",
    "no_purchase_bills": "まだ仕入れ請求書が記録されていません。最初の仕入れを追加してください！",
    "total_purchase_amount": "仕入れ合計金額",
    "daily_purchase_trend": "毎日の仕入れ傾向"
  },
  "purchase_bill_list": {
    "date": "日付",
    "amount": "金額",
    "description": "説明",
    "comments": "コメント",
    "actions": "操作"
  }
}

```
--- FILE_END ---

--- FILE_START ---
PATH: src/messages/en.json
TYPE: json
CONTENT:
```
{
  "login": {
    "title": "Login to Phulkas App",
    "username_label": "Username",
    "password_label": "Password",
    "login_button": "Sign In",
    "login_error": "Login failed. Please check your credentials."
  },
  "auth": {
    "unauthenticated": "Please log in to view this page",
    "login_failed": "Login failed. Please check your credentials."
  },
  "layout": {
    "app_title": "Earning App",
    "dashboard_link": "Dashboard",
    "summary_link": "Summary",
    "purchases_link": "Purchases",
    "sign_out_button": "Sign Out"
  },
  "language_switcher": {
    "label": "Language",
    "en": "English",
    "ja": "Japanese"
  },
  "summary": {
    "title": "Earnings Summary",
    "summary_title": "Earnings Summary & Analytics",
    "from_date": "From Date",
    "to_date": "To Date",
    "apply_filter": "Apply Filter",
    "total_earnings": "Total Earnings",
    "daily_earnings_chart": "Daily Earnings",
    "meal_type_distribution_chart": "Meal Type Distribution",
    "earnings": "Earnings",
    "daily_summary_for": "Daily Summary for {date}",
    "total_daily_earnings": "Total Daily Earnings: ¥{amount}",
    "no_bills_found": "No bills found for the selected date range.",
    "lunch_summary_title": "Lunch Summary",
    "dinner_summary_title": "Dinner Summary",
    "food_total": "Food Total",
    "drink_total": "Drink Total",
    "total_earnings_label": "Total Earnings",
    "is_our_food_label": "Our Food?",
    "num_people_working_label": "Number of People Working Dinner",
    "no_lunch_entries": "No Lunch Entries",
    "no_dinner_entries": "No Dinner Entries",
    "all_bills_in_range": "All Bills in Range"
  },
  "date_range_filter": {
    "from_date": "From Date",
    "to_date": "To Date",
    "apply_filter": "Apply Filter",
    "invalid_date_range": "Invalid date range. Please select valid dates.",
    "from_date_after_to_date": "From date cannot be after To date.",
    "dates_not_selected": "Please select both From and To dates.",
    "invalid_date_format": "Invalid date format. Please use YYYY-MM-DD."
  },
  "dashboard": {
    "title": "Dashboard",
    "todays_entries": "Today's Entries",
    "summary_for_date": "Summary for {date}",
    "lunch_summary": "Lunch Summary",
    "dinner_summary": "Dinner Summary",
    "day_total_earnings_header": "Day Total Earnings",
    "food_bills_total": "Food Bills Total: {amount}",
    "drink_bills_total": "Drink Bills Total: {amount}",
    "phulkas_lunch_earnings": "Lunch Earnings: {amount}",
    "phulkas_dinner_earnings": "Dinner Earnings: {amount}",
    "add_bill_entry": "Add New Bill Entry",
    "no_entries_today": "No entries for today.",
    "no_summary_data": "No summary data available for this period.",
    "no_bills": "No bills recorded yet. Add your first bill!",
    "edit_bill_title": "Edit Bill",
    "add_bill_title": "Add New Bill",
    "date_label": "Date",
    "meal_type_label": "Meal Type",
    "food_amount_label": "Food Amount",
    "drink_amount_label": "Drink Amount",
    "is_our_food_label": "Our Food?",
    "num_people_working_label": "Number of People Working Dinner",
    "greeting": "Hello!",
    "welcome_message": "Welcome to your earning dashboard."
  },
  "meal_type": {
    "lunch": "Lunch",
    "dinner": "Dinner"
  },
  "earnings_details": {
    "lunch_food_base_income": "Lunch Food Base Income: {base}",
    "lunch_food_overage": " (+Overage: {overage} / 2 = {overageHalf})",
    "total_lunch_food_income_share": "Total Lunch Food Income Share: {amount}",
    "drink_calc_lunch": "Drinks Share (Lunch): {total} * {percentage}% = {share}",
    "dinner_food_direct_share": "Dinner Food Direct Share (if Our Food): {share} (from Raw {total})",
    "dinner_common_pool_contrib_food": "Food Contrib to Common Pool: {amount}",
    "dinner_common_pool_contrib_drinks": "Drink Contrib to Common Pool: {amount}",
    "total_common_pool": "Total Common Pool: {amount}",
    "our_common_pool_share": "Our Common Pool Share: {amount} ({workers} worker(s))"
  },
  "bill_list": {
    "date": "Date",
    "meal_type": "Meal Type",
    "food_amount": "Food",
    "drink_amount": "Drinks",
    "is_our_food": "Our Food?",
    "num_people_working": "Workers",
    "actions": "Actions",
    "edit": "Edit",
    "delete": "Delete",
    "comments": "Comments"
  },
  "edit": {
    "delete_confirm_title": "Confirm Deletion",
    "delete_confirm_message": "Are you sure you want to delete bill ID {id}?",
    "cancel": "Cancel",
    "delete": "Delete",
    "deleting": "Deleting bill...",
    "delete_bill_error": "Failed to delete bill: {error}"
  },
  "errors": {
    "failed_fetch": "Failed to fetch data. Please try again.",
    "bill_not_found": "Bill not found.",
    "required": "This field is required",
    "invalid_date": "Invalid date format",
    "positive_number": "Must be a positive number",
    "invalid_date_range": "Invalid date range selected.",
    "date_range_order": "From date cannot be after To date.",
    "bill_not_found_for_date": "No bills found for this date.",
    "form_validation_failed": "Please correct the errors in the form.",
    "no_purchase_bills_found": "No purchase bills found for the selected date range."
  },
  "bill_form": {
    "add_title": "Add New Bill",
    "edit_title": "Edit Bill",
    "date_label": "Date",
    "meal_type_label": "Meal Type",
    "lunch_option": "Lunch",
    "dinner_option": "Dinner",
    "food_amount_label": "Food Amount",
    "drink_amount_label": "Drink Amount",
    "is_our_food_label": "Is Our Food?",
    "num_people_working_label": "Number of People Working Dinner",
    "save_button": "Save Bill",
    "cancel_button": "Cancel",
    "add_success": "Bill added successfully!",
    "edit_success": "Bill updated successfully!",
    "add_error": "Failed to add bill: {error}",
    "edit_error": "Failed to update bill: {error}",
    "num_people_min": "Number of people working must be at least 1.",
    "comments_label": "Comments"
  },
  "general": {
    "currency": "¥",
    "yes": "Yes",
    "no": "No",
    "close": "Close",
    "save": "Save",
    "cancel": "Cancel",
    "delete": "Delete",
    "edit_button": "Edit",
    "from_date": "From Date",
    "to_date": "To Date",
    "bills": "bills"
  },
  "purchase_bill_form": {
    "add_title": "Add New Purchase Bill",
    "edit_title": "Edit Purchase Bill",
    "date_label": "Date",
    "amount_label": "Amount",
    "description_label": "Description",
    "comments_label": "Comments"
  },
  "purchases_page": {
    "title": "Purchase Bills",
    "add_purchase_bill": "Add New Purchase Bill",
    "no_purchase_bills": "No purchase bills recorded yet. Add your first purchase!",
    "total_purchase_amount": "Total Purchase Amount",
    "daily_purchase_trend": "Daily Purchase Trend"
  },
  "purchase_bill_list": {
    "date": "Date",
    "amount": "Amount",
    "description": "Description",
    "comments": "Comments",
    "actions": "Actions"
  }
}

```
--- FILE_END ---

--- FILE_START ---
PATH: src/types/Bill.ts
TYPE: typescript
CONTENT:
```
// src/types/Bill.ts
export interface Bill {
  id: string;
  date: string; // ISO string 'yyyy-MM-dd'
  foodAmount: number;
  drinkAmount: number;
  mealType: 'lunch' | 'dinner';
  isOurFood: boolean;
  numberOfPeopleWorkingDinner: number;
  comments: string | "";
}
```
--- FILE_END ---

--- FILE_START ---
PATH: src/context/ThemeContext.tsx
TYPE: typescript-react
CONTENT:
```
// src/context/ThemeContext.tsx
"use client"; // This directive MUST be at the very top

import React, { createContext, useContext, useState, useMemo, ReactNode } from 'react';
import { ThemeProvider, createTheme, PaletteMode } from '@mui/material';
import CssBaseline from '@mui/material/CssBaseline';
import { red } from '@mui/material/colors'; // Example import if you use specific colors

// Define the shape of the context value
interface ThemeContextType {
  currentTheme: PaletteMode; // 'light' or 'dark'
  toggleTheme: () => void;
}

// Create the context with a default undefined value
// createContext should only be called in client components
const ThemeContext = createContext<ThemeContextType | undefined>(undefined);

// Custom hook to easily access the theme context
export const useTheme = () => {
  const context = useContext(ThemeContext);
  if (context === undefined) {
    // This hook must be used within a ThemeProvider
    throw new Error('useTheme must be used within a ThemeProvider');
  }
  return context;
};

// Theme provider component
interface AppThemeProviderProps { // Renamed from ThemeProviderProps to avoid potential conflicts
  children: ReactNode;
}

export const AppThemeProvider: React.FC<AppThemeProviderProps> = ({ children }) => {
  // State to manage the current theme mode ('light' or 'dark')
  const [mode, setMode] = useState<PaletteMode>('light'); // Default to light theme

  // Function to toggle the theme mode
  const toggleTheme = () => {
    setMode((prevMode) => (prevMode === 'light' ? 'dark' : 'light'));
  };

  // Memoize the theme object to avoid unnecessary re-creations
  const theme = useMemo(
    () =>
      createTheme({
        palette: {
          mode, // Use the current mode
          // You can customize your palette further here
          // primary: {
          //   main: '#556cd6',
          // },
          // secondary: {
          //   main: '#19857b',
          // },
          // error: {
          //   main: red.A400, // Example using imported color
          // },
        },
      }),
    [mode], // Recreate theme only when mode changes
  );

  // Memoize the context value
  const contextValue = useMemo(() => ({ currentTheme: mode, toggleTheme }), [mode]);

  return (
    <ThemeContext.Provider value={contextValue}>
      <ThemeProvider theme={theme}>
        {/* CssBaseline kickstart an elegant, consistent, and simple baseline to build upon. */}
        <CssBaseline />
        {children}
      </ThemeProvider>
    </ThemeContext.Provider>
  );
};

// Remember to wrap your root layout (app/layout.tsx) with <AppThemeProvider>
// to make the theme context available throughout your application.

```
--- FILE_END ---

--- FILE_START ---
PATH: src/app/layout.tsx
TYPE: typescript-react
CONTENT:
```
// src/app/layout.tsx

import { Inter } from "next/font/google";
import "./globals.css";
import type { Metadata } from "next";
import getRequestConfig from '@/i18n/request';
import { getLocale } from 'next-intl/server';
import { AuthProvider } from '@/components/AuthProvider';
import ThemeProviderWrapper from '@/components/ThemeProviderWrapper';
import MuiRegistry from '@/components/MuiRegistry';
import NextIntlClientProviderWrapper from '@/components/NextIntlClientProviderWrapper';

const inter = Inter({ subsets: ["latin"] });

export const metadata: Metadata = {
  title: "Earning App",
  description: "Track daily earnings",
};

export default async function RootLayout({
  children,
  params: { locale: rootLocaleParam },
}: Readonly<{
  children: React.ReactNode;
  params: { locale: string };
}>) {

  const currentRequestLocale = rootLocaleParam || await getLocale();
  const { locale, messages, timeZone } = await getRequestConfig({ requestLocale: currentRequestLocale });

  return (
    <html lang={locale}>
      <head>
        <meta name="viewport" content="width=device-width, initial-scale=1" />
      </head>
      <body className={inter.className}>
        <AuthProvider>
          <MuiRegistry>
            <ThemeProviderWrapper>
              {/* CRITICAL FIX: Pass the locale prop here */}
              <NextIntlClientProviderWrapper messages={messages} timeZone={timeZone} locale={locale}>
                {children}
              </NextIntlClientProviderWrapper>
            </ThemeProviderWrapper>
          </MuiRegistry>
        </AuthProvider>
      </body>
    </html>
  );
}

```
--- FILE_END ---

--- FILE_START ---
PATH: src/app/page.tsx
TYPE: typescript-react
CONTENT:
```
// src/app/page.tsx
import { redirect } from 'next/navigation';

// This is a Server Component that redirects based on locale negotiation or default
export default function RootPage() {
  // You could add logic here to detect user's preferred locale (e.g., from headers)
  // For simplicity, we'll just redirect to the default locale /en
  redirect('/en');
}
```
--- FILE_END ---

--- FILE_START ---
PATH: src/app/[locale]/layout.tsx
TYPE: typescript-react
CONTENT:
```
// src/app/[locale]/layout.tsx

import { notFound } from 'next/navigation';
import { routing } from '@/i18n/routing';
import Layout from '@/components/Layout'; // Assuming this is your main layout component

export default async function LocaleLayout(props: Readonly<{
  children: React.ReactNode;
  params: { locale: string };
}>) {
  const { children, params } = props;
  const { locale } = params; // Access locale directly, should be fine here

  const locales = routing.locales;
  if (!locales.includes(locale as any)) notFound();

  return (
    <Layout> {/* This should wrap your main content, including the menu/header */}
      {children}
    </Layout>
  );
}

```
--- FILE_END ---

--- FILE_START ---
PATH: src/app/[locale]/page.tsx
TYPE: typescript-react
CONTENT:
```
// In your page.tsx
import { getServerSession } from "next-auth";
import { authOptions } from "@/auth";
import { redirect } from "next/navigation";
import LoginPageClient from "@/components/LoginPageClient";

export default async function LoginPage() {
  const session = await getServerSession(authOptions);

  if (session) {
    redirect("/en/dashboard");
  }

  return <LoginPageClient />;
}
```
--- FILE_END ---

--- FILE_START ---
PATH: src/app/[locale]/ClientLayout.tsx
TYPE: typescript-react
CONTENT:
```
// src/app/[locale]/ClientLayout.tsx
"use client"; // This directive MUST be the very first line

import { ReactNode } from 'react';
import { Session } from 'next-auth';
// Import our local client-side SessionProvider wrapper
import { SessionProvider } from '@/components/SessionProvider';

interface ClientLayoutProps {
  children: ReactNode;
  session: Session | null;
}

export default function ClientLayout({ children, session }: ClientLayoutProps) {
  return (
    <SessionProvider session={session}>
      {children}
    </SessionProvider>
  );
}

```
--- FILE_END ---

--- FILE_START ---
PATH: src/app/[locale]/purchases/page.tsx
TYPE: typescript-react
CONTENT:
```
"use client";

import React, { useEffect, useState, useCallback, useMemo } from 'react'; // Added useCallback
import { useSession } from 'next-auth/react';
import { useParams, useRouter } from 'next/navigation';
import {
  Box, Typography, CircularProgress, Alert, Button, Dialog, DialogTitle,
  DialogContent, IconButton, DialogActions, DialogContentText, Paper,
  useTheme
} from '@mui/material';
import CloseIcon from '@mui/icons-material/Close';
import PurchaseBillForm from '@/components/PurchaseBillForm';
import PurchaseBillList from '@/components/PurchaseBillList';
import { useTranslations } from 'next-intl';
import { format, parseISO, isValid, startOfMonth, endOfMonth } from 'date-fns';
import { DatePicker } from '@mui/x-date-pickers/DatePicker';
import { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';
import { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';
import { enUS, ja } from 'date-fns/locale';
import { BarChart, Bar, XAxis, YAxis, Tooltip, CartesianGrid, ResponsiveContainer } from 'recharts';

interface PurchaseBill {
  id: string;
  date: string;
  amount: number;
  description: string;
  comments?: string | null;
}

const PurchasesPageClient: React.FC = () => {
  const { data: session, status } = useSession();
  const router = useRouter();
  const params = useParams();
  const locale = params.locale as string;

  const t = useTranslations('purchases_page');
  const tGeneral = useTranslations('general');
  const tPurchaseBillForm = useTranslations('purchase_bill_form');
  const tEdit = useTranslations('edit');
  const tErrors = useTranslations('errors');

  const theme = useTheme();

  const [allPurchaseBills, setAllPurchaseBills] = useState<PurchaseBill[]>([]);
  const [filteredPurchaseBills, setFilteredPurchaseBills] = useState<PurchaseBill[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  const [isModalOpen, setIsModalOpen] = useState(false);
  const [editingPurchaseBill, setEditingPurchaseBill] = useState<PurchaseBill | undefined>(undefined);
  const [isModalLoading, setIsModalLoading] = useState(false);

  const [openConfirmDelete, setOpenConfirmDelete] = useState(false);
  const [purchaseBillToDeleteId, setPurchaseBillToDeleteId] = useState<string | null>(null);
  const [isDeleting, setIsDeleting] = useState(false);
  const [deleteError, setDeleteError] = useState<string | null>(null);

  const [startDate, setStartDate] = useState<Date | null>(startOfMonth(new Date()));
  const [endDate, setEndDate] = useState<Date | null>(endOfMonth(new Date()));

  const dateFnsLocale = useMemo(() => {
    return locale === 'ja' ? ja : enUS;
  }, [locale]);

  const fetchPurchaseBills = useCallback(async (from?: Date | null, to?: Date | null) => {
    if (status !== 'authenticated') {
      setLoading(false);
      return;
    }

    setLoading(true);
    setError(null);

    let url = `/${locale}/api/purchase-bills`;
    const queryParams = new URLSearchParams();

    if (from && isValid(from)) {
      queryParams.append('from', format(from, 'yyyy-MM-dd'));
    }
    if (to && isValid(to)) {
      queryParams.append('to', format(to, 'yyyy-MM-dd'));
    }

    if (queryParams.toString()) {
      url += `?${queryParams.toString()}`;
    }

    try {
      const res = await fetch(url);
      if (!res.ok) {
        const err = await res.json();
        throw new Error(err.error || tErrors('failed_fetch'));
      }
      const data: PurchaseBill[] = await res.json();
      const processedData = data.map(pb => ({
        ...pb,
        date: format(new Date(pb.date), 'yyyy-MM-dd'),
        amount: parseFloat(pb.amount.toString()),
        comments: pb.comments ?? null
      }));
      setAllPurchaseBills(processedData);
      setFilteredPurchaseBills(processedData);
    } catch (err: any) {
      setError(err.message || tErrors('failed_fetch'));
      setAllPurchaseBills([]);
      setFilteredPurchaseBills([]);
    } finally {
      setLoading(false);
    }
  }, [status, locale, tErrors]);

  useEffect(() => {
    if (status === 'loading') return;
    if (status === 'unauthenticated') {
      router.push(`/${locale}`);
    } else {
      fetchPurchaseBills(startDate, endDate);
    }
  }, [status, router, locale, fetchPurchaseBills, startDate, endDate]);

  const totalPurchaseAmount = useMemo(() => {
    return filteredPurchaseBills.reduce((sum, bill) => sum + bill.amount, 0);
  }, [filteredPurchaseBills]);

  const chartData = useMemo(() => {
    const groupedData: { [key: string]: number } = {};
    filteredPurchaseBills.forEach(bill => {
      const dateKey = format(parseISO(bill.date), 'yyyy-MM-dd');
      groupedData[dateKey] = (groupedData[dateKey] || 0) + bill.amount;
    });

    const dataArray = Object.keys(groupedData).sort().map(date => ({
      date,
      amount: groupedData[date],
    }));
    return dataArray;
  }, [filteredPurchaseBills]);


  const handleCloseModal = useCallback(() => { // Using useCallback
    setIsModalOpen(false);
    setEditingPurchaseBill(undefined);
    setError(null);
  }, []);

  const handleOpenAddModal = useCallback(() => { // Using useCallback
    setEditingPurchaseBill(undefined);
    setIsModalOpen(true);
    setIsModalLoading(false);
  }, []);

  const handleOpenEditModal = useCallback(async (purchaseBillId: string) => { // Using useCallback
    setIsModalOpen(true);
    setIsModalLoading(true);
    try {
      const response = await fetch(`/${locale}/api/purchase-bills/${purchaseBillId}`);
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || tErrors('failed_fetch'));
      }
      const data: PurchaseBill = await response.json();
      const formattedData = {
        ...data,
        date: format(new Date(data.date), 'yyyy-MM-dd'),
        amount: parseFloat(data.amount.toString()),
        comments: data.comments ?? null
      };
      setEditingPurchaseBill(formattedData);
    } catch (err: any) {
      setError(err.message || tErrors('failed_fetch'));
      handleCloseModal();
    } finally {
      setIsModalLoading(false);
    }
  }, [locale, tErrors, handleCloseModal]);

  const handlePurchaseBillFormSubmit = useCallback(async (formData: Omit<PurchaseBill, 'id'>, currentId?: string) => { // Using useCallback
    setIsModalLoading(true);
    setError(null);

    const method = currentId ? 'PUT' : 'POST';
    const url = currentId ? `/${locale}/api/purchase-bills/${currentId}` : `/${locale}/api/purchase-bills`;

    try {
      const res = await fetch(url, {
        method,
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(formData),
      });

      if (!res.ok) {
        const err = await res.json();
        throw new Error(err.error || tErrors('failed_fetch'));
      }

      handleCloseModal();
      fetchPurchaseBills(startDate, endDate);

    } catch (err: any) {
      setError(err.message || (currentId ? tPurchaseBillForm('edit_error') : tPurchaseBillForm('add_error')));
    } finally {
      setIsModalLoading(false);
    }
  }, [locale, tErrors, tPurchaseBillForm, handleCloseModal, fetchPurchaseBills, startDate, endDate]);

  const handleOpenConfirmDelete = useCallback((id: string) => { // Using useCallback
    setPurchaseBillToDeleteId(id);
    setOpenConfirmDelete(true);
    setDeleteError(null);
  }, []);

  const handleCloseConfirmDelete = useCallback(() => { // Using useCallback
    setOpenConfirmDelete(false);
    setPurchaseBillToDeleteId(null);
    setDeleteError(null);
  }, []);

  const handleDeletePurchaseBill = useCallback(async () => { // Using useCallback
    if (purchaseBillToDeleteId === null) return;

    setOpenConfirmDelete(false);
    setIsDeleting(true);
    setDeleteError(null);

    try {
      const res = await fetch(`/${locale}/api/purchase-bills/${purchaseBillToDeleteId}`, {
        method: 'DELETE',
      });

      if (!res.ok) {
        const err = await res.json();
        throw new Error(err.error || tEdit('delete_bill_error', { error: '' }));
      }

      setPurchaseBillToDeleteId(null);
      fetchPurchaseBills(startDate, endDate);

    } catch (err: any) {
      setDeleteError(err.message || tErrors('failed_fetch'));
    } finally {
      setIsDeleting(false);
    }
  }, [purchaseBillToDeleteId, locale, tEdit, tErrors, fetchPurchaseBills, startDate, endDate]);

  const handleDateChange = useCallback((newStartDate: Date | null, newEndDate: Date | null) => { // Using useCallback
    if (newStartDate && newEndDate && newStartDate > newEndDate) {
      setError(tErrors('date_range_order'));
      return;
    }
    setError(null);
    setStartDate(newStartDate);
    setEndDate(newEndDate);
  }, [tErrors]);


  if (status === 'loading' || loading) {
    return (
      <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', minHeight: '80vh' }}>
        <CircularProgress />
      </Box>
    );
  }

  if (status === 'unauthenticated') {
    return (
      <Alert severity="warning" sx={{ mt: 2 }}>
        {tGeneral('auth.unauthenticated')}
      </Alert>
    );
  }

  return (
    <Box sx={{ p: 3 }}>
      <Typography variant="h4" gutterBottom>
        {t('title')}
      </Typography>

      {error && <Alert severity="error" sx={{ mb: 2 }}>{error}</Alert>}
      {deleteError && <Alert severity="error" sx={{ mb: 2 }}>{deleteError}</Alert>}
      {isDeleting && <Alert severity="info" sx={{ mb: 2 }}>{tEdit('deleting')}</Alert>}

      <Box sx={{ mb: 3, display: 'flex', gap: 2, flexWrap: 'wrap', alignItems: 'center' }}>
        <Button variant="contained" onClick={handleOpenAddModal}>
          {t('add_purchase_bill')}
        </Button>

        <LocalizationProvider dateAdapter={AdapterDateFns} adapterLocale={dateFnsLocale}>
          <DatePicker
            label={tGeneral('from_date')}
            value={startDate}
            onChange={(date) => handleDateChange(date, endDate)}
            slotProps={{ textField: { size: "small", error: !!error, helperText: error } }}
            format="yyyy-MM-dd"
          />
          <DatePicker
            label={tGeneral('to_date')}
            value={endDate}
            onChange={(date) => handleDateChange(startDate, date)}
            slotProps={{ textField: { size: "small", error: !!error, helperText: error } }}
            format="yyyy-MM-dd"
          />
        </LocalizationProvider>
      </Box>

      {/* Total Purchase Amount Display */}
      {!loading && (
        <Paper elevation={2} sx={{ p: 2, mb: 2, borderRadius: 2 }}>
          <Typography variant="h6" gutterBottom>
            {t('total_purchase_amount')}
          </Typography>
          <Typography variant="body1" color="primary">
            {tGeneral('currency')}{totalPurchaseAmount.toLocaleString()}
          </Typography>
        </Paper>
      )}

      {/* Bar Chart for Trend */}
      {!loading && chartData.length > 0 && (
        <Paper elevation={2} sx={{ p: 2, mb: 3, borderRadius: 2 }}>
          <Typography variant="h6" gutterBottom>
            {t('daily_purchase_trend')}
          </Typography>
          <ResponsiveContainer width="100%" height={300}>
            <BarChart data={chartData} margin={{ top: 5, right: 30, left: 20, bottom: 5 }}>
              <CartesianGrid strokeDasharray="3 3" />
              <XAxis dataKey="date" />
              <YAxis />
              <Tooltip formatter={(value: number) => `${tGeneral('currency')}${value.toLocaleString()}`} />
              <Bar dataKey="amount" fill={theme.palette.primary.main} />
            </BarChart>
          </ResponsiveContainer>
        </Paper>
      )}

      {filteredPurchaseBills.length > 0 ? (
        <PurchaseBillList
          purchaseBills={filteredPurchaseBills}
          onEdit={handleOpenEditModal}
          onDelete={handleOpenConfirmDelete}
        />
      ) : (
        <Typography sx={{ mt: 2 }}>
          {t('no_purchase_bills')}
        </Typography>
      )}

      {/* Purchase Bill Form Modal */}
      <Dialog open={isModalOpen} onClose={handleCloseModal} fullWidth maxWidth="sm">
        <DialogTitle>
          {editingPurchaseBill ? tPurchaseBillForm('edit_title') : tPurchaseBillForm('add_title')}
          <IconButton
            aria-label="close"
            onClick={handleCloseModal}
            sx={{
              position: 'absolute',
              right: 8,
              top: 8,
              color: (theme) => theme.palette.grey[500],
            }}
          >
            <CloseIcon />
          </IconButton>
        </DialogTitle>
        <DialogContent dividers>
          <PurchaseBillForm
            key={editingPurchaseBill?.id || 'add-purchase-bill-form'}
            initialPurchaseBill={editingPurchaseBill}
            onSubmit={handlePurchaseBillFormSubmit}
            isSubmitting={isModalLoading}
            defaultDate={startDate || new Date()}
            onCancel={handleCloseModal}
          />
        </DialogContent>
      </Dialog>

      {/* Delete Confirmation Dialog for Purchase Bills */}
      <Dialog
        open={openConfirmDelete}
        onClose={handleCloseConfirmDelete}
        aria-labelledby="purchase-delete-dialog-title"
        aria-describedby="purchase-delete-dialog-description"
      >
        <DialogTitle id="purchase-delete-dialog-title">{tEdit('delete_confirm_title')}</DialogTitle>
        <DialogContent>
          <DialogContentText id="purchase-delete-dialog-description">
            {tEdit('delete_confirm_message', { id: purchaseBillToDeleteId ?? '' })}
          </DialogContentText>
        </DialogContent>
        <DialogActions>
          <Button onClick={handleCloseConfirmDelete} disabled={isDeleting}>{tGeneral('cancel')}</Button>
          <Button onClick={handleDeletePurchaseBill} color="error" autoFocus disabled={isDeleting}>
            {isDeleting ? <CircularProgress size={24} /> : tGeneral('delete')}
          </Button>
        </DialogActions>
      </Dialog>
    </Box>
  );
};

export default PurchasesPageClient;

```
--- FILE_END ---

--- FILE_START ---
PATH: src/app/[locale]/dashboard/page.tsx
TYPE: typescript-react
CONTENT:
```
// src/app/[locale]/dashboard/page.tsx
import { getServerSession } from "next-auth";
import { authOptions } from "@/auth";
import { redirect } from "next/navigation";
import DashboardPageClient from "@/components/DashboardPageClient";

interface DashboardPageProps {
  params: {
    locale: string;
  };
}

export default async function DashboardPage(props: DashboardPageProps) {
  const session = await getServerSession(authOptions);

  const { locale } = await props.params; // Access locale directly

  if (!session) {
    redirect(`/${locale}`);
  }

  return <DashboardPageClient locale={locale} />;
}

```
--- FILE_END ---

--- FILE_START ---
PATH: src/app/[locale]/api/bills/route.ts
TYPE: typescript
CONTENT:
```
// src/app/[locale]/api/bills/route.ts
import { NextResponse } from 'next/server';
import { getServerSession } from 'next-auth';
import { authOptions } from '@/auth';
import prisma from '@/lib/prisma';
import { MealType } from '@prisma/client';

export async function POST(request: Request) {
  const session = await getServerSession(authOptions);

  if (!session) {
    return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
  }

  try {
    const body = await request.json();
    const { date, foodAmount, drinkAmount, mealType, isOurFood, numberOfPeopleWorkingDinner, comments } = body;

    if (!date || foodAmount === undefined || drinkAmount === undefined || !mealType || isOurFood === undefined || numberOfPeopleWorkingDinner === undefined) {
      return NextResponse.json({ error: 'Missing required fields' }, { status: 400 });
    }

    const prismaMealType = mealType.toUpperCase() as MealType;

    const newBill = await prisma.bill.create({
      data: {
        date: new Date(date),
        foodAmount: parseFloat(foodAmount),
        drinkAmount: parseFloat(drinkAmount),
        mealType: prismaMealType,
        isOurFood: isOurFood,
        numberOfPeopleWorkingDinner: numberOfPeopleWorkingDinner,
        comments: comments,
      },
    });

    return NextResponse.json(newBill, { status: 201 });
  } catch (error) {
    console.error('API Error creating bill:', error);
    return NextResponse.json({ error: 'Failed to create bill' }, { status: 500 });
  }
}

```
--- FILE_END ---

--- FILE_START ---
PATH: src/app/[locale]/api/bills/[id]/route.ts
TYPE: typescript
CONTENT:
```
// src/app/[locale]/api/bills/[id]/route.ts
import { NextResponse } from 'next/server';
import { getServerSession } from 'next-auth';
import { authOptions } from '@/auth';
import prisma from '@/lib/prisma';
import { MealType } from '@prisma/client';

interface RouteParams {
  params: {
    id: string;
  };
}

export async function PUT(request: Request, { params }: RouteParams) {
  const session = await getServerSession(authOptions);

  if (!session) {
    return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
  }

  const { id } = params;

  try {
    const body = await request.json();
    const { date, foodAmount, drinkAmount, mealType, isOurFood, numberOfPeopleWorkingDinner, comments } = body;

    if (!date || foodAmount === undefined || drinkAmount === undefined || !mealType || isOurFood === undefined || numberOfPeopleWorkingDinner === undefined) {
      return NextResponse.json({ error: 'Missing required fields' }, { status: 400 });
    }

    const prismaMealType = mealType.toUpperCase() as MealType;

    const updatedBill = await prisma.bill.update({
      where: {
        id: parseInt(id),
      },
      data: {
        date: new Date(date),
        foodAmount: parseFloat(foodAmount),
        drinkAmount: parseFloat(drinkAmount),
        mealType: prismaMealType,
        isOurFood: isOurFood,
        numberOfPeopleWorkingDinner: numberOfPeopleWorkingDinner,
        comments: comments,
      },
    });

    return NextResponse.json(updatedBill, { status: 200 });
  } catch (error) {
    console.error(`API Error updating bill with ID ${id}:`, error);
    return NextResponse.json({ error: 'Failed to update bill' }, { status: 500 });
  }
}

export async function GET(request: Request, { params }: RouteParams) {
  const session = await getServerSession(authOptions);

  if (!session) {
    return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
  }

  const { id } = params;

  try {
    const bill = await prisma.bill.findUnique({
      where: {
        id: parseInt(id),
      },
    });

    if (!bill) {
      return NextResponse.json({ error: 'Bill not found' }, { status: 404 });
    }

    return NextResponse.json(bill, { status: 200 });
  } catch (error) {
    console.error(`API Error fetching bill with ID ${id}:`, error);
    return NextResponse.json({ error: 'Failed to fetch bill' }, { status: 500 });
  }
}

export async function DELETE(request: Request, { params }: RouteParams) {
  const session = await getServerSession(authOptions);

  if (!session) {
    return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
  }

  const { id } = params;

  try {
    await prisma.bill.delete({
      where: {
        id: parseInt(id),
      },
    });

    return NextResponse.json({ message: 'Bill deleted successfully' }, { status: 200 });
  } catch (error) {
    console.error(`API Error deleting bill with ID ${id}:`, error);
    return NextResponse.json({ error: 'Failed to delete bill' }, { status: 500 });
  }
}

```
--- FILE_END ---

--- FILE_START ---
PATH: src/app/[locale]/api/purchase-bills/route.ts
TYPE: typescript
CONTENT:
```
// src/app/[locale]/api/purchase-bills/route.ts
import { NextResponse } from 'next/server';
import { getServerSession } from 'next-auth';
import { authOptions } from '@/auth';
import prisma from '@/lib/prisma';
import { format, parseISO, isValid } from 'date-fns';

export async function POST(request: Request) {
  const session = await getServerSession(authOptions);

  if (!session) {
    return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
  }

  try {
    const body = await request.json();
    const { date, amount, description, comments } = body;

    if (!date || amount === undefined || !description) {
      return NextResponse.json({ error: 'Missing required fields' }, { status: 400 });
    }

    const newPurchaseBill = await prisma.purchaseBill.create({
      data: {
        date: new Date(date),
        amount: parseFloat(amount),
        description,
        comments,
      },
    });

    return NextResponse.json(newPurchaseBill, { status: 201 });
  } catch (error) {
    console.error('API Error creating purchase bill:', error);
    return NextResponse.json({ error: 'Failed to create purchase bill' }, { status: 500 });
  }
}

export async function GET(request: Request) {
  const session = await getServerSession(authOptions);

  if (!session) {
    return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
  }

  const { searchParams } = new URL(request.url);
  const fromParam = searchParams.get('from');
  const toParam = searchParams.get('to');

  let whereClause: any = {};

  if (fromParam && isValid(parseISO(fromParam))) {
    const fromDate = parseISO(fromParam);
    fromDate.setUTCHours(0, 0, 0, 0);
    whereClause.date = { gte: fromDate };
  }

  if (toParam && isValid(parseISO(toParam))) {
    const toDate = parseISO(toParam);
    toDate.setUTCHours(23, 59, 59, 999);
    whereClause.date = { ...whereClause.date, lte: toDate };
  }

  try {
    const purchaseBills = await prisma.purchaseBill.findMany({
      where: whereClause,
      orderBy: {
        date: 'asc',
      },
    });
    return NextResponse.json(purchaseBills, { status: 200 });
  } catch (error) {
    console.error('API Error fetching purchase bills:', error);
    return NextResponse.json({ error: 'Failed to fetch purchase bills' }, { status: 500 });
  }
}

```
--- FILE_END ---

--- FILE_START ---
PATH: src/app/[locale]/api/purchase-bills/by-date/route.ts
TYPE: typescript
CONTENT:
```
// src/app/[locale]/api/purchase-bills/by-date/route.ts
import { NextResponse } from 'next/server';
import { getServerSession } from 'next-auth';
import { authOptions } from '@/auth';
import prisma from '@/lib/prisma';

export async function GET(request: Request) {
  const session = await getServerSession(authOptions);

  if (!session) {
    return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
  }

  const { searchParams } = new URL(request.url);
  const dateParam = searchParams.get('date');

  if (!dateParam) {
    return NextResponse.json({ error: 'Date parameter is required' }, { status: 400 });
  }

  try {
    const startOfDay = new Date(dateParam);
    startOfDay.setUTCHours(0, 0, 0, 0);

    const endOfDay = new Date(dateParam);
    endOfDay.setUTCHours(23, 59, 59, 999);

    const purchaseBills = await prisma.purchaseBill.findMany({
      where: {
        date: {
          gte: startOfDay,
          lte: endOfDay,
        },
      },
      orderBy: {
        date: 'asc',
      },
    });

    return NextResponse.json(purchaseBills, { status: 200 });
  } catch (error) {
    console.error('API Error fetching purchase bills by date:', error);
    return NextResponse.json({ error: 'Failed to fetch purchase bills' }, { status: 500 });
  }
}

```
--- FILE_END ---

--- FILE_START ---
PATH: src/app/[locale]/api/purchase-bills/[id]/route.ts
TYPE: typescript
CONTENT:
```
// src/app/[locale]/api/purchase-bills/[id]/route.ts
import { NextResponse } from 'next/server';
import { getServerSession } from 'next-auth';
import { authOptions } from '@/auth';
import prisma from '@/lib/prisma';

interface RouteParams {
  params: {
    id: string;
  };
}

// GET a single Purchase Bill by ID
export async function GET(request: Request, { params }: RouteParams) {
  const session = await getServerSession(authOptions);

  if (!session) {
    return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
  }

  const { id } = params;

  try {
    const purchaseBill = await prisma.purchaseBill.findUnique({
      where: {
        id: parseInt(id), // Assuming ID is an integer
      },
    });

    if (!purchaseBill) {
      return NextResponse.json({ error: 'Purchase bill not found' }, { status: 404 });
    }

    return NextResponse.json(purchaseBill, { status: 200 });
  } catch (error) {
    console.error(`API Error fetching purchase bill with ID ${id}:`, error);
    return NextResponse.json({ error: 'Failed to fetch purchase bill' }, { status: 500 });
  }
}

// PUT (Update) a Purchase Bill by ID
export async function PUT(request: Request, { params }: RouteParams) {
  const session = await getServerSession(authOptions);

  if (!session) {
    return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
  }

  const { id } = params;

  try {
    const body = await request.json();
    const { date, amount, description, comments } = body;

    if (!date || amount === undefined || !description) {
      return NextResponse.json({ error: 'Missing required fields' }, { status: 400 });
    }

    const updatedPurchaseBill = await prisma.purchaseBill.update({
      where: {
        id: parseInt(id),
      },
      data: {
        date: new Date(date),
        amount: parseFloat(amount),
        description,
        comments,
      },
    });

    return NextResponse.json(updatedPurchaseBill, { status: 200 });
  } catch (error) {
    console.error(`API Error updating purchase bill with ID ${id}:`, error);
    return NextResponse.json({ error: 'Failed to update purchase bill' }, { status: 500 });
  }
}

// DELETE a Purchase Bill by ID
export async function DELETE(request: Request, { params }: RouteParams) {
  const session = await getServerSession(authOptions);

  if (!session) {
    return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
  }

  const { id } = params;

  try {
    await prisma.purchaseBill.delete({
      where: {
        id: parseInt(id),
      },
    });

    return NextResponse.json({ message: 'Purchase bill deleted successfully' }, { status: 200 });
  } catch (error) {
    console.error(`API Error deleting purchase bill with ID ${id}:`, error);
    return NextResponse.json({ error: 'Failed to delete purchase bill' }, { status: 500 });
  }
}

```
--- FILE_END ---

--- FILE_START ---
PATH: src/app/[locale]/api/reports/route.ts
TYPE: typescript
CONTENT:
```
// src/app/[locale]/api/reports/route.ts
import { NextResponse } from 'next/server';
import { getServerSession } from 'next-auth';
import { authOptions } from '@/auth';
import prisma from '@/lib/prisma';
import { parseISO, isValid } from 'date-fns';

// Define the type for the request parameters
interface RouteParams {
  params: {
    locale: string; // The locale from the URL path
  };
}

export async function GET(request: Request, { params }: RouteParams) {
  const session = await getServerSession(authOptions);

  if (!session) {
    return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
  }

  // The locale can be accessed from params.locale if needed for filtering/logging
  const { locale } = params; 
  // console.log(`API: Fetching reports for locale: ${locale}`); // Optional: for debugging

  const { searchParams } = new URL(request.url);
  const fromParam = searchParams.get('from');
  const toParam = searchParams.get('to');

  let fromDate: Date | undefined;
  let toDate: Date | undefined;

  // Robust date parsing
  if (fromParam) {
    const parsed = parseISO(fromParam);
    if (isValid(parsed)) {
      fromDate = parsed;
    } else {
      console.error(`API: Invalid 'from' date parameter for locale ${locale}: ${fromParam}`);
      return NextResponse.json({ error: 'Invalid "from" date format' }, { status: 400 });
    }
  }

  if (toParam) {
    const parsed = parseISO(toParam);
    if (isValid(parsed)) {
      // For 'to' date, adjust to include the entire day
      toDate = new Date(parsed.getFullYear(), parsed.getMonth(), parsed.getDate() + 1);
    } else {
      console.error(`API: Invalid 'to' date parameter for locale ${locale}: ${toParam}`);
      return NextResponse.json({ error: 'Invalid "to" date format' }, { status: 400 });
    }
  }

  if (!fromDate || !toDate) {
    return NextResponse.json({ error: 'Both "from" and "to" dates are required and must be valid.' }, { status: 400 });
  }

  try {
    const bills = await prisma.bill.findMany({
      where: {
        date: {
          gte: fromDate,
          lt: toDate,
        },
      },
      orderBy: {
        date: 'asc',
      },
    });

    // Ensure amounts are numbers before sending to client
    const safeBills = bills.map(bill => ({
      ...bill,
      foodAmount: typeof bill.foodAmount === 'string' ? parseFloat(bill.foodAmount) : Number(bill.foodAmount),
      drinkAmount: typeof bill.drinkAmount === 'string' ? parseFloat(bill.drinkAmount) : Number(bill.drinkAmount),
    }));

    return NextResponse.json({ bills: safeBills });
  } catch (error) {
    console.error(`API Error fetching bills for locale ${locale}:`, error);
    return NextResponse.json({ error: 'Failed to fetch bills' }, { status: 500 });
  }
}

```
--- FILE_END ---

--- FILE_START ---
PATH: src/app/[locale]/summary/page.tsx
TYPE: typescript-react
CONTENT:
```
// src/app/[locale]/summary/page.tsx
import { getServerSession } from "next-auth";
import { authOptions } from "@/auth";
import { redirect } from "next/navigation";
import SummaryPageClient from "@/components/SummaryPageClient";
import prisma from '@/lib/prisma';
import { format, isValid } from 'date-fns';

// Define the Bill type to match Prisma's output and what calculations.ts expects
interface Bill {
  id: string;
  date: string; // ISO string 'yyyy-MM-dd'
  foodAmount: number; // Now explicitly foodAmount
  drinkAmount: number; // Now explicitly drinkAmount
  mealType: 'lunch' | 'dinner';
  isOurFood: boolean;
  numberOfPeopleWorkingDinner: number;
  comments?: string | null;
}

interface SummaryPageProps {
  params: {
    locale: string;
  };
  searchParams?: {
    from?: string;
    to?: string;
  };
}

export default async function SummaryPage(props: SummaryPageProps) {
  const session = await getServerSession(authOptions);

  const { locale } = await Promise.resolve(props.params);
  const currentSearchParams = await Promise.resolve(props.searchParams || {});

  if (!session) {
    redirect(`/${locale}`);
  }

  let bills: Bill[] = [];
  let error: string | null = null;
  let fromDate: Date | null = null;
  let toDate: Date | null = null;

  try {
    const fromParam = currentSearchParams.from;
    const toParam = currentSearchParams.to;

    // Determine date range for fetching
    if (fromParam && toParam) {
      fromDate = new Date(fromParam);
      toDate = new Date(toParam);

      if (isNaN(fromDate.getTime()) || !isValid(fromDate) || isNaN(toDate.getTime()) || !isValid(toDate)) {
        throw new Error("Invalid date format in URL parameters. Please use Букмекерлар-MM-DD.");
      }
      if (fromDate > toDate) {
        throw new Error("From date cannot be after To date.");
      }

      const adjustedToDate = new Date(toDate);
      adjustedToDate.setDate(adjustedToDate.getDate() + 1);

      const fetchedBillsRaw = await prisma.bill.findMany({
        where: {
          date: {
            gte: fromDate,
            lt: adjustedToDate,
          },
        },
        orderBy: {
          date: 'asc',
        },
      });

      bills = fetchedBillsRaw.map(bill => {
        // Ensure foodAmount and drinkAmount are numbers
        const foodAmountNum = typeof bill.foodAmount === 'string'
          ? parseFloat(bill.foodAmount)
          : Number(bill.foodAmount);
        const drinkAmountNum = typeof bill.drinkAmount === 'string'
          ? parseFloat(bill.drinkAmount)
          : Number(bill.drinkAmount);

        if (isNaN(foodAmountNum) || isNaN(drinkAmountNum)) {
          console.error('SummaryPage (Server): NaN amount detected for bill:', bill);
          throw new Error('Invalid foodAmount or drinkAmount found in bill data.');
        }

        return {
          id: bill.id,
          date: format(bill.date, 'yyyy-MM-dd'),
          mealType: bill.mealType.toString().toLowerCase() as 'lunch' | 'dinner',
          foodAmount: foodAmountNum, // Pass foodAmount directly
          drinkAmount: drinkAmountNum, // Pass drinkAmount directly
          isOurFood: bill.isOurFood ?? true,
          numberOfPeopleWorkingDinner: bill.numberOfPeopleWorkingDinner ?? 1,
          comments: bill.comments ?? null,
        };
      });

    } else {
      // Default date range (e.g., last 7 days) if no search params are provided
      const defaultToDate = new Date();
      const defaultFromDate = new Date();
      defaultFromDate.setDate(defaultFromDate.getDate() - 6);

      fromDate = defaultFromDate;
      toDate = defaultToDate;

      const adjustedDefaultToDate = new Date(defaultToDate);
      adjustedDefaultToDate.setDate(adjustedDefaultToDate.getDate() + 1);

      const fetchedBillsRaw = await prisma.bill.findMany({
        where: {
          date: {
            gte: defaultFromDate,
            lt: adjustedDefaultToDate,
          },
        },
        orderBy: {
          date: 'asc',
        },
      });

      bills = fetchedBillsRaw.map(bill => {
        const foodAmountNum = typeof bill.foodAmount === 'string'
          ? parseFloat(bill.foodAmount)
          : Number(bill.foodAmount);
        const drinkAmountNum = typeof bill.drinkAmount === 'string'
          ? parseFloat(bill.drinkAmount)
          : Number(bill.drinkAmount);

        if (isNaN(foodAmountNum) || isNaN(drinkAmountNum)) {
          console.error('SummaryPage (Server): NaN amount detected for default bill:', bill);
          throw new Error('Invalid foodAmount or drinkAmount found in default bill data.');
        }

        return {
          id: bill.id,
          date: format(bill.date, 'yyyy-MM-dd'),
          mealType: bill.mealType.toString().toLowerCase() as 'lunch' | 'dinner',
          foodAmount: foodAmountNum,
          drinkAmount: drinkAmountNum,
          isOurFood: bill.isOurFood ?? true,
          numberOfPeopleWorkingDinner: bill.numberOfPeopleWorkingDinner ?? 1,
          comments: bill.comments ?? null,
        };
      });
    }
  } catch (e: any) {
    console.error("SummaryPage (Server): Error fetching or processing bills:", e);
    error = e.message || "Failed to fetch summary data.";
    bills = []; // Ensure bills is empty on error
  }

  return (
    <SummaryPageClient
      locale={locale}
      initialBills={bills}
      initialFromDate={fromDate ? format(fromDate, 'yyyy-MM-dd') : undefined}
      initialToDate={toDate ? format(toDate, 'yyyy-MM-dd') : undefined}
      initialError={error}
    />
  );
}

```
--- FILE_END ---

--- FILE_START ---
PATH: src/app/api/auth/[...nextauth]/route.tsx
TYPE: typescript-react
CONTENT:
```
// src/app/api/auth/[...nextauth]/route.tsx
// Import GET and POST directly from your configured auth.ts file
import { GET, POST } from '@/auth';

// Re-export them to define your API route handlers for Next.js App Router
// Next.js automatically calls these exported functions for the corresponding HTTP methods.
export { GET, POST };

// You can also define other handlers like PUT, DELETE, etc., if needed, similarly.

```
--- FILE_END ---

--- FILE_START ---
PATH: src/config/app.ts
TYPE: typescript
CONTENT:
```
// src/config/app.ts
export const AppConfig = {
  LUNCH_FOOD_BASE_INCOME: 8000,
  LUNCH_FOOD_OVERAGE_SHARE_PERCENT: 0.5, // 50%
  LUNCH_DRINK_SHARE_PERCENT: 0.25, // 25%

  DINNER_FOOD_OUR_SHARE_PERCENT: 0.75, // 75%
  DINNER_FOOD_COMMON_POOL_PERCENT: 0.25, // 25%
  DINNER_DRINK_COMMON_POOL_PERCENT: 0.25, // 25% (for drinks)
};

```
--- FILE_END ---

--- FILE_START ---
PATH: src/utils/auth.ts
TYPE: typescript
CONTENT:
```
// src/utils/auth.ts
// This utility file provides a helper function to get the session on the server.

// Import getServerSession from next-auth
// This function is designed for use in Server Components and API routes
import { getServerSession } from "next-auth";
// Import your authOptions from your central configuration file
import { authOptions } from "@/auth";

/**
 * Helper function to get the NextAuth session on the server side.
 * This is an alternative to importing `auth` directly in layouts/Server Components
 * and might help bypass module resolution issues.
 * @returns The current session or null if not authenticated.
 */
export async function getSession() {
  // Call getServerSession with your authOptions to get the session
  const session = await getServerSession(authOptions);
  return session;
}

```
--- FILE_END ---

--- FILE_START ---
PATH: src/components/LoginPageClient.tsx
TYPE: typescript-react
CONTENT:
```
"use client";

import React, { useState } from 'react';
import { Box, TextField, Button, Typography, CircularProgress, Alert } from '@mui/material';
import { useTranslations } from 'next-intl';
import { signIn } from 'next-auth/react';
import { useRouter } from 'next/navigation';

const LoginPageClient: React.FC = () => {
  const t = useTranslations('login');
  const tGeneral = useTranslations();

  // Change state variable from 'email' to 'username'
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const router = useRouter();

  const handleLogin = async (event: React.FormEvent<HTMLFormElement>) => {
    event.preventDefault();
    setLoading(true);
    setError(null);

    const result = await signIn('credentials', {
      redirect: false,
      username, // Pass the 'username' state here
      password,
    });

    setLoading(false);

    if (result?.error) {
      setError(tGeneral('auth.login_failed'));
      console.error("Login failed:", result.error);
    } else {
      router.push('/en/dashboard'); // Or dynamically determine locale
    }
  };

  return (
    <Box
      component="form"
      onSubmit={handleLogin}
      sx={{
        marginTop: 8,
        display: 'flex',
        flexDirection: 'column',
        alignItems: 'center',
        maxWidth: 400,
        margin: '0 auto',
        padding: 3,
        border: '1px solid #ccc',
        borderRadius: 2,
        boxShadow: 3
      }}
    >
      <Typography component="h1" variant="h5" gutterBottom>
        {t('title')}
      </Typography>
      {error && (
        <Alert severity="error" sx={{ marginBottom: 2, width: '100%' }}>
          {error}
        </Alert>
      )}
      <TextField
        margin="normal"
        required
        fullWidth
        id="username" // Change ID from 'email' to 'username'
        label={t('username_label')} // Use new translation key for label
        name="username"
        autoComplete="username" // Change autoComplete
        autoFocus
        value={username}
        onChange={(e) => setUsername(e.target.value)} // Update state setter
      />
      <TextField
        margin="normal"
        required
        fullWidth
        name="password"
        label={t('password_label')}
        type="password"
        id="password"
        autoComplete="current-password"
        value={password}
        onChange={(e) => setPassword(e.target.value)}
      />
      <Button
        type="submit"
        fullWidth
        variant="contained"
        sx={{ marginTop: 3, marginBottom: 2 }}
        disabled={loading}
      >
        {loading ? <CircularProgress size={24} color="inherit" /> : t('login_button')}
      </Button>
    </Box>
  );
};

export default LoginPageClient;

```
--- FILE_END ---

--- FILE_START ---
PATH: src/components/LoginForm.tsx
TYPE: typescript-react
CONTENT:
```
// src/components/LoginForm.tsx
"use client"; // This directive MUST be the very first line

import React, { useState } from 'react';
import { signIn } from 'next-auth/react'; // signIn is a client-side function
import { useRouter, useParams } from 'next/navigation'; // useRouter and useParams are client-side hooks
import Box from '@mui/material/Box';
import TextField from '@mui/material/TextField';
import Button from '@mui/material/Button';
import Typography from '@mui/material/Typography';
import CircularProgress from '@mui/material/CircularProgress';
import Alert from '@mui/material/Alert';
import { useTranslations } from 'next-intl'; // useTranslations can be used in Client Components


const LoginForm: React.FC = () => {
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');
  const [error, setError] = useState<string | null>(null);
  const [loading, setLoading] = useState(false);
  const router = useRouter();
  const params = useParams();
  const locale = params.locale as string; // Access locale from params in Client Component

  const t = useTranslations('login'); // Use translations in Client Component

  const handleSubmit = async (event: React.FormEvent<HTMLFormElement>) => {
    event.preventDefault();
    setError(null);
    setLoading(true);

    const result = await signIn('credentials', {
      redirect: false, // Prevent automatic redirect
      username,
      password,
    });

    setLoading(false);

    if (result?.error) {
      console.error("Login failed:", result.error);
      // Use translation for login error message
      setError(t('login_error'));
    } else {
      // Redirect to the dashboard page for the current locale
      router.push(`/${locale}/dashboard`);
    }
  };

  return (
    <Box
      component="form"
      onSubmit={handleSubmit}
      sx={{
        mt: 3,
        p: 3,
        border: '1px solid #ccc',
        borderRadius: '8px',
        maxWidth: 400,
        width: '100%',
        display: 'flex',
        flexDirection: 'column',
        gap: 2,
      }}
    >
      {error && <Alert severity="error">{error}</Alert>}
      <TextField
        label={t('username_label')}
        variant="outlined"
        fullWidth
        value={username}
        onChange={(e) => setUsername(e.target.value)}
        required
      />
      <TextField
        label={t('password_label')}
        variant="outlined"
        fullWidth
        type="password"
        value={password}
        onChange={(e) => setPassword(e.target.value)}
        required
      />
      <Button type="submit" variant="contained" color="primary" fullWidth disabled={loading}>
        {loading ? <CircularProgress size={24} /> : t('login_button')}
      </Button>
    </Box>
  );
};

export default LoginForm;

```
--- FILE_END ---

--- FILE_START ---
PATH: src/components/BillList.tsx
TYPE: typescript-react
CONTENT:
```
"use client";

import React, { useState } from 'react';
import {
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Paper,
  Typography,
  Box,
  IconButton,
  useMediaQuery,
  useTheme,
  List,
  ListItem,
  ListItemText,
  Grid,
  Dialog,
  DialogActions,
  DialogContent,
  DialogContentText,
  DialogTitle,
  Button,
  CircularProgress,
  Alert,
} from '@mui/material';
import { Edit as EditIcon, Delete as DeleteIcon, CheckCircle, Close } from '@mui/icons-material';
import { useTranslations } from 'next-intl';
import { Bill } from '@/types/Bill';
import { format, parseISO } from 'date-fns';

interface BillListProps {
  bills: Bill[];
  onEdit: (billId: string) => void;
  onDelete: (billId: number) => void;
  showDateColumn?: boolean;
}

const BillList: React.FC<BillListProps> = ({ bills, onEdit, onDelete, showDateColumn = true }) => {
  const t = useTranslations('bill_list');
  const tMealType = useTranslations('meal_type');
  const tEdit = useTranslations('edit');
  const tErrors = useTranslations('errors');
  const tGeneral = useTranslations('general');

  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('sm'));

  const [openDeleteConfirm, setOpenDeleteConfirm] = useState(false);
  const [billToDeleteId, setBillToDeleteId] = useState<number | null>(null);
  const [isDeleting, setIsDeleting] = useState(false);
  const [deleteError, setDeleteError] = useState<string | null>(null);

  const formatCurrency = (amount: number | string) => {
    let numericAmount: number;
    if (typeof amount === 'string') {
      const cleanedString = amount.replace(/[¥,]/g, '');
      numericAmount = Number(cleanedString);
    } else {
      numericAmount = amount;
    }
    if (isNaN(numericAmount)) {
      numericAmount = 0;
    }
    return `¥${numericAmount.toLocaleString()}`;
  };

  const handleDeleteClick = (billId: number) => {
    onDelete(billId);
  };

  if (!bills || bills.length === 0) {
    return (
      <Paper elevation={2} sx={{ p: 2, mb: 2, textAlign: 'center', borderRadius: 2 }}>
        <Typography variant="body1">{tErrors('bill_not_found')}</Typography>
      </Paper>
    );
  }

  return (
    <Box sx={{ width: '100%' }}>
      {isMobile ? (
        <List sx={{ width: '100%', bgcolor: 'background.paper', p: 0 }}>
          {bills.map((bill) => (
            <Paper key={bill.id} elevation={2} sx={{ mb: 2, p: 2, borderRadius: 2 }}>
              {showDateColumn && (
                <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 1 }}>
                  <Typography variant="body2" color="text.secondary">{t('date')}:</Typography>
                  <Typography component="span" variant="body1" color="text.primary" sx={{ fontWeight: 'medium' }}>
                    {format(parseISO(bill.date), 'yyyy-MM-dd')}
                  </Typography>
                </Box>
              )}
              
              <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 1 }}>
                <Typography variant="body2" color="text.secondary">{t('meal_type')}:</Typography>
                <Typography component="span" variant="body1" color="text.primary" sx={{ fontWeight: 'medium' }}>
                  {tMealType(bill.mealType)}
                </Typography>
              </Box>

              <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 1 }}>
                <Typography variant="body2" color="text.secondary">{t('food_amount')}:</Typography>
                <Typography component="span" variant="body1" color="text.primary" sx={{ fontWeight: 'medium' }}>
                  {formatCurrency(bill.foodAmount)}
                </Typography>
              </Box>

              <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 1 }}>
                <Typography variant="body2" color="text.secondary">{t('drink_amount')}:</Typography>
                <Typography component="span" variant="body1" color="text.primary" sx={{ fontWeight: 'medium' }}>
                  {formatCurrency(bill.drinkAmount)}
                </Typography>
              </Box>

              <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 1 }}>
                <Typography variant="body2" color="text.secondary">{t('is_our_food')}:</Typography>
                {bill.isOurFood ? (
                  <CheckCircle color="success" fontSize="small" />
                ) : (
                  <Close color="error" fontSize="small" />
                )}
              </Box>

              {bill.mealType === 'dinner' && (
                <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 1 }}>
                  <Typography variant="body2" color="text.secondary">{t('num_people_working')}:</Typography>
                  <Typography component="span" variant="body1" color="text.primary" sx={{ fontWeight: 'medium' }}>
                    {bill.numberOfPeopleWorkingDinner || '-'}
                  </Typography>
                </Box>
              )}

              <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start', mb: 1 }}>
                <Typography variant="body2" color="text.secondary">{t('comments')}:</Typography>
                <Typography component="span" variant="body1" color="text.primary" sx={{ fontWeight: 'medium', textAlign: 'right', flexGrow: 1, ml: 1 }}>
                  {bill.comments || '-'}
                </Typography>
              </Box>
              
              <Box sx={{ display: 'flex', justifyContent: 'flex-end', pt: 2, borderTop: '1px solid', borderColor: 'divider', mt: 1 }}>
                <IconButton onClick={() => onEdit(bill.id.toString())} color="primary" aria-label={t('edit')}>
                  <EditIcon />
                </IconButton>
                <IconButton onClick={() => handleDeleteClick(parseInt(bill.id))} color="error" aria-label={t('delete')}>
                  <DeleteIcon />
                </IconButton>
              </Box>
            </Paper>
          ))}
        </List>
      ) : (
        <TableContainer component={Paper} elevation={3} sx={{ borderRadius: 3 }}>
          <Table sx={{ minWidth: 650 }} aria-label="bill list">
            <TableHead>
              <TableRow>
                {showDateColumn && <TableCell>{t('date')}</TableCell>}
                <TableCell>{t('meal_type')}</TableCell>
                <TableCell align="right">{t('food_amount')}</TableCell>
                <TableCell align="right">{t('drink_amount')}</TableCell>
                <TableCell align="center">{t('is_our_food')}</TableCell>
                <TableCell align="right">{t('num_people_working')}</TableCell>
                <TableCell>{t('comments')}</TableCell>
                <TableCell align="center">{t('actions')}</TableCell>
              </TableRow>
            </TableHead>
            <TableBody>
              {bills.map((bill) => (
                <TableRow key={bill.id}>
                  {showDateColumn && (
                    <TableCell component="th" scope="row">
                      {format(parseISO(bill.date), 'yyyy-MM-dd')}
                    </TableCell>
                  )}
                  <TableCell>{tMealType(bill.mealType)}</TableCell>
                  <TableCell align="right">{formatCurrency(bill.foodAmount)}</TableCell>
                  <TableCell align="right">{formatCurrency(bill.drinkAmount)}</TableCell>
                  <TableCell align="center">
                    {bill.isOurFood ? (
                      <CheckCircle color="success" />
                    ) : (
                      <Close color="error" />
                    )}
                  </TableCell>
                  <TableCell align="right">
                    {bill.mealType === 'dinner' ? (bill.numberOfPeopleWorkingDinner || '-') : '-'}
                  </TableCell>
                  <TableCell sx={{ maxWidth: 200, overflow: 'hidden', textOverflow: 'ellipsis', whiteSpace: 'nowrap' }}>
                    {bill.comments || '-'}
                  </TableCell>
                  <TableCell align="center">
                    <IconButton onClick={() => onEdit(bill.id.toString())} color="primary" aria-label={t('edit')}>
                      <EditIcon />
                    </IconButton>
                    <IconButton onClick={() => handleDeleteClick(parseInt(bill.id))} color="error" aria-label={t('delete')}>
                      <DeleteIcon />
                    </IconButton>
                  </TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>
        </TableContainer>
      )}
    </Box>
  );
};

export default BillList;

```
--- FILE_END ---

--- FILE_START ---
PATH: src/components/PurchaseBillForm.tsx
TYPE: typescript-react
CONTENT:
```
"use client";

import React, { useState, useEffect, useCallback, useMemo } from 'react'; // Added useCallback
import {
  TextField,
  Button,
  Box,
  CircularProgress,
  Alert,
} from '@mui/material';
import { DatePicker } from '@mui/x-date-pickers/DatePicker';
import { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';
import { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';
import { format, parseISO, isValid } from 'date-fns';
import { useTranslations } from 'next-intl';
import { useRouter } from 'next/navigation';
import { enUS, ja } from 'date-fns/locale';

interface PurchaseBill {
  id?: string;
  date: string;
  amount: number;
  description: string;
  comments?: string | null;
}

interface PurchaseBillFormProps {
  initialPurchaseBill?: PurchaseBill;
  onSubmit: (data: Omit<PurchaseBill, 'id'>, currentBillId?: string) => void;
  isSubmitting?: boolean;
  defaultDate?: Date;
  onCancel: () => void;
}

const PurchaseBillForm: React.FC<PurchaseBillFormProps> = ({
  initialPurchaseBill,
  onSubmit,
  isSubmitting,
  defaultDate,
  onCancel,
}) => {
  const t = useTranslations('purchase_bill_form');
  const tErrors = useTranslations('errors');
  const tGeneral = useTranslations('general');

  const router = useRouter();
  const locale = router.locale as string;

  const [date, setDate] = useState<Date | null>(
    initialPurchaseBill?.date ? parseISO(initialPurchaseBill.date) : (defaultDate || new Date())
  );
  const [amount, setAmount] = useState<number | ''>(initialPurchaseBill?.amount ?? 0);
  const [description, setDescription] = useState<string>(initialPurchaseBill?.description ?? '');
  const [comments, setComments] = useState<string>(initialPurchaseBill?.comments ?? '');

  const [errors, setErrors] = useState<{ [key: string]: string }>({});
  const [formError, setFormError] = useState<string | null>(null);

  const dateFnsLocale = useMemo(() => {
    return locale === 'ja' ? ja : enUS;
  }, [locale]);

  useEffect(() => {
    if (initialPurchaseBill) {
      setDate(parseISO(initialPurchaseBill.date));
      setAmount(initialPurchaseBill.amount);
      setDescription(initialPurchaseBill.description);
      setComments(initialPurchaseBill.comments ?? '');
    } else if (defaultDate) {
      setDate(defaultDate);
      setAmount(0);
      setDescription('');
      setComments('');
    }
    setFormError(null);
    setErrors({});
  }, [initialPurchaseBill, defaultDate]);

  const validateForm = useCallback(() => { // Using useCallback
    const newErrors: { [key: string]: string } = {};

    if (!date || !isValid(date)) {
      newErrors.date = tErrors('invalid_date');
    }

    if (amount === '' || amount < 0) {
      newErrors.amount = tErrors('positive_number');
    }

    if (!description.trim()) {
      newErrors.description = tErrors('required');
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  }, [date, amount, description, tErrors]);

  const handleSubmit = useCallback(async (e: React.FormEvent) => { // Using useCallback
    e.preventDefault();

    if (!validateForm()) {
      setFormError(tGeneral('errors.form_validation_failed') || 'Please correct the errors in the form.');
      return;
    }
    setFormError(null);

    const formattedDate = date ? format(date, 'yyyy-MM-dd') : '';

    const formData: Omit<PurchaseBill, 'id'> = {
      date: formattedDate,
      amount: Number(amount),
      description: description.trim(),
      comments: comments.trim() || null,
    };

    onSubmit(formData, initialPurchaseBill?.id);
  }, [date, amount, description, comments, onSubmit, initialPurchaseBill, validateForm, tGeneral]);

  return (
    <Box component="form" onSubmit={handleSubmit} noValidate sx={{ mt: 1 }}>
      {formError && (
        <Alert severity="error" sx={{ mb: 2 }}>
          {formError}
        </Alert>
      )}

      <LocalizationProvider dateAdapter={AdapterDateFns} adapterLocale={dateFnsLocale}>
        <DatePicker
          label={t('date_label')}
          value={date}
          onChange={(newDate) => setDate(newDate)}
          slotProps={{ textField: { fullWidth: true, margin: "normal", error: !!errors.date, helperText: errors.date } }}
          format="yyyy-MM-dd"
        />
      </LocalizationProvider>

      <TextField
        label={t('amount_label')}
        value={amount}
        onChange={(e) => setAmount(e.target.value === '' ? '' : Number(e.target.value))}
        fullWidth
        margin="normal"
        type="number"
        inputProps={{ min: 0 }}
        error={!!errors.amount}
        helperText={errors.amount}
      />

      <TextField
        label={t('description_label')}
        value={description}
        onChange={(e) => setDescription(e.target.value)}
        fullWidth
        margin="normal"
        error={!!errors.description}
        helperText={errors.description}
      />

      <TextField
        label={t('comments_label')}
        value={comments}
        onChange={(e) => setComments(e.target.value)}
        fullWidth
        multiline
        rows={4}
        margin="normal"
        sx={{
          '& .MuiInputLabel-root': {
            transform: 'translate(14px, 14px) scale(1)',
          },
          '& .MuiInputLabel-shrink': {
            transform: 'translate(14px, -9px) scale(0.75)',
          },
          '& .MuiOutlinedInput-root': {
            paddingTop: '18px',
          },
        }}
      />

      <Box sx={{ display: 'flex', justifyContent: 'flex-end', mt: 2 }}>
        <Button onClick={onCancel} sx={{ mr: 2 }} disabled={isSubmitting}>
          {tGeneral('cancel')}
        </Button>
        <Button type="submit" variant="contained" color="primary" disabled={isSubmitting}>
          {isSubmitting ? <CircularProgress size={24} /> : tGeneral('save')}
        </Button>
      </Box>
    </Box>
  );
};

export default PurchaseBillForm;

```
--- FILE_END ---

--- FILE_START ---
PATH: src/components/DateRangeFilter.tsx
TYPE: typescript-react
CONTENT:
```
"use client";

import React, { useEffect, useState } from 'react'; // Import useEffect and useState
import { Box, TextField, Grid, Typography, Alert } from '@mui/material'; // Removed Button
import { useTranslations } from 'next-intl';
import { format, isValid, parseISO, isAfter } from 'date-fns';

export interface DateRangeFilterProps {
  onApplyFilter: (fromDate: string, toDate: string) => void; // Only onApplyFilter
  fromDate: string;
  toDate: string;
}

export const DateRangeFilter: React.FC<DateRangeFilterProps> = ({
  onApplyFilter,
  fromDate,
  toDate
}) => {
  const t = useTranslations('date_range_filter');
  const tSummary = useTranslations('summary');
  const [errorMessage, setErrorMessage] = useState<string | null>(null);

  // Internal state for the text fields, so validation can happen on change
  const [internalFromDate, setInternalFromDate] = useState(fromDate);
  const [internalToDate, setInternalToDate] = useState(toDate);

  // Keep internal state in sync with external props
  useEffect(() => {
    setInternalFromDate(fromDate);
    setInternalToDate(toDate);
  }, [fromDate, toDate]);

  // Effect to apply filter whenever internalFromDate or internalToDate changes
  useEffect(() => {
    setErrorMessage(null); // Clear previous errors

    // Only attempt to apply if both dates are selected
    if (!internalFromDate || !internalToDate) {
        // setErrorMessage(t('dates_not_selected')); // Optionally show this error if not selected
        return; // Don't apply filter if dates are not fully selected
    }

    const parsedFromDate = parseISO(internalFromDate);
    const parsedToDate = parseISO(internalToDate);

    if (!isValid(parsedFromDate) || !isValid(parsedToDate)) {
      setErrorMessage(t('invalid_date_format'));
      return;
    }

    if (isAfter(parsedFromDate, parsedToDate)) {
      setErrorMessage(t('from_date_after_to_date'));
      return;
    }

    // If validation passes, immediately apply filter
    onApplyFilter(internalFromDate, internalToDate);
  }, [internalFromDate, internalToDate, onApplyFilter, t]); // Add t as dependency

  return (
    <Box sx={{ mb: 3 }}>
      <Typography variant="h6" gutterBottom>{tSummary('filter_title')}</Typography>
      {errorMessage && <Alert severity="error" sx={{ mb: 2 }}>{errorMessage}</Alert>}
      <Grid
        container
        spacing={2}
        alignItems="center"
      >
        <Grid item xs={12} sm={6}> {/* Allocate space for From Date */}
          <TextField
            label={t('from_date')}
            type="date"
            value={internalFromDate}
            onChange={(e) => setInternalFromDate(e.target.value)} // Update internal state
            fullWidth
            InputLabelProps={{
              shrink: true,
            }}
          />
        </Grid>
        <Grid item xs={12} sm={6}> {/* Allocate space for To Date */}
          <TextField
            label={t('to_date')}
            type="date"
            value={internalToDate}
            onChange={(e) => setInternalToDate(e.target.value)} // Update internal state
            fullWidth
            InputLabelProps={{
              shrink: true,
            }}
          />
        </Grid>
      </Grid>
    </Box>
  );
};

export default DateRangeFilter;

```
--- FILE_END ---

--- FILE_START ---
PATH: src/components/ThemeProviderWrapper.tsx
TYPE: typescript-react
CONTENT:
```
"use client";

import React, { useState, useMemo, useEffect, createContext, useContext, useCallback } from 'react'; // Added useCallback here
import { ThemeProvider } from '@mui/material/styles';
import CssBaseline from '@mui/material/CssBaseline';
import { lightTheme, darkTheme } from '@/theme';

interface ThemeContextType {
  toggleTheme: () => void;
  mode: 'light' | 'dark';
}

export const ThemeContext = createContext<ThemeContextType | undefined>(undefined);

interface ThemeProviderWrapperProps {
  children: React.ReactNode;
}

const ThemeProviderWrapper: React.FC<ThemeProviderWrapperProps> = ({ children }) => {
  const [mode, setMode] = useState<'light' | 'dark'>('light');

  useEffect(() => {
    const savedMode = localStorage.getItem('themeMode') as 'light' | 'dark';
    if (savedMode) {
      setMode(savedMode);
    } else if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
      setMode('dark');
    }
  }, []);

  const theme = useMemo(() => (mode === 'light' ? lightTheme : darkTheme), [mode]);

  const toggleTheme = useCallback(() => {
    setMode((prevMode) => {
      const newMode = prevMode === 'light' ? 'dark' : 'light';
      localStorage.setItem('themeMode', newMode);
      return newMode;
    });
  }, []);

  const themeContextValue = useMemo(() => ({ toggleTheme, mode }), [toggleTheme, mode]);

  return (
    <ThemeContext.Provider value={themeContextValue}>
      <ThemeProvider theme={theme}>
        <CssBaseline />
        {children}
      </ThemeProvider>
    </ThemeContext.Provider>
  );
};

export default ThemeProviderWrapper;

```
--- FILE_END ---

--- FILE_START ---
PATH: src/components/NextIntlClientProviderWrapper.tsx
TYPE: typescript-react
CONTENT:
```
// src/components/NextIntlClientProviderWrapper.tsx
"use client";

import { NextIntlClientProvider } from "next-intl";
import { AbstractIntlMessages } from "next-intl";

interface NextIntlClientProviderWrapperProps {
  children: React.ReactNode;
  messages: AbstractIntlMessages;
  timeZone: string;
  locale: string; // CRITICAL FIX: Add locale to props
}

const NextIntlClientProviderWrapper: React.FC<NextIntlClientProviderWrapperProps> = ({
  children,
  messages,
  timeZone,
  locale, // CRITICAL FIX: Destructure locale
}) => {
  return (
    // CRITICAL FIX: Pass locale to NextIntlClientProvider
    <NextIntlClientProvider messages={messages} timeZone={timeZone} locale={locale}>
      {children}
    </NextIntlClientProvider>
  );
};

export default NextIntlClientProviderWrapper;

```
--- FILE_END ---

--- FILE_START ---
PATH: src/components/SummaryPageClient.tsx
TYPE: typescript-react
CONTENT:
```
"use client";

import React, { useState, useEffect, useMemo, useCallback, useRef } from 'react'; // Added useRef
import { useTranslations } from 'next-intl';
import {
  Container,
  Typography,
  Box,
  CircularProgress,
  Alert,
  Grid,
  Button,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Card,
  CardContent,
  useTheme,
  useMediaQuery,
} from '@mui/material';
import { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';
import { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';
import { DatePicker } from '@mui/x-date-pickers/DatePicker';
import { format, parseISO, isValid, addDays } from 'date-fns';
import { enUS, ja } from 'date-fns/locale';

import { useRouter, usePathname } from 'next/navigation';
import {
  BarChart,
  Bar,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  Legend,
  ResponsiveContainer,
  PieChart,
  Pie,
  Cell,
} from 'recharts';
import DailyBillSummary from './DailyBillSummary'; // Correctly importing DailyBillSummary
import { calculateDailySummariesForRange, DailySummary } from '@/lib/calculations';

// Define the Bill type to match what's passed from summary/page.tsx and calculations.ts expects
interface Bill {
  id: string;
  date: string; // ISO string 'yyyy-MM-dd'
  foodAmount: number; // Now explicitly foodAmount
  drinkAmount: number; // Now explicitly drinkAmount
  mealType: 'lunch' | 'dinner';
  isOurFood: boolean;
  numberOfPeopleWorkingDinner: number;
  comments?: string | null;
}

interface SummaryPageClientProps {
  locale: string;
  initialBills: Bill[];
  initialFromDate?: string;
  initialToDate?: string;
  initialError?: string | null;
}

// Define colors for the pie chart
const PIE_COLORS = ['#8884d8', '#82ca9d', '#ffc658', '#ff7300'];

const SummaryPageClient: React.FC<SummaryPageClientProps> = ({
  locale,
  initialBills,
  initialFromDate,
  initialToDate,
  initialError,
}) => {
  const t = useTranslations('summary');
  const tGeneral = useTranslations('general');
  const tMealType = useTranslations('meal_type');

  const router = useRouter();
  const pathname = usePathname();
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('sm'));

  const [bills, setBills] = useState<Bill[]>(initialBills);
  const [loading, setLoading] = useState<boolean>(false);
  const [error, setError] = useState<string | null>(initialError);

  const [fromDate, setFromDate] = useState<Date | null>(
    initialFromDate ? parseISO(initialFromDate) : null
  );
  const [toDate, setToDate] = useState<Date | null>(
    initialToDate ? parseISO(initialToDate) : null
  );
  
  const [selectedDailySummaryEntry, setSelectedDailySummaryEntry] = useState<{ date: string; summary: DailySummary } | null>(null);

  // Ref for the DailyBillSummary section
  const dailyBillSummaryRef = useRef<HTMLDivElement>(null);

  const dateFnsLocale = useMemo(() => {
    return locale === 'ja' ? ja : enUS;
  }, [locale]);

  const dailySummariesForRange = useMemo(() => {
    const calculatedSummaries = calculateDailySummariesForRange(bills);
    return calculatedSummaries;
  }, [bills]);

  useEffect(() => {
    setBills(initialBills);
    setError(initialError);
    setFromDate(initialFromDate && isValid(parseISO(initialFromDate)) ? parseISO(initialFromDate) : null);
    setToDate(initialToDate && isValid(parseISO(initialToDate)) ? parseISO(initialToDate) : null);
    setSelectedDailySummaryEntry(null); 
  }, [initialBills, initialError, initialFromDate, initialToDate]);

  const fetchBills = useCallback(async () => {
    setLoading(true);
    setError(null);

    let fromDateStr = fromDate && isValid(fromDate) ? format(fromDate, 'yyyy-MM-dd') : '';
    let toDateStr = toDate && isValid(toDate) ? format(toDate, 'yyyy-MM-dd') : '';

    if (!fromDate || !isValid(fromDate) || !toDate || !isValid(toDate)) {
      setError(t('errors.invalid_date_range') || 'Invalid date range selected.');
      setLoading(false);
      return;
    }
    if (fromDate > toDate) {
      setError(t('errors.date_range_order') || 'From date cannot be after To date.');
      setLoading(false);
      return;
    }

    const queryParams = new URLSearchParams();
    queryParams.append('from', fromDateStr);
    queryParams.append('to', toDateStr);

    const apiUrl = `/api/reports?${queryParams.toString()}`;

    try {
      const response = await fetch(apiUrl);
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.message || 'Failed to fetch bills');
      }
      const data: Bill[] = await response.json();
      setBills(data);
    } catch (err: any) {
      console.error('SummaryPageClient: Error fetching bills (client-side):', err);
      setError(err.message || 'An unexpected error occurred.');
    } finally {
      setLoading(false);
    }
  }, [fromDate, toDate, t]);

  const handleApplyFilter = useCallback(() => {
    const currentPath = pathname.replace(`/${locale}`, '');
    const query = new URLSearchParams();
    if (fromDate && isValid(fromDate)) {
      query.append('from', format(fromDate, 'yyyy-MM-dd'));
    }
    if (toDate && isValid(toDate)) {
      query.append('to', format(toDate, 'yyyy-MM-dd'));
    }
    
    router.push(`/${locale}${currentPath}?${query.toString()}`);
  }, [fromDate, toDate, pathname, router, locale]);

  const handleBarClick = useCallback((data: { date: string; fullDate: string; earnings: number }) => {
    const clickedFullDate = data.fullDate;
    const foundSummary = dailySummariesForRange.find(entry => entry.date === clickedFullDate);
    if (foundSummary) {
      setSelectedDailySummaryEntry(foundSummary);
      // Scroll to the DailyBillSummary component on mobile
      if (isMobile && dailyBillSummaryRef.current) {
        dailyBillSummaryRef.current.scrollIntoView({ behavior: 'smooth', block: 'start' });
      }
    } else {
      setSelectedDailySummaryEntry(null);
      console.error('No daily summary found for clicked date:', clickedFullDate);
    }
  }, [dailySummariesForRange, isMobile]); // Added isMobile to dependencies

  const dailyEarningsData = useMemo(() => {
    const chartData = dailySummariesForRange
      .map(entry => {
        const parsedDate = parseISO(entry.date);
        if (!isValid(parsedDate)) {
          console.error('SummaryPageClient: Invalid date encountered:', entry.date);
        }
        const formattedDate = isValid(parsedDate) ? format(parsedDate, 'MMM dd', { locale: dateFnsLocale }) : 'Invalid Date';
        return {
          date: formattedDate,
          fullDate: entry.date,
          earnings: entry.summary.dayTotalEarnings,
        };
      })
      .sort((a, b) => a.fullDate.localeCompare(b.fullDate));
    return chartData;
  }, [dailySummariesForRange, dateFnsLocale]);

  const mealTypeDistributionData = useMemo(() => {
    const mealTypeMap: { [key: string]: number } = {
      lunch: 0,
      dinner: 0,
    };
    bills.forEach(bill => {
      mealTypeMap[bill.mealType] += (bill.foodAmount + bill.drinkAmount);
    });

    const data = [];
    if (mealTypeMap.lunch > 0) {
      data.push({ name: tMealType('lunch'), value: mealTypeMap.lunch });
    }
    if (mealTypeMap.dinner > 0) {
      data.push({ name: tMealType('dinner'), value: mealTypeMap.dinner });
    }
    return data;
  }, [bills, tMealType]);

  const totalEarnings = useMemo(() => {
    return dailySummariesForRange.reduce((sum, entry) => sum + entry.summary.dayTotalEarnings, 0);
  }, [dailySummariesForRange]);

  return (
    <Container maxWidth="lg" sx={{ mt: 4, mb: 4 }}>
      <Typography variant="h4" component="h1" gutterBottom>
        {t('summary_title')}
      </Typography>

      {error && (
        <Alert severity="error" sx={{ mb: 3 }}>
          {error}
        </Alert>
      )}

      {/* Filter controls */}
      <Grid container spacing={3} alignItems="center" sx={{ mb: 4 }}>
        <Grid sx={{ gridColumn: { xs: 'span 12', sm: 'span 6', md: 'span 3' } }}>
          <LocalizationProvider dateAdapter={AdapterDateFns} adapterLocale={dateFnsLocale}>
            <DatePicker
              label={t('from_date')}
              value={fromDate}
              onChange={(newValue) => setFromDate(newValue)}
              slotProps={{ textField: { fullWidth: true, variant: 'outlined', size: 'small', sx: { borderRadius: 2 } } }}
            />
          </LocalizationProvider>
        </Grid>
        <Grid sx={{ gridColumn: { xs: 'span 12', sm: 'span 6', md: 'span 3' } }}>
          <LocalizationProvider dateAdapter={AdapterDateFns} adapterLocale={dateFnsLocale}>
            <DatePicker
              label={t('to_date')}
              value={toDate}
              onChange={(newValue) => setToDate(newValue)}
              slotProps={{ textField: { fullWidth: true, variant: 'outlined', size: 'small', sx: { borderRadius: 2 } } }}
            />
          </LocalizationProvider>
        </Grid>
        <Grid sx={{ gridColumn: { xs: 'span 12', sm: 'span 6', md: 'span 3' } }}>
          <Button
            variant="contained"
            color="primary"
            onClick={handleApplyFilter}
            disabled={loading}
            fullWidth
            sx={{ height: '40px', borderRadius: 2 }}
          >
            {loading ? <CircularProgress size={24} color="inherit" /> : t('apply_filter')}
          </Button>
        </Grid>
      </Grid>

      {/* Total Earnings Card */}
      <Card sx={{ mb: 4, borderRadius: 3, boxShadow: 3 }}>
        <CardContent>
          <Typography variant="h5" component="h2" gutterBottom>
            {t('total_earnings')}
          </Typography>
          <Typography variant="h4" color="primary">
            ¥{totalEarnings.toLocaleString(locale)}
          </Typography>
        </CardContent>
      </Card>

      {/* Charts Grid Container */}
      <Grid container spacing={4} sx={{ display: 'grid', gridTemplateColumns: { xs: 'repeat(1, 1fr)', md: 'repeat(2, 1fr)' }, gap: theme.spacing(4) }}>
        {/* Bar Chart Grid Item */}
        <Grid sx={{
          gridColumn: { xs: 'span 1', md: 'span 1' },
          display: 'flex',
          flexDirection: 'column',
          minWidth: 0,
          height: '400px',
        }}>
          <Card
            sx={{
              borderRadius: 3,
              boxShadow: 3,
              width: '100%',
              height: '100%',
              display: 'flex',
              flexDirection: 'column',
            }}
          >
            <CardContent sx={{ flexGrow: 1, display: 'flex', flexDirection: 'column' }}>
              <Typography variant="h6" gutterBottom>{t('daily_earnings_chart')}</Typography>
              <Box sx={{ flexGrow: 1, width: '100%', height: '100%' }}>
                <ResponsiveContainer width="100%" height="100%">
                  <BarChart
                    data={dailyEarningsData}
                    margin={{ top: 20, right: 30, left: 20, bottom: 5 }}
                  >
                    <CartesianGrid strokeDasharray="3 3" />
                    <XAxis dataKey="date" style={{ fontSize: '0.75rem' }} />
                    <YAxis tickFormatter={(value) => `¥${value.toLocaleString(locale)}`} style={{ fontSize: '0.75rem' }} />
                    <Tooltip formatter={(value: number) => `¥${value.toLocaleString(locale)}`} />
                    <Legend />
                    <Bar
                      dataKey="earnings"
                      name={t('earnings')}
                      fill="#8884d8"
                      radius={[10, 10, 0, 0]}
                      onClick={handleBarClick}
                      cursor="pointer"
                    />
                  </BarChart>
                </ResponsiveContainer>
              </Box>
            </CardContent>
          </Card>
        </Grid>

        {/* Pie Chart Grid Item */}
        <Grid sx={{
          gridColumn: { xs: 'span 1', md: 'span 1' },
          display: 'flex',
          flexDirection: 'column',
          minWidth: 0,
          height: '400px',
        }}>
          <Card
            sx={{
              borderRadius: 3,
              boxShadow: 3,
              width: '100%',
              height: '100%',
              display: 'flex',
              flexDirection: 'column',
            }}
          >
            <CardContent sx={{ flexGrow: 1, display: 'flex', flexDirection: 'column' }}>
              <Typography variant="h6" gutterBottom>{t('meal_type_distribution_chart')}</Typography>
              <Box sx={{ flexGrow: 1, width: '100%', height: '100%' }}>
                <ResponsiveContainer width="100%" height="100%">
                  <PieChart>
                    <Pie
                      data={mealTypeDistributionData}
                      cx="50%"
                      cy="50%"
                      outerRadius={isMobile ? 80 : 120}
                      fill="#8884d8"
                      dataKey="value"
                      label={({ name, percent }) => `${name} ${(percent * 100).toFixed(0)}%`}
                      activeShape={false}
                    >
                      {mealTypeDistributionData.map((entry, index) => (
                        <Cell key={`cell-${index}`} fill={PIE_COLORS[index % PIE_COLORS.length]} />
                      ))}
                    </Pie>
                    <Tooltip formatter={(value: number) => `¥${value.toLocaleString(locale)}`} />
                    <Legend />
                  </PieChart>
                </ResponsiveContainer>
              </Box>
            </CardContent>
          </Card>
        </Grid>
      </Grid>

      {/* DailyBillSummary Section - Attach ref here */}
      {selectedDailySummaryEntry && (
        <Box ref={dailyBillSummaryRef} sx={{ mt: 4 }}> {/* Attach the ref */}
          <DailyBillSummary
            date={selectedDailySummaryEntry.date}
            dailySummary={selectedDailySummaryEntry.summary}
            locale={locale}
            onClose={() => setSelectedDailySummaryEntry(null)}
          />
        </Box>
      )}

      {/* No bills found message */}
      {!loading && !bills.length && (
        <Typography sx={{ mt: 2 }}>
          {t('no_bills_found')}
        </Typography>
      )}
    </Container>
  );
};

export default SummaryPageClient;

```
--- FILE_END ---

--- FILE_START ---
PATH: src/components/DashboardPageClient.tsx
TYPE: typescript-react
CONTENT:
```
"use client";

import { useSession } from 'next-auth/react';
import { useRouter, useParams, usePathname } from 'next/navigation';
import React, { useEffect, useState, useMemo, useCallback } from 'react';
import BillForm from '@/components/BillForm';
import DailySummaryCard from '@/components/DailySummaryCard';
import BillList from '@/components/BillList';
import Box from '@mui/material/Box';
import Typography from '@mui/material/Typography';
import CircularProgress from '@mui/material/CircularProgress';
import Alert from '@mui/material/Alert';
import Button from '@mui/material/Button';
import Dialog from '@mui/material/Dialog';
import DialogActions from '@mui/material/DialogActions';
import DialogContent from '@mui/material/DialogContent';
import DialogContentText from '@mui/material/DialogContentText';
import DialogTitle from '@mui/material/DialogTitle';
import IconButton from '@mui/material/IconButton';
import ArrowBackIosIcon from '@mui/icons-material/ArrowBackIos';
import ArrowForwardIosIcon from '@mui/icons-material/ArrowForwardIos';
import CloseIcon from '@mui/icons-material/Close';
import { useTheme, useMediaQuery } from '@mui/material';

import { format, addDays, subDays } from 'date-fns';
import { enUS, ja } from 'date-fns/locale';
import { useTranslations } from 'next-intl';

import { Bill } from '@/types/Bill'; // Ensure this type is correct and accessible
import { calculateDailyEarnings } from '@/lib/calculations'; // Ensure this import path is correct

const DashboardPageClient: React.FC = () => {
  const { data: session, status } = useSession();
  const router = useRouter();
  const params = useParams();
  const locale = params.locale as string;
  const pathname = usePathname();

  const [currentDate, setCurrentDate] = useState(new Date());

  const dateFnsLocale = useMemo(() => {
    return locale === 'ja' ? ja : enUS;
  }, [locale]);

  const formattedCurrentDate = format(currentDate, 'yyyy-MM-dd', { locale: dateFnsLocale });

  const [billsForDate, setBillsForDate] = useState<Bill[]>([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const [isModalOpen, setIsModalOpen] = useState(false);
  const [editingBillId, setEditingBillId] = useState<string | undefined>(undefined);
  const [initialBillData, setInitialBillData] = useState<Bill | undefined>(undefined);
  const [isModalLoading, setIsModalLoading] = useState(false);

  const [openConfirmDelete, setOpenConfirmDelete] = useState(false);
  const [billToDeleteId, setBillToDeleteId] = useState<number | null>(null);
  const [isDeleting, setIsDeleting] = useState(false);
  const [deleteError, setDeleteError] = useState<string | null>(null);

  const t = useTranslations('dashboard');
  const tGeneral = useTranslations();
  const tBillForm = useTranslations('bill_form');

  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('sm'));

  // This is where the summary is calculated from the fetched bills
  const dailySummary = useMemo(() => {
    return calculateDailyEarnings(billsForDate);
  }, [billsForDate]);

  const fetchBillsForDate = useCallback(async (dateToFetch: Date) => {
    if (status !== 'authenticated') {
      return;
    }

    setLoading(true);
    setError(null);

    const formattedDateToFetch = format(dateToFetch, 'yyyy-MM-dd');

    try {
      // Ensure the API endpoint is correct and returns the expected Bill structure
      const res = await fetch(`/${locale}/api/reports?from=${formattedDateToFetch}&to=${formattedDateToFetch}`);
      if (!res.ok) {
        const err = await res.json();
        throw new Error(err.error || tGeneral('errors.failed_fetch'));
      }
      const data = await res.json();

      // IMPORTANT: Ensure data.bills is an array and its elements match the Bill type
      const processedBills: Bill[] = data.bills.map((bill: any) => ({
        ...bill,
        // Ensure date is a string in 'yyyy-MM-dd' format
        date: format(new Date(bill.date), 'yyyy-MM-dd'),
        // Ensure mealType is correctly typed as 'lunch' or 'dinner'
        mealType: bill.mealType.toString().toLowerCase() as 'lunch' | 'dinner',
        // Provide defaults for optional fields if they might be null/undefined from API
        isOurFood: bill.isOurFood ?? true, // Default to true if not provided
        numberOfPeopleWorkingDinner: bill.numberOfPeopleWorkingDinner ?? 1, // Default to 1 if not provided
        comments: bill.comments ?? null,
      }));
      setBillsForDate(processedBills);

    } catch (err: any) {
      console.error("Error fetching bills for date:", err); // Log the error for debugging
      setError(err.message || tGeneral('errors.failed_fetch'));
      setBillsForDate([]); // Ensure bills are cleared on error
    } finally {
      setLoading(false);
    }
  }, [status, locale, tGeneral]);

  useEffect(() => {
    if (status === 'loading') return;
    if (
      status === 'unauthenticated' &&
      pathname !== `/${locale}`
    ) {
      router.push(`/${locale}`);
    }
  }, [status, router, locale, pathname]);

  useEffect(() => {
    if (status === 'authenticated') {
      fetchBillsForDate(currentDate);
    }
  }, [status, locale, currentDate, fetchBillsForDate]);

  const handleCloseModal = useCallback(() => {
    setIsModalOpen(false);
    setEditingBillId(undefined);
    setInitialBillData(undefined);
    setError(null);
  }, []);

  const handleOpenAddModal = useCallback(() => {
    setEditingBillId(undefined);
    setInitialBillData(undefined);
    setIsModalOpen(true);
    setIsModalLoading(false);
  }, []);

  const handleOpenEditModal = useCallback(async (billId: string) => {
    setEditingBillId(billId);
    setInitialBillData(undefined);
    setIsModalOpen(true);
    setIsModalLoading(true);

    try {
      const response = await fetch(`/${locale}/api/bills/${billId}`);
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || `Error: ${response.status}`);
      }
      const data: Bill = await response.json();
      const formattedData = {
        ...data,
        date: format(new Date(data.date), 'yyyy-MM-dd'),
        mealType: data.mealType.toString().toLowerCase() as 'lunch' | 'dinner',
        isOurFood: data.isOurFood ?? true,
        numberOfPeopleWorkingDinner: data.numberOfPeopleWorkingDinner ?? 1,
        comments: data.comments ?? null,
      };
      setInitialBillData(formattedData);
    } catch (err: any) {
      console.error("Error fetching bill for edit:", err); // Log the error
      setError(err.message || tGeneral('errors.failed_fetch'));
      handleCloseModal();
    } finally {
      setIsModalLoading(false);
    }
  }, [locale, tGeneral, handleCloseModal]);

  const handleBillFormSubmit = useCallback(async (formData: Omit<Bill, 'id'>, currentBillId?: string) => {
    setIsModalLoading(true);
    setError(null);

    const method = currentBillId ? 'PUT' : 'POST';
    const url = currentBillId ? `/${locale}/api/bills/${currentBillId}` : `/${locale}/api/bills`;

    try {
      const res = await fetch(url, {
        method,
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(formData),
      });

      if (!res.ok) {
        const err = await res.json();
        throw new Error(err.error || tGeneral('errors.failed_fetch'));
      }

      handleCloseModal();
      fetchBillsForDate(currentDate);

    } catch (err: any) {
      console.error("Error submitting bill form:", err); // Log the error
      setError(err.message || (currentBillId ? tBillForm('edit_error') : tBillForm('add_error')));
    } finally {
      setIsModalLoading(false);
    }
  }, [locale, tGeneral, tBillForm, handleCloseModal, fetchBillsForDate, currentDate]);

  const handleOpenConfirmDelete = useCallback((id: number) => {
    setBillToDeleteId(id);
    setOpenConfirmDelete(true);
    setDeleteError(null);
  }, []);

  const handleCloseConfirmDelete = useCallback(() => {
    setOpenConfirmDelete(false);
    setBillToDeleteId(null);
    setDeleteError(null);
  }, []);

  const handleDeleteBill = useCallback(async () => {
    if (billToDeleteId === null) return;

    setOpenConfirmDelete(false);
    setIsDeleting(true);
    setDeleteError(null);

    try {
      const res = await fetch(`/${locale}/api/bills/${billToDeleteId}`, {
        method: 'DELETE',
      });

      if (!res.ok) {
        const err = await res.json();
        throw new Error(err.error || tGeneral('edit.delete_bill_error', { error: '' }));
      }

      setBillToDeleteId(null);
      fetchBillsForDate(currentDate);

    } catch (err: any) {
      console.error("Error deleting bill:", err); // Log the error
      setDeleteError(err.message || tGeneral('errors.failed_fetch'));
    } finally {
      setIsDeleting(false);
    }
  }, [billToDeleteId, locale, tGeneral, fetchBillsForDate, currentDate]);

  const handlePreviousDay = useCallback(() => {
    setCurrentDate(prevDate => subDays(prevDate, 1));
  }, []);

  const handleNextDay = useCallback(() => {
    setCurrentDate(prevDate => addDays(prevDate, 1));
  }, []);

  let content;

  if (status === 'loading' || (loading && !isModalOpen && !isDeleting)) {
    content = (
      <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', minHeight: '80vh' }}>
        <CircularProgress />
      </Box>
    );
  } else if (status === 'authenticated') {
    content = (
      <>
        <Typography variant="h4" gutterBottom>
          {t('title')}
        </Typography>

        {error && <Alert severity="error" sx={{ mb: 2 }}>{error}</Alert>}
        {deleteError && <Alert severity="error" sx={{ mb: 2 }}>{deleteError}</Alert>}
        {isDeleting && <Alert severity="info" sx={{ mb: 2 }}>{tGeneral('edit.deleting')}</Alert>}

        <Box sx={{ mb: 3 }}>
          <Button variant="contained" onClick={handleOpenAddModal}>
            {t('add_bill_entry')}
          </Button>
        </Box>

        <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', mt: 4, mb: 2 }}>
          <IconButton onClick={handlePreviousDay} aria-label="previous day"
            sx={{ color: 'inherit' }}
          >
            <ArrowBackIosIcon />
          </IconButton>
          <Typography
            variant={isMobile ? "h6" : "h5"}
            sx={{ flexGrow: 1, textAlign: 'center', whiteSpace: 'nowrap', overflow: 'hidden', textOverflow: 'ellipsis' }}
          >
            {t('summary_for_date', { date: formattedCurrentDate })}
          </Typography>
          <IconButton onClick={handleNextDay} aria-label="next day"
            sx={{ color: 'inherit' }}
          >
            <ArrowForwardIosIcon />
          </IconButton>
        </Box>

        {loading && (
          <Box sx={{ display: 'flex', justifyContent: 'center', my: 3 }}>
            <CircularProgress />
          </Box>
        )}

        {!loading && dailySummary && (
          <DailySummaryCard
            date={formattedCurrentDate}
            summary={dailySummary}
          />
        )}

        {!loading && billsForDate.length > 0 ? (
          <BillList
            bills={billsForDate}
            onEdit={handleOpenEditModal}
            onDelete={handleOpenConfirmDelete}
          />
        ) : !loading && (
          <Typography sx={{ mt: 2 }}>
            {t('no_entries_today')}
          </Typography>
        )}

        <Dialog open={isModalOpen} onClose={handleCloseModal} fullWidth maxWidth="sm">
          <DialogTitle>
            {editingBillId ? tBillForm('edit_title') : tBillForm('add_title')}
            <IconButton
              aria-label="close"
              onClick={handleCloseModal}
              sx={{
                position: 'absolute',
                right: 8,
                top: 8,
                color: (theme) => theme.palette.grey[500],
              }}
            >
              <CloseIcon />
            </IconButton>
          </DialogTitle>
          <DialogContent dividers>
            <BillForm
              key={editingBillId || 'add-bill-form'}
              billId={editingBillId}
              initialBill={initialBillData}
              onSubmit={handleBillFormSubmit}
              isSubmitting={isModalLoading}
              defaultDate={currentDate}
              onCancel={handleCloseModal}
            />
          </DialogContent>
        </Dialog>

        <Dialog
          open={openConfirmDelete}
          onClose={handleCloseConfirmDelete}
          aria-labelledby="alert-dialog-title"
          aria-describedby="alert-dialog-description"
        >
          <DialogTitle id="alert-dialog-title">{tGeneral('edit.delete_confirm_title')}</DialogTitle>
          <DialogContent>
            <DialogContentText id="alert-dialog-description">
              {tGeneral('edit.delete_confirm_message', { id: billToDeleteId ?? '' })}
            </DialogContentText>
          </DialogContent>
          <DialogActions>
            <Button onClick={handleCloseConfirmDelete} disabled={isDeleting}>{tGeneral('edit.cancel')}</Button>
            <Button onClick={handleDeleteBill} color="error" autoFocus disabled={isDeleting}>
              {isDeleting ? <CircularProgress size={24} /> : tGeneral('edit.delete')}</Button>
          </DialogActions>
        </Dialog>
      </>
    );
  } else {
    content = null;
  }

  return content;
};

export default DashboardPageClient;

```
--- FILE_END ---

--- FILE_START ---
PATH: src/components/SessionProvider.tsx
TYPE: typescript-react
CONTENT:
```
// src/components/SessionProvider.tsx
"use client"; // This directive MUST be the very first line

import { SessionProvider as NextAuthSessionProvider } from 'next-auth/react';
import { Session } from 'next-auth';
import { ReactNode } from 'react';

interface SessionProviderProps {
  children: ReactNode;
  session: Session | null;
}

export function SessionProvider({ children, session }: SessionProviderProps) {
  return (
    <NextAuthSessionProvider session={session}>
      {children}
    </NextAuthSessionProvider>
  );
}

```
--- FILE_END ---

--- FILE_START ---
PATH: src/components/ThemeToggleButton.tsx
TYPE: typescript-react
CONTENT:
```
"use client";

import React, { useContext } from 'react';
import IconButton from '@mui/material/IconButton';
import Brightness4Icon from '@mui/icons-material/Brightness4'; // Moon icon for dark mode
import Brightness7Icon from '@mui/icons-material/Brightness7'; // Sun icon for light mode
import { ThemeContext } from './ThemeProviderWrapper'; // Import the ThemeContext

const ThemeToggleButton: React.FC = () => {
  const themeContext = useContext(ThemeContext);

  if (!themeContext) {
    // This should ideally not happen if ThemeProviderWrapper is correctly wrapping the app
    console.error('ThemeContext not found. Ensure ThemeToggleButton is wrapped by ThemeProviderWrapper.');
    return null;
  }

  const { toggleTheme, mode } = themeContext;

  return (
    <IconButton onClick={toggleTheme} color="inherit" aria-label="toggle theme">
      {mode === 'dark' ? <Brightness7Icon /> : <Brightness4Icon />}
    </IconButton>
  );
};

export default ThemeToggleButton;

```
--- FILE_END ---

--- FILE_START ---
PATH: src/components/LanguageSwitcherSelect.tsx
TYPE: typescript-react
CONTENT:
```
// src/components/LanguageSwitcherSelect.tsx
// This is a Client Component that handles the actual locale selection and change
// using next/navigation to change the route and thus the locale.
"use client";

// Import hooks from react
import { useState, useTransition, ChangeEvent, ReactNode } from 'react';
// Import hooks from next/navigation
import { useParams, useRouter, usePathname } from 'next/navigation';
// Import MUI components
import Box from '@mui/material/Box';
import Button from '@mui/material/Button';
import Menu from '@mui/material/Menu';
import MenuItem from '@mui/material/MenuItem';
import ArrowDropDownIcon from '@mui/icons-material/ArrowDropDown';
// useTranslations is from 'next-intl', but we'll pass it down from the parent
// import { useTranslations } from 'next-intl';


// Define props for this component
interface LanguageSwitcherSelectProps {
  // We'll pass the current locale and translation function from the parent
  currentLocale: string;
  t: (key: string) => string; // Simplified type for translation function
}

const LanguageSwitcherSelect: React.FC<LanguageSwitcherSelectProps> = ({ currentLocale, t }) => {
  // Use Next.js router for navigation
  const router = useRouter();
  // Use Next.js hooks to get current path and params
  const pathname = usePathname();
  const params = useParams();

  // Hook for pending state during transition
  const [isPending, startTransition] = useTransition();

  const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);
  const open = Boolean(anchorEl);

  const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {
    setAnchorEl(event.currentTarget);
  };

  const handleClose = () => {
    setAnchorEl(null);
  };

  const handleMenuItemClick = (nextLocale: string) => {
    // Manually construct the new path with the selected locale
    // Assuming the locale is the first segment in the path (e.g., /en/dashboard)
    // This approach might need adjustment based on your exact routing structure
    const segments = pathname.split('/');
    // Replace the current locale segment with the new locale
    segments[1] = nextLocale;
    const newPath = segments.join('/');

    // Start a transition when changing locale
    startTransition(() => {
      // Use router.replace to change the route, which triggers the locale change
      router.replace(newPath);
    });
    handleClose();
  };

  return (
    <Box sx={{ ml: 1 }}> {/* Add some margin */}
       <Button
           id="language-switcher-button"
           aria-controls={open ? 'language-switcher-menu' : undefined}
           aria-haspopup="true"
           aria-expanded={open ? 'true' : undefined}
           onClick={handleClick}
           color="inherit"
           endIcon={<ArrowDropDownIcon />} // Keep MUI icon
           disabled={isPending} // Disable button while transitioning
       >
           {/* Display current locale or a label */}
           {currentLocale.toUpperCase()}
       </Button>
       <Menu
           id="language-switcher-menu"
           anchorEl={anchorEl}
           open={open}
           onClose={handleClose}
           MenuListProps={{
               'aria-labelledby': 'language-switcher-button',
           }}
       >
           {/* Add MenuItems for each supported locale */}
           {/* Replace with your actual supported locales */}
           <MenuItem onClick={() => handleMenuItemClick('en')} selected={currentLocale === 'en'}>
               English
           </MenuItem>
           <MenuItem onClick={() => handleMenuItemClick('ja')} selected={currentLocale === 'ja'}>
               日本語
           </MenuItem>
           {/* Add more MenuItems for other locales if needed */}
       </Menu>
    </Box>
  );
};

export default LanguageSwitcherSelect;

```
--- FILE_END ---

--- FILE_START ---
PATH: src/components/PurchaseBillList.tsx
TYPE: typescript-react
CONTENT:
```
"use client";

import React, { useCallback } from 'react'; // Added useCallback
import {
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Paper,
  Typography,
  Box,
  IconButton,
  useMediaQuery,
  useTheme,
  List,
  ListItem,
  ListItemText,
  Grid,
} from '@mui/material';
import { Edit as EditIcon, Delete as DeleteIcon } from '@mui/icons-material';
import { useTranslations } from 'next-intl';
import { format, parseISO } from 'date-fns';

interface PurchaseBill {
  id: string;
  date: string;
  amount: number;
  description: string;
  comments?: string | null;
}

interface PurchaseBillListProps {
  purchaseBills: PurchaseBill[];
  onEdit: (purchaseBillId: string) => void;
  onDelete: (purchaseBillId: string) => void;
}

const PurchaseBillList: React.FC<PurchaseBillListProps> = ({ purchaseBills, onEdit, onDelete }) => {
  const t = useTranslations('purchase_bill_list');
  const tErrors = useTranslations('errors');
  const tGeneral = useTranslations('general');

  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('sm'));

  const formatCurrency = useCallback((amount: number | string) => { // Using useCallback
    let numericAmount: number;
    if (typeof amount === 'string') {
      const cleanedString = amount.replace(/[¥,]/g, '');
      numericAmount = Number(cleanedString);
    } else {
      numericAmount = amount;
    }
    if (isNaN(numericAmount)) {
      numericAmount = 0;
    }
    return `¥${numericAmount.toLocaleString()}`;
  }, []);

  const handleDeleteClick = useCallback((billId: string) => { // Using useCallback
    onDelete(billId);
  }, [onDelete]);

  if (!purchaseBills || purchaseBills.length === 0) {
    return (
      <Paper elevation={2} sx={{ p: 2, mb: 2, textAlign: 'center', borderRadius: 2 }}>
        <Typography variant="body1">{tErrors('no_purchase_bills_found')}</Typography>
      </Paper>
    );
  }

  return (
    <Box sx={{ width: '100%' }}>
      {isMobile ? (
        <List sx={{ width: '100%', bgcolor: 'background.paper', p: 0 }}>
          {purchaseBills.map((pb) => (
            <Paper key={pb.id} elevation={2} sx={{ mb: 2, p: 2, borderRadius: 2 }}>
              <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 1 }}>
                <Typography variant="body2" color="text.secondary">{t('date')}:</Typography>
                <Typography component="span" variant="body1" color="text.primary" sx={{ fontWeight: 'medium' }}>
                  {format(parseISO(pb.date), 'yyyy-MM-dd')}
                </Typography>
              </Box>
              
              <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 1 }}>
                <Typography variant="body2" color="text.secondary">{t('amount')}:</Typography>
                <Typography component="span" variant="body1" color="text.primary" sx={{ fontWeight: 'medium' }}>
                  {formatCurrency(pb.amount)}
                </Typography>
              </Box>

              <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start', mb: 1 }}>
                <Typography variant="body2" color="text.secondary">{t('description')}:</Typography>
                <Typography component="span" variant="body1" color="text.primary" sx={{ fontWeight: 'medium', textAlign: 'right', flexGrow: 1, ml: 1 }}>
                  {pb.description}
                </Typography>
              </Box>

              <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start', mb: 1 }}>
                <Typography variant="body2" color="text.secondary">{t('comments')}:</Typography>
                <Typography component="span" variant="body1" color="text.primary" sx={{ fontWeight: 'medium', textAlign: 'right', flexGrow: 1, ml: 1 }}>
                  {pb.comments || '-'}
                </Typography>
              </Box>
              
              <Box sx={{ display: 'flex', justifyContent: 'flex-end', pt: 2, borderTop: '1px solid', borderColor: 'divider', mt: 1 }}>
                <IconButton onClick={() => onEdit(pb.id.toString())} color="primary" aria-label={tGeneral('edit_button')}>
                  <EditIcon />
                </IconButton>
                <IconButton onClick={() => handleDeleteClick(pb.id.toString())} color="error" aria-label={tGeneral('delete')}>
                  <DeleteIcon />
                </IconButton>
              </Box>
            </Paper>
          ))}
        </List>
      ) : (
        <TableContainer component={Paper} elevation={3} sx={{ borderRadius: 3 }}>
          <Table sx={{ minWidth: 650 }} aria-label="purchase bill list">
            <TableHead>
              <TableRow>
                <TableCell>{t('date')}</TableCell>
                <TableCell align="right">{t('amount')}</TableCell>
                <TableCell>{t('description')}</TableCell>
                <TableCell>{t('comments')}</TableCell>
                <TableCell align="center">{t('actions')}</TableCell>
              </TableRow>
            </TableHead>
            <TableBody>
              {purchaseBills.map((pb) => (
                <TableRow key={pb.id}>
                  <TableCell component="th" scope="row">
                    {format(parseISO(pb.date), 'yyyy-MM-dd')}
                  </TableCell>
                  <TableCell align="right">{formatCurrency(pb.amount)}</TableCell>
                  <TableCell>{pb.description}</TableCell>
                  <TableCell sx={{ maxWidth: 200, overflow: 'hidden', textOverflow: 'ellipsis', whiteSpace: 'nowrap' }}>
                    {pb.comments || '-'}
                  </TableCell>
                  <TableCell align="center">
                    <IconButton onClick={() => onEdit(pb.id.toString())} color="primary" aria-label={tGeneral('edit_button')}>
                      <EditIcon />
                    </IconButton>
                    <IconButton onClick={() => handleDeleteClick(pb.id.toString())} color="error" aria-label={tGeneral('delete')}>
                      <DeleteIcon />
                    </IconButton>
                  </TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>
        </TableContainer>
      )}
    </Box>
  );
};

export default PurchaseBillList;

```
--- FILE_END ---

--- FILE_START ---
PATH: src/components/Layout.tsx
TYPE: typescript-react
CONTENT:
```
"use client";

import React, { ReactNode, useCallback } from 'react'; // Added useCallback
import { AppBar, Toolbar, Typography, Container, Box, Button, IconButton, useMediaQuery, useTheme } from '@mui/material';
import Link from 'next/link';
import { useTranslations } from 'next-intl';
import { useSession, signOut } from 'next-auth/react';
import LanguageSwitcher from './LanguageSwitcher';
import ThemeToggleButton from './ThemeToggleButton';
import MenuIcon from '@mui/icons-material/Menu';
import Drawer from '@mui/material/Drawer';
import List from '@mui/material/List';
import ListItem from '@mui/material/ListItem';
import ListItemButton from '@mui/material/ListItemButton';
import ListItemText from '@mui/material/ListItemText';
import Divider from '@mui/material/Divider';
import { useRouter, useParams } from 'next/navigation';

interface LayoutProps {
  children: ReactNode;
}

const Layout: React.FC<LayoutProps> = ({ children }) => {
  const t = useTranslations('layout');
  const { data: session, status } = useSession();
  const isAuthenticated = status === 'authenticated';

  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('sm'));

  const [mobileOpen, setMobileOpen] = React.useState(false);

  const router = useRouter();
  const params = useParams();
  const currentLocale = params.locale as string || 'en';

  const handleDrawerToggle = useCallback(() => { // Using useCallback
    setMobileOpen((prev) => !prev);
  }, []);

  const drawer = (
    <Box
      onClick={handleDrawerToggle}
      sx={{
        textAlign: 'center',
        display: 'flex',
        flexDirection: 'column',
        height: '100%',
      }}
    >
      <Typography variant="h6" sx={{ my: 2 }}>
        {t('app_title')}
      </Typography>
      <List sx={{ flexGrow: 1 }}>
        {isAuthenticated && (
          <>
            <ListItem disablePadding>
              <ListItemButton component={Link} href={`/${currentLocale}/dashboard`}>
                <ListItemText primary={t('dashboard_link')} />
              </ListItemButton>
            </ListItem>
            <ListItem disablePadding>
              <ListItemButton component={Link} href={`/${currentLocale}/purchases`}>
                <ListItemText primary={t('purchases_link')} />
              </ListItemButton>
            </ListItem>
            <ListItem disablePadding>
              <ListItemButton component={Link} href={`/${currentLocale}/summary`}>
                <ListItemText primary={t('summary_link')} />
              </ListItemButton>
            </ListItem>
            <ListItem disablePadding>
              <ListItemButton onClick={() => signOut({ callbackUrl: `/${currentLocale}` })}>
                <ListItemText primary={t('sign_out_button')} />
              </ListItemButton>
            </ListItem>
          </>
        )}
      </List>
      
      {isAuthenticated && <Divider sx={{ my: 1 }} />}
      <Box sx={{ p: 2, display: 'flex', justifyContent: 'space-around', alignItems: 'center' }}>
        <LanguageSwitcher />
        <ThemeToggleButton />
      </Box>
    </Box>
  );

  return (
    <Box sx={{ flexGrow: 1 }}>
      <AppBar position="static" sx={{ borderRadius: 0 }}>
        <Toolbar sx={{ flexWrap: 'wrap', justifyContent: 'space-between' }}>
          {isMobile && isAuthenticated && (
            <IconButton
              color="inherit"
              aria-label="open drawer"
              edge="start"
              onClick={handleDrawerToggle}
              sx={{ mr: 2 }}
            >
              <MenuIcon />
            </IconButton>
          )}

          <Box sx={{ display: 'flex', alignItems: 'center', flexGrow: 1 }}>
            <Link href={`/${currentLocale}`} style={{ textDecoration: 'none', color: 'inherit', display: 'flex', alignItems: 'center' }}>
              <img
                src="/phulka.png"
                alt="Phulkas App Logo"
                style={{ height: 50, width: 50, borderRadius: '50%', marginRight: 8 }}
                onError={(e: React.SyntheticEvent<HTMLImageElement, Event>) => {
                  e.currentTarget.src = "https://placehold.co/50x50/CCCCCC/000000?text=LOGO";
                }}
              />
              <Typography variant="h6" component="div" sx={{ display: 'block' }}>
                {t('app_title')}
              </Typography>
            </Link>
          </Box>

          {!isMobile && isAuthenticated && (
            <Box sx={{ display: 'flex', alignItems: 'center' }}>
              <Button color="inherit" component={Link} href={`/${currentLocale}/dashboard`}>
                {t('dashboard_link')}
              </Button>
              <Button color="inherit" component={Link} href={`/${currentLocale}/purchases`}>
                {t('purchases_link')}
              </Button>
              <Button color="inherit" component={Link} href={`/${currentLocale}/summary`}>
                {t('summary_link')}
              </Button>
              <Button color="inherit" onClick={() => signOut({ callbackUrl: `/${currentLocale}` })}>
                {t('sign_out_button')}
              </Button>
            </Box>
          )}

          {!isMobile && (
            <Box sx={{ display: 'flex', alignItems: 'center', ml: 2 }}>
              <LanguageSwitcher />
              <ThemeToggleButton />
            </Box>
          )}
        </Toolbar>
      </AppBar>

      <nav>
        <Drawer
          variant="temporary"
          open={mobileOpen}
          onClose={handleDrawerToggle}
          ModalProps={{
            keepMounted: true,
          }}
          sx={{
            display: { xs: 'block', sm: 'none' },
            '& .MuiDrawer-paper': { boxSizing: 'border-box', width: 240, display: 'flex', flexDirection: 'column' },
          }}
        >
          {drawer}
        </Drawer>
      </nav>

      <Container sx={{ mt: 4 }}>
        {children}
      </Container>
    </Box>
  );
};

export default Layout;

```
--- FILE_END ---

--- FILE_START ---
PATH: src/components/BillForm.tsx
TYPE: typescript-react
CONTENT:
```
"use client";

import React, { useState, useEffect, useCallback, useMemo } from 'react'; // Added useCallback
import {
  TextField,
  Button,
  Box,
  Typography,
  MenuItem,
  Checkbox,
  FormControlLabel,
  CircularProgress,
  Alert,
  FormControl,
  InputLabel,
  Select,
  FormHelperText,
} from '@mui/material';
import { DatePicker } from '@mui/x-date-pickers/DatePicker';
import { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';
import { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';
import { format, parseISO, isValid } from 'date-fns';
import { useTranslations } from 'next-intl';
import { useRouter } from 'next/navigation';
import { Bill } from '@/types/Bill';
import { enUS, ja } from 'date-fns/locale';

interface BillFormProps {
  billId?: string;
  initialBill?: Bill;
  onSubmit: (data: Omit<Bill, 'id'>, currentBillId?: string) => void;
  isSubmitting?: boolean;
  defaultDate?: Date;
  onCancel: () => void;
}

const BillForm: React.FC<BillFormProps> = ({ billId, initialBill, onSubmit, isSubmitting, defaultDate, onCancel }) => {
  const t = useTranslations('bill_form');
  const tMealType = useTranslations('meal_type');
  const tErrors = useTranslations('errors');
  const tGeneral = useTranslations('general');

  const router = useRouter();
  const locale = router.locale as string;

  const [date, setDate] = useState<Date | null>(
    initialBill?.date ? parseISO(initialBill.date) : (defaultDate || new Date())
  );
  const [foodAmount, setFoodAmount] = useState<number | ''>(initialBill?.foodAmount ?? 0);
  const [drinkAmount, setDrinkAmount] = useState<number | ''>(initialBill?.drinkAmount ?? 0);
  const [mealType, setMealType] = useState<Bill['mealType']>(initialBill?.mealType ?? 'lunch');
  const [isOurFood, setIsOurFood] = useState<boolean>(initialBill?.isOurFood ?? true);
  const [numberOfPeopleWorkingDinner, setNumberOfPeopleWorkingDinner] = useState<number | ''>(initialBill?.numberOfPeopleWorkingDinner ?? 1);
  const [comments, setComments] = useState<string>(initialBill?.comments ?? '');

  const [error, setError] = useState<{ [key: string]: string }>({});
  const [formError, setFormError] = useState<string | null>(null);

  const dateFnsLocale = useMemo(() => {
    return locale === 'ja' ? ja : enUS;
  }, [locale]);

  useEffect(() => {
    if (initialBill) {
      setDate(parseISO(initialBill.date));
      setFoodAmount(initialBill.foodAmount);
      setDrinkAmount(initialBill.drinkAmount);
      setMealType(initialBill.mealType);
      setIsOurFood(initialBill.isOurFood);
      setNumberOfPeopleWorkingDinner(initialBill.numberOfPeopleWorkingDinner ?? 1);
      setComments(initialBill.comments ?? '');
    } else if (defaultDate) {
      setDate(defaultDate);
      setFoodAmount(0);
      setDrinkAmount(0);
      setMealType('lunch');
      setIsOurFood(true);
      setNumberOfPeopleWorkingDinner(1);
      setComments('');
    }
    setFormError(null);
    setError({});
  }, [initialBill, defaultDate]);

  const validateForm = useCallback(() => { // Using useCallback
    const newErrors: { [key: string]: string } = {};

    if (!date || !isValid(date)) {
      newErrors.date = tErrors('invalid_date');
    }

    if (foodAmount === '' || foodAmount < 0) {
      newErrors.foodAmount = tErrors('positive_number');
    }

    if (drinkAmount === '' || drinkAmount < 0) {
      newErrors.drinkAmount = tErrors('positive_number');
    }

    if (mealType === 'dinner' && (numberOfPeopleWorkingDinner === '' || numberOfPeopleWorkingDinner < 1)) {
      newErrors.numberOfPeopleWorkingDinner = t('num_people_min');
    }

    setError(newErrors);
    return Object.keys(newErrors).length === 0;
  }, [date, foodAmount, drinkAmount, mealType, numberOfPeopleWorkingDinner, tErrors, t]);

  const handleSubmit = useCallback(async (e: React.FormEvent) => { // Using useCallback
    e.preventDefault();

    if (!validateForm()) {
      setFormError(tGeneral('errors.form_validation_failed') || 'Please correct the errors in the form.');
      return;
    }
    setFormError(null);

    const formattedDate = date ? format(date, 'yyyy-MM-dd') : '';

    const formData: Omit<Bill, 'id'> = {
      date: formattedDate,
      foodAmount: Number(foodAmount),
      drinkAmount: Number(drinkAmount),
      mealType,
      isOurFood,
      numberOfPeopleWorkingDinner: mealType === 'dinner' ? Number(numberOfPeopleWorkingDinner) : 1,
      comments: comments.trim() || null,
    };

    onSubmit(formData, billId);
  }, [date, foodAmount, drinkAmount, mealType, isOurFood, numberOfPeopleWorkingDinner, comments, onSubmit, billId, validateForm, tGeneral]);

  return (
    <Box component="form" onSubmit={handleSubmit} noValidate sx={{ mt: 1 }}>
      {formError && (
        <Alert severity="error" sx={{ mb: 2 }}>
          {formError}
        </Alert>
      )}

      <LocalizationProvider dateAdapter={AdapterDateFns} adapterLocale={dateFnsLocale}>
        <DatePicker
          label={t('date_label')}
          value={date}
          onChange={(newDate) => setDate(newDate)}
          slotProps={{ textField: { fullWidth: true, margin: "normal", error: !!error.date, helperText: error.date } }}
          format="yyyy-MM-dd"
        />
      </LocalizationProvider>

      <FormControl fullWidth margin="normal" error={!!error.mealType}>
        <InputLabel id="meal-type-label">{t('meal_type_label')}</InputLabel>
        <Select
          labelId="meal-type-label"
          id="meal-type"
          value={mealType}
          label={t('meal_type_label')}
          onChange={(e) => setMealType(e.target.value as Bill['mealType'])}
        >
          <MenuItem value="lunch">{tMealType('lunch')}</MenuItem>
          <MenuItem value="dinner">{tMealType('dinner')}</MenuItem>
        </Select>
        {error.mealType && <FormHelperText>{error.mealType}</FormHelperText>}
      </FormControl>

      <TextField
        label={t('food_amount_label')}
        value={foodAmount}
        onChange={(e) => setFoodAmount(e.target.value === '' ? '' : Number(e.target.value))}
        fullWidth
        margin="normal"
        type="number"
        inputProps={{ min: 0 }}
        error={!!error.foodAmount}
        helperText={error.foodAmount}
      />

      <TextField
        label={t('drink_amount_label')}
        value={drinkAmount}
        onChange={(e) => setDrinkAmount(e.target.value === '' ? '' : Number(e.target.value))}
        fullWidth
        margin="normal"
        type="number"
        inputProps={{ min: 0 }}
        error={!!error.drinkAmount}
        helperText={error.drinkAmount}
      />

      {mealType === 'dinner' && (
        <>
          <FormControlLabel
            control={<Checkbox checked={isOurFood} onChange={(e) => setIsOurFood(e.target.checked)} />}
            label={t('is_our_food_label')}
          />
          <TextField
            label={t('num_people_working_label')}
            value={numberOfPeopleWorkingDinner}
            onChange={(e) => setNumberOfPeopleWorkingDinner(e.target.value === '' ? '' : Number(e.target.value))}
            fullWidth
            margin="normal"
            type="number"
            inputProps={{ min: 1 }}
            error={!!error.numberOfPeopleWorkingDinner}
            helperText={error.numberOfPeopleWorkingDinner}
          />
        </>
      )}

      <TextField
        label={t('comments_label')}
        value={comments}
        onChange={(e) => setComments(e.target.value)}
        fullWidth
        multiline
        rows={4}
        margin="normal"
        sx={{
          '& .MuiInputLabel-root': {
            transform: 'translate(14px, 14px) scale(1)',
          },
          '& .MuiInputLabel-shrink': {
            transform: 'translate(14px, -9px) scale(0.75)',
          },
          '& .MuiOutlinedInput-root': {
            paddingTop: '18px',
          },
        }}
      />

      <Box sx={{ display: 'flex', justifyContent: 'flex-end', mt: 2 }}>
        <Button onClick={onCancel} sx={{ mr: 2 }} disabled={isSubmitting}>
          {t('cancel')}
        </Button>
        <Button type="submit" variant="contained" color="primary" disabled={isSubmitting}>
          {isSubmitting ? <CircularProgress size={24} /> : t('save_button')}
        </Button>
      </Box>
    </Box>
  );
};

export default BillForm;

```
--- FILE_END ---

--- FILE_START ---
PATH: src/components/InterpolationTest.tsx
TYPE: typescript-react
CONTENT:
```
// src/components/InterpolationTest.tsx
"use client";

import React from 'react';
import Typography from '@mui/material/Typography';
import { useTranslations } from 'next-intl';

const InterpolationTest: React.FC = () => {
  const t = useTranslations('dashboard');
  const testKey = 'todays_entries';
  const testValue = 'HARDCODED_TEST_DATE';
  const interpolatedText = t(testKey, { date: testValue });

  return (
    <Typography variant="h6" color="secondary" sx={{ mt: 2, border: '1px dashed red', p: 1 }}>
      Interpolation Test Component Output (next-intl): {interpolatedText}
    </Typography>
  );
};

export default InterpolationTest;

```
--- FILE_END ---

--- FILE_START ---
PATH: src/components/AuthProvider.tsx
TYPE: typescript-react
CONTENT:
```
"use client";

import { SessionProvider } from 'next-auth/react';
import React, { ReactNode } from 'react';

interface AuthProviderProps {
  children: ReactNode;
}

export const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => { // This is a NAMED export
  return (
    <SessionProvider>
      {children}
    </SessionProvider>
  );
};

```
--- FILE_END ---

--- FILE_START ---
PATH: src/components/DailyBillSummary.tsx
TYPE: typescript-react
CONTENT:
```
"use client";

import React, { useMemo } from 'react';
import {
  Card,
  CardContent,
  Typography,
  List,
  ListItem,
  ListItemText,
  Divider,
  Box,
  Button,
  useTheme,
  useMediaQuery,
} from '@mui/material';
import { useTranslations } from 'next-intl';
import { format, parseISO } from 'date-fns';
import { enUS, ja } from 'date-fns/locale';

import { DailySummary, MealSummary } from '@/lib/calculations';

interface DailyBillSummaryProps {
  date: string; // The selected date in 'yyyy-MM-dd' format
  dailySummary: DailySummary; // Now expects a DailySummary object
  locale: string;
  onClose: () => void; // Function to close the summary
}

const MealSummaryDisplay: React.FC<{
  title: string;
  summary: MealSummary;
  locale: string;
  tGeneral: (key: string) => string;
}> = ({ title, summary, locale, tGeneral }) => (
  <Box sx={{ mb: 2 }}>
    <Typography variant="h6" component="h3" gutterBottom>
      {title}
    </Typography>
    <Typography variant="body2">
      {tGeneral('summary.food_total')}: ¥{summary.rawFoodTotal.toLocaleString(locale)} {/* Changed from raw_food_total */}
    </Typography>
    <Typography variant="body2">
      {tGeneral('summary.drink_total')}: ¥{summary.rawDrinkTotal.toLocaleString(locale)} {/* Changed from raw_drink_total */}
    </Typography>
    <Typography variant="body1" color="primary" sx={{ fontWeight: 'bold', mt: 1 }}>
      {tGeneral('summary.total_earnings_label')}: ¥{summary.phulkasEarnings.toLocaleString(locale)} {/* Changed from phulkas_earnings */}
    </Typography>
    {summary.isOurFood !== undefined && (
      <Typography variant="body2">
        {tGeneral('summary.is_our_food_label')}: {summary.isOurFood ? tGeneral('general.yes') : tGeneral('general.no')}
      </Typography>
    )}
    {summary.numberOfPeopleWorkingDinner !== undefined && (
      <Typography variant="body2">
        {tGeneral('summary.num_people_working_label')}: {summary.numberOfPeopleWorkingDinner}
      </Typography>
    )}
  </Box>
);


const DailyBillSummary: React.FC<DailyBillSummaryProps> = ({ date, dailySummary, locale, onClose }) => {
  const t = useTranslations('summary');
  const tGeneral = useTranslations();
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('sm'));

  const dateFnsLocale = useMemo(() => {
    return locale === 'ja' ? ja : enUS;
  }, [locale]);

  const formattedDate = format(parseISO(date), 'PPP', { locale: dateFnsLocale });

  return (
    <Card sx={{ mt: 4, mb: 4, borderRadius: 3, boxShadow: 3, width: '100%' }}>
      <CardContent>
        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>
          <Typography variant="h5" component="h2">
            {t('daily_summary_for', { date: formattedDate })}
          </Typography>
          <Button onClick={onClose} variant="outlined" size="small">
            {tGeneral('general.close')}
          </Button>
        </Box>
        <Divider sx={{ my: 2 }} />

        {dailySummary.lunch.phulkasEarnings > 0 || dailySummary.lunch.rawFoodTotal > 0 || dailySummary.lunch.rawDrinkTotal > 0 ? (
          <MealSummaryDisplay
            title={tGeneral('summary.lunch_summary_title')}
            summary={dailySummary.lunch}
            locale={locale}
            tGeneral={tGeneral}
          />
        ) : (
          <Typography variant="body2" sx={{ mb: 2 }}>{tGeneral('summary.no_lunch_entries')}</Typography>
        )}

        <Divider sx={{ my: 2 }} />

        {dailySummary.dinner.phulkasEarnings > 0 || dailySummary.dinner.rawFoodTotal > 0 || dailySummary.dinner.rawDrinkTotal > 0 ? (
          <MealSummaryDisplay
            title={tGeneral('summary.dinner_summary_title')}
            summary={dailySummary.dinner}
            locale={locale}
            tGeneral={tGeneral}
          />
        ) : (
          <Typography variant="body2" sx={{ mb: 2 }}>{tGeneral('summary.no_dinner_entries')}</Typography>
        )}

        <Divider sx={{ my: 2 }} />

        <Typography variant="h5" color="primary" sx={{ fontWeight: 'bold', mt: 2 }}>
          {t('total_daily_earnings', { amount: dailySummary.dayTotalEarnings.toLocaleString(locale) })}
        </Typography>

      </CardContent>
    </Card>
  );
};

export default DailyBillSummary;

```
--- FILE_END ---

--- FILE_START ---
PATH: src/components/DailySummaryCard.tsx
TYPE: typescript-react
CONTENT:
```
"use client";

import React from 'react';
import { Box, Typography, Paper, Grid, useTheme, useMediaQuery } from '@mui/material';
import { useTranslations } from 'next-intl';
import { DailySummary, MealSummary } from '@/lib/calculations'; // Ensure these types are correct
import { AppConfig } from '@/config/app'; // Ensure this path is correct

interface DailySummaryCardProps {
  date?: string;
  summary: DailySummary | null;
}

const DailySummaryCard: React.FC<DailySummaryCardProps> = ({ date, summary }) => {
  const t = useTranslations('dashboard');
  const tEarnings = useTranslations('earnings_details');

  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('sm'));

  if (!summary) {
    return (
      <Paper elevation={2} sx={{ p: 2, mb: 2, textAlign: 'center' }}>
        <Typography variant="body1">{t('no_summary_data')}</Typography>
      </Paper>
    );
  }

  const { lunch, dinner, dayTotalEarnings } = summary;

  // FIX: Make formatCurrency robust to handle potential null/undefined amounts
  const formatCurrency = (amount: number | string | null | undefined) => {
    let numericAmount: number;

    if (typeof amount === 'string') {
      const cleanedString = amount.replace(/[¥,]/g, '');
      numericAmount = Number(cleanedString);
    } else {
      numericAmount = amount ?? 0; // Default to 0 if null or undefined
    }

    if (isNaN(numericAmount)) {
      numericAmount = 0;
    }

    return `¥${numericAmount.toLocaleString()}`;
  };

  const renderMealDetails = (meal: 'lunch' | 'dinner', mealSummary: MealSummary) => {
    const isLunch = meal === 'lunch';
    
    // Ensure these properties are handled safely, providing defaults if they might be missing
    const isOurFood = mealSummary.isOurFood ?? true;
    const numberOfPeopleWorkingDinner = mealSummary.numberOfPeopleWorkingDinner ?? 1;
    const effectiveWorkers = Math.max(1, numberOfPeopleWorkingDinner);

    let directFoodEarningsDisplay = 0;
    let commonPoolFoodContributionDisplay = 0;
    let commonPoolDrinkContributionDisplay = 0;
    let totalCommonPoolDisplay = 0;
    let ourShareFromCommonPoolDisplay = 0;

    if (!isLunch) {
      if (isOurFood) {
        directFoodEarningsDisplay = (mealSummary.rawFoodTotal ?? 0) * AppConfig.DINNER_FOOD_OUR_SHARE_PERCENT;
      } else {
        directFoodEarningsDisplay = 0;
      }
      
      commonPoolFoodContributionDisplay = (mealSummary.rawFoodTotal ?? 0) * AppConfig.DINNER_FOOD_COMMON_POOL_PERCENT;
      commonPoolDrinkContributionDisplay = (mealSummary.rawDrinkTotal ?? 0) * AppConfig.DINNER_DRINK_COMMON_POOL_PERCENT;
      
      totalCommonPoolDisplay = commonPoolFoodContributionDisplay + commonPoolDrinkContributionDisplay;
      ourShareFromCommonPoolDisplay = totalCommonPoolDisplay / effectiveWorkers;
    }

    return (
      <Box sx={{ mt: 1 }}>
        <Typography variant="subtitle1" sx={{ fontWeight: 'bold', color: theme.palette.text.primary }}> {/* Explicitly set color for readability */}
          {t(`${meal}_summary`)}
        </Typography>

        <Typography variant="body2" sx={{ color: theme.palette.text.secondary }}>{t('food_bills_total', { amount: formatCurrency(mealSummary.rawFoodTotal) })}</Typography>
        <Typography variant="body2" sx={{ color: theme.palette.text.secondary }}>{t('drink_bills_total', { amount: formatCurrency(mealSummary.rawDrinkTotal) })}</Typography>

        {isLunch ? (
          <>
            <Typography variant="caption" display="block" sx={{ mt: 1, color: theme.palette.text.secondary }}> {/* Explicitly set color */}
              {tEarnings('lunch_food_base_income', { base: formatCurrency(AppConfig.LUNCH_FOOD_BASE_INCOME) })}
            </Typography>
            {mealSummary.rawFoodTotal > AppConfig.LUNCH_FOOD_BASE_INCOME && (
              <Typography variant="caption" display="block" sx={{ color: theme.palette.text.secondary }}> {/* Explicitly set color */}
                {tEarnings('lunch_food_overage', {
                  overage: formatCurrency(Math.max(0, (mealSummary.rawFoodTotal ?? 0) - AppConfig.LUNCH_FOOD_BASE_INCOME)),
                  overageHalf: formatCurrency(Math.max(0, (mealSummary.rawFoodTotal ?? 0) - AppConfig.LUNCH_FOOD_BASE_INCOME) * AppConfig.LUNCH_FOOD_OVERAGE_SHARE_PERCENT)
                })}
              </Typography>
            )}
            <Typography variant="caption" display="block" sx={{ color: theme.palette.text.secondary }}> {/* Explicitly set color */}
              {tEarnings('total_lunch_food_income_share', { amount: formatCurrency(mealSummary.foodEarnings) })}
            </Typography>
            <Typography variant="caption" display="block" sx={{ color: theme.palette.text.secondary }}> {/* Explicitly set color */}
              {tEarnings('drink_calc_lunch', {
                total: formatCurrency(mealSummary.rawDrinkTotal),
                percentage: AppConfig.LUNCH_DRINK_SHARE_PERCENT * 100,
                share: formatCurrency(mealSummary.drinkEarnings)
              })}
            </Typography>
          </>
        ) : (
          <>
            {isOurFood && directFoodEarningsDisplay > 0 && (
              <Typography variant="caption" display="block" sx={{ mt: 1, color: theme.palette.text.secondary }}> {/* Explicitly set color */}
                {tEarnings('dinner_food_direct_share', {
                  total: formatCurrency(mealSummary.rawFoodTotal),
                  share: formatCurrency(directFoodEarningsDisplay)
                })}
              </Typography>
            )}

            <Typography variant="caption" display="block" sx={{ mt: 1, color: theme.palette.text.secondary }}> {/* Explicitly set color */}
              {tEarnings('dinner_common_pool_contrib_food', { amount: formatCurrency(commonPoolFoodContributionDisplay) })}
            </Typography>
            <Typography variant="caption" display="block" sx={{ color: theme.palette.text.secondary }}> {/* Explicitly set color */}
              {tEarnings('dinner_common_pool_contrib_drinks', { amount: formatCurrency(commonPoolDrinkContributionDisplay) })}
            </Typography>
            <Typography variant="caption" display="block" sx={{ color: theme.palette.text.secondary }}> {/* Explicitly set color */}
              {tEarnings('total_common_pool', { amount: formatCurrency(totalCommonPoolDisplay) })}
            </Typography>
            <Typography variant="caption" display="block" sx={{ color: theme.palette.text.secondary }}> {/* Explicitly set color */}
              {tEarnings('our_common_pool_share', {
                amount: formatCurrency(ourShareFromCommonPoolDisplay),
                workers: effectiveWorkers
              })}
            </Typography>
          </>
        )}

        <Typography variant="body1" color="primary" sx={{ fontWeight: 'bold', mt: 1, color: theme.palette.text.primary }}> {/* Explicitly set color for readability */}
          {t(`phulkas_${meal}_earnings`, { amount: formatCurrency(mealSummary.phulkasEarnings) })}
        </Typography>
      </Box>
    );
  };

  return (
    <Paper
      elevation={3}
      sx={{
        p: 3,
        mb: 3,
        borderRadius: isMobile ? 2 : 3,
        mx: isMobile ? 1 : 'auto',
      }}
    >
      {date && (
        <Typography variant="h6" gutterBottom sx={{ color: theme.palette.text.primary }}> {/* Explicitly set color */}
          {t('summary_for_date', { date: date })}
        </Typography>
      )}

      <Grid container spacing={isMobile ? 1 : 3}>
        <Grid item xs={12} sm={6}> {/* Changed to `item` */}
          {renderMealDetails('lunch', lunch)}
        </Grid>

        <Grid item xs={12} sm={6}> {/* Changed to `item` */}
          {renderMealDetails('dinner', dinner)}
        </Grid>

        <Grid item xs={12} sx={{ mt: 2 }}> {/* Changed to `item` */}
          <Typography variant="h6" sx={{ fontWeight: 'bold', borderTop: '1px solid', borderColor: theme.palette.divider, pt: 1, color: theme.palette.text.primary }}> {/* Explicitly set color and border color */}
            {t('day_total_earnings_header')}: {formatCurrency(dayTotalEarnings)}
          </Typography>
        </Grid>
      </Grid>
    </Paper>
  );
};

export default DailySummaryCard;

```
--- FILE_END ---

--- FILE_START ---
PATH: src/components/MuiRegistry.tsx
TYPE: typescript-react
CONTENT:
```
"use client";

import React, { useState } from 'react';
import { useServerInsertedHTML } from 'next/navigation';
import { CacheProvider } from '@emotion/react';
import createCache from '@emotion/cache';
import { EmotionCache } from '@emotion/cache';

export default function MuiRegistry({ children }: { children: React.ReactNode }) { // This is a DEFAULT export
  const [cache] = useState(() => {
    const cache = createCache({ key: 'mui' });
    cache.compat = true;
    return cache;
  });

  const [inserted] = useState<string[]>([]);

  useServerInsertedHTML(() => {
    const serialized = cache.sheet.tags.join('');
    if (serialized.length === 0) {
      return null;
    }
    if (inserted.includes(serialized)) {
      return null;
    }
    inserted.push(serialized);
    return (
      <style
        data-emotion={`${cache.key} ${serialized.substring(0, serialized.indexOf('{'))}`}
        dangerouslySetInnerHTML={{ __html: serialized }}
      />
    );
  });

  return <CacheProvider value={cache}>{children}</CacheProvider>;
}

```
--- FILE_END ---

--- FILE_START ---
PATH: src/components/LanguageSwitcher.tsx
TYPE: typescript-react
CONTENT:
```
"use client";

import React, { useState, useEffect, useCallback } from 'react'; // Added useCallback
import { useRouter, usePathname, useParams } from 'next/navigation';
import { useTranslations } from 'next-intl';
import Select from '@mui/material/Select';
import MenuItem from '@mui/material/MenuItem';
import FormControl from '@mui/material/FormControl';
import InputLabel from '@mui/material/InputLabel';
import { useTheme } from '@mui/material/styles';

const LanguageSwitcher: React.FC = () => {
  const router = useRouter();
  const pathname = usePathname();
  const params = useParams();
  const t = useTranslations('language_switcher');
  const theme = useTheme();

  const currentLocale = params.locale as string;
  const [locale, setLocale] = useState(currentLocale);

  useEffect(() => {
    if (currentLocale && currentLocale !== locale) {
      setLocale(currentLocale);
    }
  }, [currentLocale, locale]);

  const handleChange = useCallback((event: { target: { value: unknown } }) => { // Using useCallback
    const newLocale = event.target.value as string;
    setLocale(newLocale);

    const newPath = `/${newLocale}${pathname.substring(`/${currentLocale}`.length)}`;
    
    router.push(newPath);
    router.refresh();
  }, [currentLocale, pathname, router]);

  const desktopTextColor = theme.palette.primary.contrastText;
  const desktopBackgroundColor = theme.palette.primary.main;
  const desktopBorderColor = theme.palette.primary.dark;
  const desktopFocusedBorderColor = theme.palette.primary.light;

  const mobileTextColor = theme.palette.text.primary;
  const mobileBackgroundColor = 'transparent';
  const mobileBorderColor = theme.palette.divider;
  const mobileFocusedBorderColor = theme.palette.primary.main;

  return (
    <FormControl variant="outlined" size="small" sx={{ minWidth: 120 }}>
      <InputLabel 
        id="language-switcher-label" 
        sx={{ 
          color: { xs: mobileTextColor, md: desktopTextColor }
        }} 
      >
        {t('label')}
      </InputLabel>
      <Select
        labelId="language-switcher-label"
        value={locale}
        onChange={handleChange}
        label={t('label')}
        sx={{
          color: { xs: mobileTextColor, md: desktopTextColor },
          backgroundColor: { xs: mobileBackgroundColor, md: desktopBackgroundColor },
          borderRadius: theme.shape.borderRadius,
          '& .MuiOutlinedInput-notchedOutline': {
            borderColor: { xs: mobileBorderColor, md: desktopBorderColor },
          },
          '&:hover .MuiOutlinedInput-notchedOutline': {
            borderColor: { xs: mobileBorderColor, md: desktopBorderColor },
          },
          '&.Mui-focused .MuiOutlinedInput-notchedOutline': {
            borderColor: { xs: mobileFocusedBorderColor, md: desktopFocusedBorderColor },
          },
          '& .MuiSelect-icon': {
            color: { xs: mobileTextColor, md: desktopTextColor },
          },
          '& .MuiPaper-root': {
            backgroundColor: theme.palette.background.paper,
          },
        }}
      >
        <MenuItem value="en" sx={{ color: mobileTextColor }}>{t('en')}</MenuItem> 
        <MenuItem value="ja" sx={{ color: mobileTextColor }}>{t('ja')}</MenuItem>
      </Select>
    </FormControl>
  );
};

export default LanguageSwitcher;

```
--- FILE_END ---

--- FILE_START ---
PATH: src/lib/prisma.ts
TYPE: typescript
CONTENT:
```
// src/lib/prisma.ts
import { PrismaClient } from '@prisma/client';

// Declare a global variable to store the PrismaClient instance in development
// This prevents multiple instances of PrismaClient being created during hot-reloading
declare global {
  var prisma: PrismaClient | undefined;
}

let prisma: PrismaClient;

if (process.env.NODE_ENV === 'production') {
  prisma = new PrismaClient();
} else {
  // In development, use the global variable if it exists, otherwise create a new instance
  if (!global.prisma) {
    global.prisma = new PrismaClient();
  }
  prisma = global.prisma;
}

export default prisma;

```
--- FILE_END ---

--- FILE_START ---
PATH: src/lib/calculations.ts
TYPE: typescript
CONTENT:
```
import { Bill } from '@/types/bill'; // Ensure this Bill type has foodAmount and drinkAmount
import { AppConfig } from '@/config/app';
import { format } from 'date-fns';

export interface MealSummary {
  rawFoodTotal: number;
  rawDrinkTotal: number;
  foodEarnings: number;
  drinkEarnings: number;
  phulkasEarnings: number;
  isOurFood?: boolean; // Optional, only relevant for dinner calculations
  numberOfPeopleWorkingDinner?: number; // Optional, only relevant for dinner calculations
}

export interface DailySummary {
  lunch: MealSummary;
  dinner: MealSummary;
  dayTotalEarnings: number;
}

const getDefaultMealSummary = (): MealSummary => ({
  rawFoodTotal: 0,
  rawDrinkTotal: 0,
  foodEarnings: 0,
  drinkEarnings: 0,
  phulkasEarnings: 0,
});

const getDefaultDailySummary = (): DailySummary => ({
  lunch: getDefaultMealSummary(),
  dinner: getDefaultMealSummary(),
  dayTotalEarnings: 0,
});

// Original logic: takes foodAmount and drinkAmount separately for lunch
const calculateLunchMealSummary = (foodAmount: number, drinkAmount: number): MealSummary => {
  const foodOverage = Math.max(0, foodAmount - AppConfig.LUNCH_FOOD_BASE_INCOME);
  const foodEarnings = AppConfig.LUNCH_FOOD_BASE_INCOME + (foodOverage * AppConfig.LUNCH_FOOD_OVERAGE_SHARE_PERCENT);
  const drinkEarnings = drinkAmount * AppConfig.LUNCH_DRINK_SHARE_PERCENT;
  const phulkasEarnings = foodEarnings + drinkEarnings;
  return {
    rawFoodTotal: foodAmount,
    rawDrinkTotal: drinkAmount,
    foodEarnings: foodEarnings,
    drinkEarnings: drinkEarnings,
    phulkasEarnings: phulkasEarnings,
  };
};

// Original logic: takes foodAmount and drinkAmount separately for dinner
const calculateDinnerMealSummary = (foodAmount: number, drinkAmount: number, isOurFood: boolean, numberOfPeopleWorkingDinner: number): MealSummary => {
  const effectiveWorkers = Math.max(1, numberOfPeopleWorkingDinner);
  let directFoodEarnings = 0;
  const commonPoolFoodContribution = foodAmount * AppConfig.DINNER_FOOD_COMMON_POOL_PERCENT;
  const commonPoolDrinkContribution = drinkAmount * AppConfig.DINNER_DRINK_COMMON_POOL_PERCENT;

  if (isOurFood) {
    directFoodEarnings = foodAmount * AppConfig.DINNER_FOOD_OUR_SHARE_PERCENT;
  } else {
    directFoodEarnings = 0;
  }

  const totalCommonPool = commonPoolFoodContribution + commonPoolDrinkContribution;
  const ourShareFromCommonPool = totalCommonPool / effectiveWorkers;
  const phulkasEarnings = directFoodEarnings + ourShareFromCommonPool;

  return {
    rawFoodTotal: foodAmount,
    rawDrinkTotal: drinkAmount,
    foodEarnings: directFoodEarnings,
    drinkEarnings: ourShareFromCommonPool,
    phulkasEarnings: phulkasEarnings,
    isOurFood: isOurFood,
    numberOfPeopleWorkingDinner: numberOfPeopleWorkingDinner,
  };
};

export const calculateDailyEarnings = (bills: Bill[]): DailySummary => {
  const dailySummary: DailySummary = getDefaultDailySummary();

  let totalLunchFoodAmount = 0;
  let totalLunchDrinkAmount = 0;

  let tempDinnerFoodTotal = 0;
  let tempDinnerDrinkTotal = 0;
  let tempDinnerIsOurFood: boolean = true; // Default or last encountered
  let tempDinnerNumWorkers: number = 1; // Default or last encountered

  bills.forEach(bill => {
    if (bill.mealType === 'lunch') {
      totalLunchFoodAmount += bill.foodAmount; // Use foodAmount
      totalLunchDrinkAmount += bill.drinkAmount; // Use drinkAmount
    } else if (bill.mealType === 'dinner') {
      // For dinner, we need to aggregate the raw amounts, but calculate earnings based on the last bill's flags
      // This aggregation logic for dinner might be a source of discrepancy if multiple dinner bills have different isOurFood/numWorkers.
      // The dashboard's calculateDailyEarnings aggregates raw amounts for lunch, but for dinner, it seems to expect one set of flags per day.
      // If multiple dinner bills exist for a day with different flags, this needs careful consideration.
      // For now, we'll sum the raw amounts and use the flags from the *last* dinner bill encountered,
      // which is how the original DashboardPageClient seemed to imply.
      tempDinnerFoodTotal += bill.foodAmount;
      tempDinnerDrinkTotal += bill.drinkAmount;
      tempDinnerIsOurFood = bill.isOurFood ?? true;
      tempDinnerNumWorkers = bill.numberOfPeopleWorkingDinner ?? 1;
    }
  });

  // Calculate Lunch Summary once with aggregated totals
  if (totalLunchFoodAmount > 0 || totalLunchDrinkAmount > 0) {
    const aggregatedLunchSummary = calculateLunchMealSummary(totalLunchFoodAmount, totalLunchDrinkAmount);
    dailySummary.lunch = aggregatedLunchSummary;
  }

  // Calculate Dinner Summary once with aggregated totals
  if (tempDinnerFoodTotal > 0 || tempDinnerDrinkTotal > 0) {
    const aggregatedDinnerSummary = calculateDinnerMealSummary(
      tempDinnerFoodTotal,
      tempDinnerDrinkTotal,
      tempDinnerIsOurFood,
      tempDinnerNumWorkers
    );
    dailySummary.dinner = aggregatedDinnerSummary;
  }

  dailySummary.dayTotalEarnings = dailySummary.lunch.phulkasEarnings + dailySummary.dinner.phulkasEarnings;
  return dailySummary;
};

export const calculateRangeSummary = (bills: Bill[]): DailySummary => {
  let totalRawFood = 0;
  let totalRawDrink = 0;
  let totalLunchPhulkasEarnings = 0;
  let totalDinnerPhulkasEarnings = 0;
  let totalOverallPhulkasEarnings = 0;

  const dailySummaries = calculateDailySummariesForRange(bills);

  dailySummaries.forEach(dailyEntry => {
    totalRawFood += dailyEntry.summary.lunch.rawFoodTotal + dailyEntry.summary.dinner.rawFoodTotal;
    totalRawDrink += dailyEntry.summary.lunch.rawDrinkTotal + dailyEntry.summary.dinner.rawDrinkTotal;
    
    totalLunchPhulkasEarnings += dailyEntry.summary.lunch.phulkasEarnings;
    totalDinnerPhulkasEarnings += dailyEntry.summary.dinner.phulkasEarnings;
    
    totalOverallPhulkasEarnings += dailyEntry.summary.dayTotalEarnings;
  });

  const summaryForRange: DailySummary = {
    lunch: {
      rawFoodTotal: totalRawFood,
      rawDrinkTotal: totalRawDrink,
      foodEarnings: 0,
      drinkEarnings: 0,
      phulkasEarnings: totalLunchPhulkasEarnings
    },
    dinner: {
      rawFoodTotal: 0,
      rawDrinkTotal: 0,
      foodEarnings: 0,
      drinkEarnings: 0,
      phulkasEarnings: totalDinnerPhulkasEarnings
    },
    dayTotalEarnings: totalOverallPhulkasEarnings
  };

  return summaryForRange;
};

export const calculateDailySummariesForRange = (bills: Bill[]): { date: string; summary: DailySummary }[] => {
  const dailyBillsMap: { [key: string]: Bill[] } = {};

  bills.forEach(bill => {
    const billDate = format(new Date(bill.date), 'yyyy-MM-dd');
    if (!dailyBillsMap[billDate]) {
      dailyBillsMap[billDate] = [];
    }
    dailyBillsMap[billDate].push(bill);
  });

  return Object.keys(dailyBillsMap)
    .sort((a, b) => b.localeCompare(a)) // Sort descending (latest date first)
    .map(date => {
      const billsForThisDay = dailyBillsMap[date];
      const dailySummary = calculateDailyEarnings(billsForThisDay);
      return { date, summary: dailySummary };
    });
};

```
--- FILE_END ---

--- FILE_START ---
PATH: src/lib/db.ts
TYPE: typescript
CONTENT:
```
// src/lib/db.ts
import { PrismaClient, MealType } from '@prisma/client'; // Import MealType enum from Prisma
import { BillFormData } from '@/components/BillForm'; // Assuming BillFormData is defined here or adjust path

// Instantiate PrismaClient
const prisma = new PrismaClient();

// Define the type for Bill data retrieved from Prisma
// This should match your Prisma schema Bill model
export interface Bill {
  id: number;
  date: Date; // Prisma typically returns Date objects for datetime fields
  mealType: MealType; // Use the imported MealType enum type
  foodAmount: number;
  drinkAmount: number;
  isOurFood: boolean | null; // Assuming nullable boolean in DB for dinner-specific field
  numberOfPeopleWorkingDinner: number | null; // Assuming nullable int in DB for dinner-specific field
  createdAt: Date;
  updatedAt: Date;
}

// Function to create a new bill
export const createBill = async (data: BillFormData): Promise<Bill> => {
  try {
    const newBill = await prisma.bill.create({
      data: {
        date: new Date(data.date), // Ensure date is a Date object
        // Convert lowercase string to uppercase MealType enum value
        mealType: data.mealType.toUpperCase() as MealType,
        foodAmount: data.foodAmount,
        drinkAmount: data.drinkAmount,
        // Map dinner-specific fields only if mealType is 'dinner'
        isOurFood: data.mealType === 'dinner' ? data.isOurFood ?? null : null,
        numberOfPeopleWorkingDinner: data.mealType === 'dinner' ? data.numberOfPeopleWorkingDinner ?? null : null,
      },
    });
    return newBill as Bill;
  } catch (error) {
    throw new Error("Failed to create bill.");
  }
};

// Function to get all bills within a date range
export const getBillsByDateRange = async (fromDate: string, toDate: string): Promise<Bill[]> => {
  try {
    // Parse date strings to Date objects for comparison
    const startDate = new Date(fromDate);
    const endDate = new Date(toDate);

    const bills = await prisma.bill.findMany({
      where: {
        date: {
          gte: startDate, // Greater than or equal to start date
          lte: endDate,   // Less than or equal to end date
        },
      },
      orderBy: {
        date: 'desc', // Order by date descending
      },
    });
    return bills as Bill[];
  } catch (error) {
    throw new Error("Failed to fetch bills.");
  }
};

// Function to get a single bill by ID
export const getBillById = async (id: number): Promise<Bill | null> => {
  try {
    const bill = await prisma.bill.findUnique({
      where: {
        id: id,
      },
    });
    return bill as Bill | null;
  } catch (error) {
    throw new Error(`Failed to fetch bill with ID ${id}.`);
  }
};

// Function to update an existing bill
export const updateBill = async (id: number, data: BillFormData): Promise<Bill> => {
  try {
    const updatedBill = await prisma.bill.update({
      where: {
        id: id,
      },
      data: {
        date: new Date(data.date), // Ensure date is a Date object
        // Convert lowercase string to uppercase MealType enum value
        mealType: data.mealType.toUpperCase() as MealType,
        foodAmount: data.foodAmount,
        drinkAmount: data.drinkAmount,
        // Map dinner-specific fields only if mealType is 'dinner'
        isOurFood: data.mealType === 'dinner' ? data.isOurFood ?? null : null,
        numberOfPeopleWorkingDinner: data.mealType === 'dinner' ? data.numberOfPeopleWorkingDinner ?? null : null,
      },
    });
    return updatedBill as Bill;
  } catch (error) {
    throw new Error(`Failed to update bill with ID ${id}.`);
  }
};

// Function to delete a bill by ID
export const deleteBill = async (id: number): Promise<Bill> => {
  try {
    const deletedBill = await prisma.bill.delete({
      where: {
        id: id,
      },
    });
    return deletedBill as Bill;
  } catch (error) {
    throw new Error(`Failed to delete bill with ID ${id}.`);
  }
};

```
--- FILE_END ---

--- FILE_START ---
PATH: src/i18n/navigation.ts
TYPE: typescript
CONTENT:
```
import {createNavigation} from 'next-intl/navigation';
import {routing} from './routing';
 
// Lightweight wrappers around Next.js' navigation
// APIs that consider the routing configuration
export const {Link, redirect, usePathname, useRouter, getPathname} =
  createNavigation(routing);
```
--- FILE_END ---

--- FILE_START ---
PATH: src/i18n/routing.ts
TYPE: typescript
CONTENT:
```
import {defineRouting} from 'next-intl/routing';
 
export const routing = defineRouting({
  // A list of all locales that are supported
  locales: ['en', 'ja'],
 
  // Used when no locale matches
  defaultLocale: 'en'
});
```
--- FILE_END ---

--- FILE_START ---
PATH: src/i18n/request.ts
TYPE: typescript
CONTENT:
```
// i18n/request.ts
import {getRequestConfig} from 'next-intl/server';
import {hasLocale} from 'next-intl';
import {routing} from './routing';
 
export default getRequestConfig(async ({ requestLocale, url }) => {

  // Await the requestLocale if it's a Promise
  let awaitedLocale = typeof requestLocale?.then === 'function'
    ? await requestLocale
    : requestLocale;

  if (typeof awaitedLocale === 'undefined' && url) {
    // Try to extract locale from the URL path (e.g., /ja/...)
    const match = url.pathname.match(/^\/([a-zA-Z-]+)\b/);
    if (match && hasLocale(routing.locales, match[1])) {
      awaitedLocale = match[1];
    }
  }

  const locale = hasLocale(routing.locales, awaitedLocale)
    ? awaitedLocale
    : routing.defaultLocale;

  let messages;
  try {
    messages = (await import(`../messages/${locale}.json`)).default;
  } catch (error) {
    // fallback to default locale messages
    messages = (await import(`../messages/${routing.defaultLocale}.json`)).default;
  }

  return {
    locale,
    messages,
    timeZone: 'Asia/Tokyo'
  };
});

```
--- FILE_END ---


Consolidation complete. You can copy the above output.
